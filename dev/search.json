[{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://usepa.github.io/ctxR/dev/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://usepa.github.io/ctxR/dev/articles/Bioactivity.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"ctxR: Bioactivity API","text":"vignette, CTX Bioactivity API explored. Data provided API’s Bioactivity endpoints sourced ToxCast’s invitrodb. US EPA’s Toxicity Forecaster (ToxCast) program makes vitro medium- high-throughput screening assay data publicly available prioritization hazard characterization thousands chemicals. ToxCast Data Analysis Pipeline (tcpl) R package manages, curve-fits, plots, stores ToxCast data populate linked MySQL database,  invitrodb . assays comprise Tier 2-3 new Computational Toxicology Blueprint, employ automated chemical screening technologies, evaluate effects chemical exposure living cells biological macromolecules, proteins (Thomas et al., 2019). information ToxCast program can found https://www.epa.gov/comptox-tools/toxicity-forecasting-toxcast. flexible analysis pipeline capable efficiently processing storing large volumes data. diverse data, received heterogeneous formats numerous vendors, transformed standard computable format loaded  invitrodb  database vendor-specific R scripts. data loaded database, ToxCast utilizes generalized processing functions provided package process, normalize, model, qualify, visualize data. Bioactivity API endpoints organized two different resources, “Assay” “Data”. “Assay” resource endpoints provide assay metadata specific  invitrodb  ‘aeids’ (assay endpoint ids). include annotations  invitrodb’s assay, assay_component, assay_component_endpoint, assay_list, assay_source, gene tables, returned -aeid format. “Data” resource endpoints split summary data (‘aeid’) bioactivity data ‘m4id’ (.e. ‘aeid’ ‘spid’). summary endpoint returns number active hits total multi- single-concentration chemicals tested specific ‘aeids’. endpoints return chemical information, level 3 concentration-response values, level 4 fit parameters, level 5 hit parameters, level 6 flags individual chemicals tested given ‘AEIDs’, ‘m4ids’, ‘SPIDs’, ‘DTXSIDs’. Several ctxR functions can used access CTX Bioactivity API data, described following sections. Tables output example filtered display first rows data. Regular ToxCast users may find easier use tcpl R Package, integrated ctxR’s bioactivity functions access API data ‘invitrodb’-like format. See tcpl’s Data Retrieval via API vignette guidance data retrieval plotting capabilities tcpl. NOTE: Please see introductory vignette overview ctxR package initial set instruction API key storage.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Bioactivity.html","id":"bioactivity-assay-resource","dir":"Articles","previous_headings":"","what":"Bioactivity Assay Resource","title":"ctxR: Bioactivity API","text":"Specific assays may searched well available assays data using two different functions.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Bioactivity.html","id":"get-annotation-by-aeid","dir":"Articles","previous_headings":"Bioactivity Assay Resource","what":"Get annotation by aeid","title":"ctxR: Bioactivity API","text":"get_annotation_by_aeid() retrieves annotation specific assay endpoint id (aeid). get_annotation_by_aeid_batch() retrieves annotation list (vector) assay endpoint ids (aeids). 251|NVS_LGIC_rGABAR_NonSele","code":"assay <- get_annotation_by_aeid(AEID = \"891\") assays <- get_annotation_by_aeid_batch(AEID = c(759,700,891)) # return is in list form by aeid, convert to table for output assays <- data.table::rbindlist(assays)"},{"path":"https://usepa.github.io/ctxR/dev/articles/Bioactivity.html","id":"get-all-assay-annotations","dir":"Articles","previous_headings":"Bioactivity Assay Resource","what":"Get all assay annotations","title":"ctxR: Bioactivity API","text":"get_all_assays() retrieves annotations assays available.","code":"all_assays <- get_all_assays()"},{"path":"https://usepa.github.io/ctxR/dev/articles/Bioactivity.html","id":"bioactivity-data-resource","dir":"Articles","previous_headings":"","what":"Bioactivity Data Resource","title":"ctxR: Bioactivity API","text":"several resources retrieving bioactivity data associated variety identifier types (e.g., DTXSID, aeid) available user.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Bioactivity.html","id":"get-summary-data","dir":"Articles","previous_headings":"Bioactivity Data Resource","what":"Get summary data","title":"ctxR: Bioactivity API","text":"get_bioactivity_summary() retrieves summary number active hits compared total number tested multiple single concentration aeid. get_bioactivity_summary_batch() retrieves summary list (vector) assay endpoint ids (aeids). Output previous get_bioactivity_summary().","code":"summary <- get_bioactivity_summary(AEID = \"891\") summary <- get_bioactivity_summary_batch(AEID = c(759,700,891))"},{"path":"https://usepa.github.io/ctxR/dev/articles/Bioactivity.html","id":"get-data","dir":"Articles","previous_headings":"Bioactivity Data Resource","what":"Get data","title":"ctxR: Bioactivity API","text":"get_bioactivity_details() can retrieve available multiple concentration data assay endpoint id (aeid), sample id (spid), Level 4 ID (m4id), chemical DTXSID. Returned chemical information, level 3 concentration-response values, level 4 fit parameters, level 5 hit parameters, level 6 flags individual chemicals tested. example request parameter provided : Similar _batch functions, get_bioactivity_details_batch() retrieves data list (vector) assay endpoint ids (aeid), sample ids (spid), Level 4 IDs (m4id), chemical DTXSIDs.","code":"# By spid spid_data <- get_bioactivity_details(SPID = 'TP0000904H05') # By m4id m4id_data <- get_bioactivity_details(m4id = 739695) # By DTXSID dtxsid_data <- get_bioactivity_details(DTXSID = \"DTXSID30944145\") # By aeid aeid_data <- get_bioactivity_details(AEID = 704) aeid_data_batch <- get_bioactivity_details_batch(AEID = c(759,700,891))"},{"path":"https://usepa.github.io/ctxR/dev/articles/Bioactivity.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"ctxR: Bioactivity API","text":"vignette, variety functions access different types data found Bioactivity endpoints CTX APIs listed. Users encouraged explore data accessible endpoints get better understanding data available. Additionally, experienced ToxCast users may find easier use tcpl R package, since integrated ctxR’s bioactivity functions retrieve API data familiar, ‘invitrodb’-like format.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"ctxR: Chemical API","text":"vignette, CTX Chemical API explored. foundation toxicology, toxicokinetics, exposure embedded physics chemistry chemical-biological interactions. accurate characterization chemical structure linked commonly used identifiers, names Chemical Abstracts Service Registry Numbers (CASRNs), essential support predictive modeling data well dissemination application data chemical safety decisions. cheminformatics backbone research efforts, sources available data CTX Chemical API include: Chemical structures, nomenclature, synonyms, IDs, list associations, physicochemical property, environmental fate transport data Distributed Structure-Searchable Toxicity (DSSTox) database. early references, see (Richard, . et al. 2002), (Richard, . et al. 2006), (Richard, . et al 2008). Predictions Toxicity Estimation Software Tool (TEST) suite QSAR models. early references, see (Martin, T. et al. 2001), (Martin, T. et al. 2007), (Young, D. et al. 2008). information Chemicals Chemistry Data can found : https://www.epa.gov/comptox-tools/downloadable-computational-toxicology-data#SCD. NOTE: Please see introductory vignette overview ctxR package initial set instruction API key storage. Several ctxR functions can used access CTX Chemical API data, described following sections.Tables output example filtered display first rows data.","code":""},{"path":[]},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"get-chemical-data","dir":"Articles","previous_headings":"Chemical Details Resource","what":"Get chemical data","title":"ctxR: Chemical API","text":"get_chemical_details() retrieves chemical detail data either using chemical identifier DTXSID DTXCID. Alternate parameter “projection” determines type data returned. Examples provided :","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"by-dtxsid","dir":"Articles","previous_headings":"Chemical Details Resource > Get chemical data","what":"By DTXSID","title":"ctxR: Chemical API","text":"","code":"chemical_details_by_dtxsid <- get_chemical_details(DTXSID = 'DTXSID7020182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"by-dtxcid","dir":"Articles","previous_headings":"Chemical Details Resource > Get chemical data","what":"By DTXCID","title":"ctxR: Chemical API","text":"","code":"chemical_details_by_dtxcid <- get_chemical_details(DTXCID = 'DTXCID30182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"by-batch-search","dir":"Articles","previous_headings":"Chemical Details Resource > Get chemical data","what":"By Batch Search","title":"ctxR: Chemical API","text":"","code":"vector_dtxsid<- c(\"DTXSID7020182\", \"DTXSID9020112\", \"DTXSID8021430\") chemical_details_by_batch_dtxsid <- get_chemical_details_batch(DTXSID = vector_dtxsid)  vector_dtxcid <- c(\"DTXCID30182\", \"DTXCID801430\", \"DTXCID90112\") chemical_details_by_batch_dtxcid <- get_chemical_details_batch(DTXCID = vector_dtxcid)"},{"path":[]},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"ghs-classification","dir":"Articles","previous_headings":"Pubchem Link to GHS classification","what":"GHS classification","title":"ctxR: Chemical API","text":"check_existence_by_dtxsid() checks supplied DTXSID valid returns URL additional information chemical case valid DTXSID.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"by-dtxsid-1","dir":"Articles","previous_headings":"Pubchem Link to GHS classification > GHS classification","what":"By DTXSID","title":"ctxR: Chemical API","text":"","code":"dtxsid_check_true <- check_existence_by_dtxsid(DTXSID = 'DTXSID7020182') dtxsid_check_false <- check_existence_by_dtxsid(DTXSID = 'DTXSID7020182f')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"by-batch-search-1","dir":"Articles","previous_headings":"Pubchem Link to GHS classification > GHS classification","what":"By Batch Search","title":"ctxR: Chemical API","text":"","code":"vector_dtxsid_and_non_dtxsid <- c('DTXSID7020182F', 'DTXSID7020182', 'DTXSID0020232F') dtxsid_checks <- check_existence_by_dtxsid_batch(DTXSID = vector_dtxsid_and_non_dtxsid)"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"chemical-property-resource","dir":"Articles","previous_headings":"","what":"Chemical Property Resource","title":"ctxR: Chemical API","text":"get_chemical_by_property_range() retrieves data chemicals specified property within input range. get_chem_info() retrieves specific chemical information input chemical. includes experimental predicted values default, providing “experimental” “predicted” type parameter return specific associated information.","code":"chemical_by_property_range <- get_chemical_by_property_range(start = 1.311,                                           end = 1.313,                                           property = 'Density') chemical_info <- get_chem_info(DTXSID = 'DTXSID7020182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"chemical-fate-resource","dir":"Articles","previous_headings":"","what":"Chemical Fate Resource","title":"ctxR: Chemical API","text":"get_fate_by_dtxsid() retrieves chemical fate data.","code":"fate_by_dtxsid <- get_fate_by_dtxsid(DTXSID = 'DTXSID7020182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"chemical-search-resource","dir":"Articles","previous_headings":"","what":"Chemical Search Resource","title":"ctxR: Chemical API","text":"Chemicals can searched using string values. Examples provided following:","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"by-starting-value","dir":"Articles","previous_headings":"Chemical Search Resource","what":"By starting value","title":"ctxR: Chemical API","text":"","code":"search_starts_with <- chemical_starts_with(word = 'DTXSID70201')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"by-exact-value","dir":"Articles","previous_headings":"Chemical Search Resource","what":"By exact value","title":"ctxR: Chemical API","text":"","code":"search_exact <- chemical_equal(word = 'DTXSID7020182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"by-substring-value","dir":"Articles","previous_headings":"Chemical Search Resource","what":"By substring value","title":"ctxR: Chemical API","text":"","code":"search_contains <- chemical_contains(word = 'DTXSID702018')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"subset-for-ms-ready-structures","dir":"Articles","previous_headings":"Chemical Search Resource","what":"Subset for MS-Ready Structures","title":"ctxR: Chemical API","text":"MS-Ready data can retrieved using variety input information. Examples provided :","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"by-mass-range","dir":"Articles","previous_headings":"Chemical Search Resource > Subset for MS-Ready Structures","what":"By Mass Range","title":"ctxR: Chemical API","text":"","code":"msready_by_mass <- get_msready_by_mass(start = 200.9,                                end = 200.95)"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"by-chemical-formula","dir":"Articles","previous_headings":"Chemical Search Resource > Subset for MS-Ready Structures","what":"By Chemical Formula","title":"ctxR: Chemical API","text":"","code":"msready_by_formula <- get_msready_by_formula(formula = 'C16H24N2O5S')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"by-dtxcid-1","dir":"Articles","previous_headings":"Chemical Search Resource > Subset for MS-Ready Structures","what":"By DTXCID","title":"ctxR: Chemical API","text":"","code":"msready_by_dtxcid <- get_msready_by_dtxcid(DTXCID = 'DTXCID30182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"list-resource","dir":"Articles","previous_headings":"","what":"List Resource","title":"ctxR: Chemical API","text":"several lists chemicals one can access. can filtered type, name, inclusion specific chemical, name list.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"get-all-list-types","dir":"Articles","previous_headings":"List Resource","what":"Get all list types","title":"ctxR: Chemical API","text":"","code":"get_all_list_types()"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"all-lists-by-type","dir":"Articles","previous_headings":"List Resource","what":"All lists by type","title":"ctxR: Chemical API","text":"","code":"chemical_lists_by_type <- get_chemical_lists_by_type(type =  'federal')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"list-by-name","dir":"Articles","previous_headings":"List Resource","what":"List by name","title":"ctxR: Chemical API","text":"","code":"public_chemical_list_by_name <- get_public_chemical_list_by_name(listname = 'CCL4')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"lists-containing-a-specific-chemical","dir":"Articles","previous_headings":"List Resource","what":"Lists containing a specific chemical","title":"ctxR: Chemical API","text":"get_lists_containing_chemical() retrieves list names chemical lists, contains specified chemical.","code":"lists_containing_chemical <- get_lists_containing_chemical(DTXSID = 'DTXSID7020182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"dtxsids-for-chemical-list-and-starting-value","dir":"Articles","previous_headings":"List Resource","what":"DTXSIDs for chemical list and starting value","title":"ctxR: Chemical API","text":"get_chemicals_in_list_start() retrieves list DTXSIDs given starting character string specified list chemicals.","code":"chemicals_in_ccl4_start <- get_chemicals_in_list_start(list_name = 'CCL4', word = 'Bi')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"dtxsids-for-chemical-list-and-exact-value","dir":"Articles","previous_headings":"List Resource","what":"DTXSIDs for chemical list and exact value","title":"ctxR: Chemical API","text":"get_chemicals_in_list_exact() retrieves list DTXSIDs matching exactly given character string specified list chemicals.","code":"chemicals_in_ccl4_exact <- get_chemicals_in_list_exact(list_name = 'BIOSOLIDS2021', word = 'Bisphenol A')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"dtxsids-for-chemical-list-and-containing-value","dir":"Articles","previous_headings":"List Resource","what":"DTXSIDs for chemical list and containing value","title":"ctxR: Chemical API","text":"get_chemicals_in_list_contain() retrieves list DTXSIDs contain given character string specified list chemicals.","code":"chemicals_in_ccl4_contain <- get_chemicals_in_list_contain(list_name = 'CCL4', word = 'Bis')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"chemicals-in-a-specific-list","dir":"Articles","previous_headings":"List Resource","what":"Chemicals in a specific list","title":"ctxR: Chemical API","text":"get_chemicals_in_list() retrieves specific chemical information chemical contained specified list.","code":"chemicals_in_list <- get_chemicals_in_list(list_name = 'CCL4')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"chemical-file-resource","dir":"Articles","previous_headings":"","what":"Chemical File Resource","title":"ctxR: Chemical API","text":"mrv, mol, image files can accessed using either DTXSID DTXCID. Examples provided :","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"get-mrv-by-dtxsid-or-dtxcid","dir":"Articles","previous_headings":"Chemical File Resource","what":"Get mrv by DTXSID or DTXCID","title":"ctxR: Chemical API","text":"get_chemical_mrv() retrieves mrv file information chemical specified either DTXSID DTXCID.","code":"chemical_mrv_by_dtxsid <- get_chemical_mrv(DTXSID = 'DTXSID7020182') chemical_mrv_by_dtxcid <- get_chemical_mrv(DTXCID = 'DTXCID30182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"get-mol-by-dtxsid-or-dtxcid","dir":"Articles","previous_headings":"Chemical File Resource","what":"Get mol by DTXSID or DTXCID","title":"ctxR: Chemical API","text":"get_chemical_mol() retrieves mol file information chemical specified either DTXSID DTXCID.","code":"chemical_mol_by_dtxsid <- get_chemical_mol(DTXSID = 'DTXSID7020182') chemical_mol_by_dtxcid <- get_chemical_mol(DTXCID = 'DTXCID30182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"get-structure-image-by-dtxsid-dtxcid-or-smiles","dir":"Articles","previous_headings":"Chemical File Resource","what":"Get structure image by DTXSID, DTXCID, or SMILES","title":"ctxR: Chemical API","text":"get_chemical_image() retrieves image file information chemical specified either DTXSID DTXCID. visualize returned array image information, user may use either png::writePNG() countcolors::plotArrayAsImage() functions, among many choices.","code":"chemical_image_by_dtxsid <- get_chemical_image(DTXSID = 'DTXSID7020182') chemical_image_by_dtxcid <- get_chemical_image(DTXCID = 'DTXCID30182') chemical_image_by_smiles <- get_chemical_image(SMILES = 'CC(C)(C1=CC=C(O)C=C1)C1=CC=C(O)C=C1')  countcolors::plotArrayAsImage(chemical_image_by_dtxsid) countcolors::plotArrayAsImage(chemical_image_by_dtxcid) countcolors::plotArrayAsImage(chemical_image_by_smiles)"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"chemical-synonym-resource","dir":"Articles","previous_headings":"","what":"Chemical Synonym Resource","title":"ctxR: Chemical API","text":"get_chemical_synonym() retrieves synonyms specified chemical.","code":"chemical_synonym <- get_chemical_synonym(DTXSID = 'DTXSID7020182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"example-use-case-comparing-physico-chemical-properties-across-chemical-lists","dir":"Articles","previous_headings":"","what":"Example Use Case: Comparing Physico-chemical Properties Across Chemical Lists","title":"ctxR: Chemical API","text":"fourth Drinking Water Contaminant Candidate List (CCL4) set chemicals “…subject proposed promulgated national primary drinking water regulations, known anticipated occur public water systems….” Moreover, list “…announced November 17, 2016. CCL 4 includes 97 chemicals chemical groups 12 microbial contaminants….” National-Scale Air Toxics Assessments (NATA) “… EPA’s ongoing comprehensive evaluation air toxics United States… state---science screening tool State/Local/Tribal agencies prioritize pollutants, emission sources locations interest study order gain better understanding risks… use general information sources develop estimates risks likely overestimate impacts underestimate ….” lists can found CCD CCL4 additional information CCL4 information NATADB additional information NATA information. quotes previous paragraph excerpted list detail descriptions found using CCD links. example use case, physico-chemical Properties data compared water contaminant priority air toxics list.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"obtain-lists-of-chemicals","dir":"Articles","previous_headings":"Example Use Case: Comparing Physico-chemical Properties Across Chemical Lists","what":"Obtain Lists of Chemicals","title":"ctxR: Chemical API","text":"First, confirm chemical list query. Next, retrieve list chemicals associated list. examine dimensions data, column names, display single row illustrative purposes.","code":"options(width = 100) ccl4_information <- get_public_chemical_list_by_name('CCL4') print(ccl4_information, trunc.cols = TRUE) #>    id    type                                    label visibility #> 1 443 federal WATER|EPA: Chemical Contaminants - CCL 4     PUBLIC #>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             longDescription #> 1 The Contaminant Candidate List (CCL) is a list of contaminants that, at the time of publication, are not subject to any proposed or promulgated national primary drinking water regulations, but are known or anticipated to occur in public water systems. Contaminants listed on the CCL may require future regulation under the Safe Drinking Water Act (SDWA). EPA announced the <a href='https://www.epa.gov/ccl/contaminant-candidate-list-4-ccl-4-0' target='_blank'>fourth Drinking Water Contaminant Candidate List (CCL 4)<\/a> on November 17, 2016. The CCL 4 includes 97 chemicals or chemical groups and 12 microbial contaminants. The group of cyanotoxins on CCL 4 includes, but is not limited to: anatoxin-a, cylindrospermopsin, microcystins, and saxitoxin. The CCL Chemical Candidate Lists are versioned iteratively and this description navigates between the various versions of the lists. The list of substances displayed below represents only the chemical CCL 4 contaminants. For the versioned lists, please use the hyperlinked lists below.<br/><br/> \\r\\n\\r\\n<a href='https://comptox.epa.gov/dashboard/chemical_lists/CCL5' target='_blank'>CCL5 - November 2022<\/a> <br/><br/>\\r\\n<a href='https://comptox.epa.gov/dashboard/chemical_lists/CCL4' target='_blank'>CCL4 - November 2016<\/a> \\r\\n This list<br/><br/>\\r\\n<a href='https://comptox.epa.gov/dashboard/chemical_lists/CCL3' target='_blank'>CCL3 - October 2009<\/a> <br/><br/>\\r\\n<a href='https://comptox.epa.gov/dashboard/chemical_lists/CCL2' target='_blank'>CCL2 - February 2005<\/a><br/><br/>\\r\\n<a href='https://comptox.epa.gov/dashboard/chemical_lists/CCL1' target='_blank'>CCL1 - March 1998<\/a><br/><br/>  #>              updatedAt listName chemicalCount            createdAt #> 1 2022-10-26T21:14:27Z     CCL4           100 2017-12-28T17:58:36Z #>                                                                                                                                              shortDescription #> 1 The Contaminant Candidate List (CCL) is a list of contaminants that are known or anticipated to occur in public water systems. Version 4 is known as CCL 4.  natadb_information <- get_public_chemical_list_by_name('NATADB') print(natadb_information, trunc.cols = TRUE) #>    id    type                                            label visibility #> 1 454 federal EPA: National-Scale Air Toxics AssessmentlongDescription #> 1 The National-Scale Air Toxics Assessment (NATA) is EPA's ongoing comprehensive evaluation of air toxics in the United States. EPA developed the NATA as a state-of-the-science screening tool for State/Local/Tribal Agencies to prioritize pollutants, emission sources and locations of interest for further study in order to gain a better understanding of risks.  NATA assessments do not incorporate refined information about emission sources but, rather, use general information about sources to develop estimates of risks which are more likely to overestimate impacts than underestimate them.\\r\\n\\r\\nNATA provides estimates of the risk of cancer and other serious health effects from breathing (inhaling) air toxics in order to inform both national and more localized efforts to identify and prioritize air toxics, emission source types and locations which are of greatest potential concern in terms of contributing to population risk.  This in turn helps air pollution experts focus limited analytical resources on areas and or populations where the potential for health risks are highest.  Assessments include estimates of cancer and non-cancer health effects based on chronic exposure from outdoor sources, including assessments of non-cancer health effects for Diesel Particulate Matter (PM). Assessments provide a snapshot of the outdoor air quality and the risks to human health that would result if air toxic emissions levels remained unchanged. #>              updatedAt listName chemicalCount            createdAt #> 1 2018-11-16T21:42:01Z   NATADB           163 2018-02-21T12:04:16Z #>                                                                                                                shortDescription #> 1 The National-Scale Air Toxics Assessment (NATA) is EPA's ongoing comprehensive evaluation of air toxics in the United States. ccl4 <- get_chemicals_in_list('ccl4') ccl4 <- data.table::as.data.table(ccl4)  natadb <- get_chemicals_in_list('NATADB') natadb <- data.table::as.data.table(natadb) dim(ccl4) dim(natadb) colnames(ccl4) head(ccl4, 1)"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"batch-search-physico-chemical-property-data-by-dtxsid-for-chemical-lists","dir":"Articles","previous_headings":"Example Use Case: Comparing Physico-chemical Properties Across Chemical Lists","what":"Batch Search Physico-chemical Property Data by DTXSID for Chemical Lists","title":"ctxR: Chemical API","text":"Next, physico-chemical properties chemicals list can retrieved. function get_chem_info() used batch search list DTXSIDs. Observe returns single data.table query, data.table contains physico-chemical properties available CompTox Chemicals Dashboard chemical query. Note, warning message triggered, Warning: Setting type ''!, indicates parameter type given value. default value set within function information can found associated documentation. examine set physico-chemical properties first chemical CCL4. deeper analysis, consider dimensions data column names. Next, display unique values columns propertyID propType. Let’s explore examining mean “boiling-point” “melting-point” data. results tell us reported physico-chemical properties data sets. mean “boiling-point” 251.1072 degrees Celsius CCL4, mean values 250.5943 251.4001 experimental predicted, respectively. mean “melting-point” 33.93924 degrees Celsius CCL4, mean values 23.18876 47.98422 experimental predicted, respectively. explore values physico-chemical properties calculate means, can following procedure. First look physico-chemical properties individually, group property (“boiling-point”, “melting-point”, etc…), additionally group property type (“experimental” vs “predicted”). grouping, look columns value, unit, propertyID propType. also demonstrate take mean values grouping.","code":"ccl4_phys_chem <- get_chem_info_batch(ccl4$dtxsid) #> Warning in get_chem_info_batch(ccl4$dtxsid): Setting type to ''! natadb_phys_chem <- get_chem_info_batch(natadb$dtxsid) #> Warning in get_chem_info_batch(natadb$dtxsid): Setting type to ''! dim(ccl4_phys_chem) colnames(ccl4_phys_chem) ccl4_phys_chem[, unique(propertyId)] #>  [1] \"boiling-point\"        \"logkow-octanol-water\" \"melting-point\"        \"vapor-pressure\"       #>  [5] \"water-solubility\"     \"density\"              \"flash-point\"          \"henrys-law\"           #>  [9] \"index-of-refraction\"  \"logkoa-octanol-air\"   \"molar-refractivity\"   \"molar-volume\"         #> [13] \"polarizability\"       \"surface-tension\"      \"thermal-conductivity\" \"viscosity\"            #> [17] \"pka-acidic-apparent\"  \"pka-basic-apparent\" ccl4_phys_chem[, unique(propType)] #> [1] \"experimental\" \"predicted\" ccl4_phys_chem[propertyId == 'boiling-point', .(Mean = mean(value))] #>        Mean #>       <num> #> 1: 252.6593 ccl4_phys_chem[propertyId == 'boiling-point', .(Mean = mean(value)),                by = .(propType)] #>        propType     Mean #>          <char>    <num> #> 1: experimental 250.5943 #> 2:    predicted 253.8196  ccl4_phys_chem[propertyId == 'melting-point', .(Mean = mean(value))] #>        Mean #>       <num> #> 1: 34.91613 ccl4_phys_chem[propertyId == 'melting-point', .(Mean = mean(value)),                by = .(propType)] #>        propType     Mean #>          <char>    <num> #> 1: experimental 23.18876 #> 2:    predicted 49.99417 head(ccl4_phys_chem[dtxsid == ccl4$dtxsid[[1]], ]) #> Empty data.table (0 rows and 10 cols): name,value,id,source,description,propType... ccl4_phys_chem[dtxsid == ccl4$dtxsid[[1]], .(propType, value, unit),                by = .(propertyId)] #> Empty data.table (0 rows and 4 cols): propertyId,propType,value,unit ccl4_phys_chem[dtxsid == ccl4$dtxsid[[1]], .(value, unit),                 by = .(propertyId, propType)] #> Empty data.table (0 rows and 4 cols): propertyId,propType,value,unit  ccl4_phys_chem[dtxsid == ccl4$dtxsid[[1]], .(Mean_value = sapply(.SD, mean)),                by = .(propertyId, unit), .SDcols = c(\"value\")] #> Empty data.table (0 rows and 3 cols): propertyId,unit,Mean_value ccl4_phys_chem[dtxsid == ccl4$dtxsid[[1]], .(Mean_value = sapply(.SD, mean)),                 by = .(propertyId, unit, propType),                 .SDcols = c(\"value\")][order(propertyId)] #> Empty data.table (0 rows and 4 cols): propertyId,unit,propType,Mean_value"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"review-physico-chemical-properties-across-chemical-lists","dir":"Articles","previous_headings":"Example Use Case: Comparing Physico-chemical Properties Across Chemical Lists","what":"Review Physico-Chemical Properties Across Chemical Lists","title":"ctxR: Chemical API","text":"consider exploring differences mean predicted experimental values variety physico-chemical properties effort understand better CCL4 NATADB lists. particular, examine “vapor-pressure”, “henrys-law”, “boiling-point” plot means chemical using boxplots. compare values grouping data set propType value.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"vapor-pressure","dir":"Articles","previous_headings":"Example Use Case: Comparing Physico-chemical Properties Across Chemical Lists > Review Physico-Chemical Properties Across Chemical Lists","what":"Vapor Pressure","title":"ctxR: Chemical API","text":"Begin grouping pulled data DTXSID, also DTXSID property type. Examine summary statistics. large range values covering several orders magnitude, log transform data. data chemical lists can also plotted individually property type. Finally, compare chemical lists simultaneously. accomplish , add column data.table denoting chemical list rows correspond combine rows data sets together using function rbind(). Plot combined data. Boxplots colored based property type, mean log transformed vapor pressure plotted chemical list property type, chemical list alone.  box plots , general trend indicates NATADB chemical list higher mean vapor pressure CCL4 chemical list.","code":"ccl4_vapor_all <- ccl4_phys_chem[propertyId %in% 'vapor-pressure',                                   .(mean_vapor_pressure = sapply(.SD, mean)),                                   .SDcols = c('value'), by = .(dtxsid)] natadb_vapor_all <- natadb_phys_chem[propertyId %in% 'vapor-pressure',                                       .(mean_vapor_pressure = sapply(.SD, mean)),                                      .SDcols = c('value'), by = .(dtxsid)] ccl4_vapor_grouped <- ccl4_phys_chem[propertyId %in% 'vapor-pressure',                                       .(mean_vapor_pressure = sapply(.SD, mean)),                                      .SDcols = c('value'),                                       by = .(dtxsid, propType)] natadb_vapor_grouped <- natadb_phys_chem[propertyId %in% 'vapor-pressure',                                           .(mean_vapor_pressure =                                               sapply(.SD, mean)),                                           .SDcols = c('value'),                                           by = .(dtxsid, propType)] summary(ccl4_vapor_all) #>     dtxsid          mean_vapor_pressure #>  Length:83          Min.   :   0.000    #>  Class :character   1st Qu.:   0.000    #>  Mode  :character   Median :   0.002    #>                     Mean   : 224.118    #>                     3rd Qu.:   3.866    #>                     Max.   :6007.242 summary(ccl4_vapor_grouped) #>     dtxsid            propType         mean_vapor_pressure #>  Length:140         Length:140         Min.   :   0.000    #>  Class :character   Class :character   1st Qu.:   0.000    #>  Mode  :character   Mode  :character   Median :   0.069    #>                                        Mean   : 265.007    #>                                        3rd Qu.:  10.125    #>                                        Max.   :7252.700 summary(natadb_vapor_all) #>     dtxsid          mean_vapor_pressure #>  Length:145         Min.   :   0.000    #>  Class :character   1st Qu.:   0.007    #>  Mode  :character   Median :   1.001    #>                     Mean   : 225.872    #>                     3rd Qu.:  89.931    #>                     Max.   :9298.713 summary(natadb_vapor_grouped) #>     dtxsid            propType         mean_vapor_pressure #>  Length:267         Length:267         Min.   :   0.000    #>  Class :character   Class :character   1st Qu.:   0.008    #>  Mode  :character   Mode  :character   Median :   1.521    #>                                        Mean   : 243.404    #>                                        3rd Qu.:  98.721    #>                                        Max.   :9412.390 ccl4_vapor_all[, log_transform_mean_vapor_pressure := log(mean_vapor_pressure)] #>             dtxsid mean_vapor_pressure log_transform_mean_vapor_pressure #>             <char>               <num>                             <num> #>  1:  DTXSID0020153        1.436092e+00                         0.3619259 #>  2:  DTXSID0020446        1.211530e-06                       -13.6236263 #>  3:  DTXSID0020573        1.016181e-08                       -18.4046290 #>  4:  DTXSID0020600        1.060439e+03                         6.9664387 #>  5:  DTXSID0020814        1.713402e-08                       -17.8821999 #>  6:  DTXSID0021541        3.623345e+03                         8.1951529 #>  7:  DTXSID0021917        1.447043e+02                         4.9746920 #>  8:  DTXSID0024052        2.579787e-07                       -15.1703889 #>  9:  DTXSID1020437        2.153143e+02                         5.3720986 #> 10:  DTXSID1021407        9.093477e-04                        -7.0027830 #> 11:  DTXSID1021740        6.808950e+00                         1.9182379 #> 12:  DTXSID1021798        5.779040e-02                        -2.8509326 #> 13:  DTXSID1024174        5.616588e-06                       -12.0897863 #> 14:  DTXSID1024338        7.125250e-08                       -16.4570359 #> 15:  DTXSID1026164        2.444570e-01                        -1.4087159 #> 16:  DTXSID1037484        4.124746e-07                       -14.7010911 #> 17:  DTXSID1037486        4.206599e-07                       -14.6814412 #> 18:  DTXSID1037567        4.633640e-08                       -16.8873380 #> 19:  DTXSID2020684        3.733735e-03                        -5.5903463 #> 20:  DTXSID2021028        1.127656e+00                         0.1201408 #> 21:  DTXSID2021317        1.563302e+01                         2.7493857 #> 22:  DTXSID2021731        2.360838e+02                         5.4641866 #> 23:  DTXSID2022333        1.685188e+00                         0.5218768 #> 24:  DTXSID2037506        8.393291e-06                       -11.6880778 #> 25:  DTXSID2052156        3.878108e-09                       -19.3679185 #> 26:  DTXSID3020203        1.876293e+03                         7.5370530 #> 27:  DTXSID3020833        2.420272e+02                         5.4890503 #> 28:  DTXSID3020964        2.336795e-01                        -1.4538048 #> 29:  DTXSID3024366        5.501190e+01                         4.0075495 #> 30:  DTXSID3024869        1.885188e-02                        -3.9711425 #> 31:  DTXSID3031864        2.479965e-06                       -12.9072661 #> 32:  DTXSID3032464        1.727766e-06                       -13.2686813 #> 33:  DTXSID3042219        3.106110e+00                         1.1333711 #> 34:  DTXSID3074313        1.481020e-11                       -24.9357050 #> 35:  DTXSID4020533        4.036368e+01                         3.6979302 #> 36:  DTXSID4021503        1.722775e+02                         5.1491065 #> 37:  DTXSID4022361        3.226160e-06                       -12.6442179 #> 38:  DTXSID4022367        1.643378e-08                       -17.9239267 #> 39:  DTXSID4022448        1.773129e-05                       -10.9401797 #> 40:  DTXSID4022991        1.440972e-10                       -22.6605333 #> 41:  DTXSID4032611        5.263403e-04                        -7.5495627 #> 42:  DTXSID4034948        3.744327e-08                       -17.1004389 #> 43:  DTXSID5020023        2.545125e+02                         5.5393500 #> 44:  DTXSID5020576        5.737673e-09                       -18.9762122 #> 45:  DTXSID5020601        1.428200e+00                         0.3564147 #> 46:  DTXSID5021207        4.463567e+02                         6.1011185 #> 47:  DTXSID5024182        7.171160e+00                         1.9700674 #> 48:  DTXSID5039224        7.963770e+02                         6.6800727 #> 49: DTXSID50867064        1.522060e-03                        -6.4876906 #> 50:  DTXSID6020301        6.007243e+03                         8.7007211 #> 51:  DTXSID6020856        2.909907e-01                        -1.2344638 #> 52:  DTXSID6021030        3.562765e-05                       -10.2423885 #> 53:  DTXSID6021032        8.306000e-01                        -0.1856069 #> 54:  DTXSID6022422        1.921524e-06                       -13.1623921 #> 55:  DTXSID6024177        7.035691e-02                        -2.6541743 #> 56:  DTXSID6037483        4.847560e-08                       -16.8422053 #> 57:  DTXSID6037485        4.976030e-08                       -16.8160484 #> 58:  DTXSID6037568        2.875770e-07                       -15.0617752 #> 59:  DTXSID7020005        6.776980e-02                        -2.6916386 #> 60:  DTXSID7020637        1.836866e+03                         7.5158163 #> 61:  DTXSID7021029        3.323853e+00                         1.2011248 #> 62:  DTXSID7024241        2.031631e-06                       -13.1066715 #> 63:  DTXSID7047433        1.073489e-08                       -18.3497663 #> 64:  DTXSID8020044        2.447645e+01                         3.1977114 #> 65:  DTXSID8020090        5.073765e-01                        -0.6785019 #> 66:  DTXSID8020597        2.037895e-01                        -1.5906676 #> 67:  DTXSID8020832        1.520092e+03                         7.3265265 #> 68:  DTXSID8021062        1.180510e-01                        -2.1366388 #> 69:  DTXSID8022292        1.528695e-08                       -17.9962663 #> 70:  DTXSID8022377        1.016181e-08                       -18.4046290 #> 71:  DTXSID8023846        1.702425e-06                       -13.2834569 #> 72:  DTXSID8023848        8.277807e-06                       -11.7019325 #> 73:  DTXSID8025541        1.949228e-05                       -10.8454918 #> 74:  DTXSID8031865        8.386721e-01                        -0.1759355 #> 75:  DTXSID9020243        8.999120e-08                       -16.2235539 #> 76:  DTXSID9021390        4.408660e+00                         1.4835708 #> 77:  DTXSID9021427        3.637282e-01                        -1.0113483 #> 78:  DTXSID9022366        1.506794e-09                       -20.3132814 #> 79:  DTXSID9023380        1.149256e-08                       -18.2815660 #> 80:  DTXSID9023914        3.131080e-04                        -8.0689624 #> 81:  DTXSID9024142        2.739923e-09                       -19.7153359 #> 82:  DTXSID9032113        2.981382e-08                       -17.3282936 #> 83:  DTXSID9032329        7.041032e-07                       -14.1663408 #>             dtxsid mean_vapor_pressure log_transform_mean_vapor_pressure ccl4_vapor_grouped[, log_transform_mean_vapor_pressure :=                       log(mean_vapor_pressure)] #>             dtxsid     propType mean_vapor_pressure log_transform_mean_vapor_pressure #>             <char>       <char>               <num>                             <num> #>   1: DTXSID0020153 experimental        1.229990e+00                         0.2070060 #>   2: DTXSID0020153    predicted        1.504793e+00                         0.4086556 #>   3: DTXSID0020446 experimental        6.899220e-08                       -16.4892724 #>   4: DTXSID0020446    predicted        1.592376e-06                       -13.3502831 #>   5: DTXSID0020573    predicted        1.016181e-08                       -18.4046290 #>  ---                                                                                  #> 136: DTXSID9024142    predicted        2.059810e-09                       -20.0006521 #> 137: DTXSID9032113 experimental        1.279970e-08                       -18.1738441 #> 138: DTXSID9032113    predicted        3.548520e-08                       -17.1541501 #> 139: DTXSID9032329 experimental        8.000180e-07                       -14.0386316 #> 140: DTXSID9032329    predicted        6.721317e-07                       -14.2128116 natadb_vapor_all[, log_transform_mean_vapor_pressure :=                     log(mean_vapor_pressure)] #>             dtxsid mean_vapor_pressure log_transform_mean_vapor_pressure #>             <char>               <num>                             <num> #>   1: DTXSID0020153        1.436092e+00                         0.3619259 #>   2: DTXSID0020448        4.899910e+01                         3.8918019 #>   3: DTXSID0020523        2.824828e-04                        -8.1718931 #>   4: DTXSID0020529        7.603507e-04                        -7.1817307 #>   5: DTXSID0020600        1.060439e+03                         6.9664387 #>  ---                                                                     #> 141: DTXSID9020293        3.124725e-02                        -3.4658239 #> 142: DTXSID9020299        1.177018e-06                       -13.6525264 #> 143: DTXSID9020827        2.930390e-06                       -12.7403750 #> 144: DTXSID9021138        3.619153e-03                        -5.6215152 #> 145: DTXSID9041522        6.433997e-05                        -9.6513295 natadb_vapor_grouped[, log_transform_mean_vapor_pressure :=                         log(mean_vapor_pressure)] #>             dtxsid     propType mean_vapor_pressure log_transform_mean_vapor_pressure #>             <char>       <char>               <num>                             <num> #>   1: DTXSID0020153 experimental        1.229990e+00                         0.2070060 #>   2: DTXSID0020153    predicted        1.504793e+00                         0.4086556 #>   3: DTXSID0020448 experimental        5.329670e+01                         3.9758744 #>   4: DTXSID0020448    predicted        4.756657e+01                         3.8621301 #>   5: DTXSID0020523 experimental        3.900320e-04                        -7.8492818 #>  ---                                                                                  #> 263: DTXSID9020299 experimental        2.199890e-06                       -13.0271032 #> 264: DTXSID9020299    predicted        8.360607e-07                       -13.9945647 #> 265: DTXSID9020827    predicted        2.930390e-06                       -12.7403750 #> 266: DTXSID9021138    predicted        3.619153e-03                        -5.6215152 #> 267: DTXSID9041522    predicted        6.433997e-05                        -9.6513295 ccl4_vapor_grouped[, set := 'CCL4'] #>             dtxsid     propType mean_vapor_pressure log_transform_mean_vapor_pressure    set #>             <char>       <char>               <num>                             <num> <char> #>   1: DTXSID0020153 experimental        1.229990e+00                         0.2070060   CCL4 #>   2: DTXSID0020153    predicted        1.504793e+00                         0.4086556   CCL4 #>   3: DTXSID0020446 experimental        6.899220e-08                       -16.4892724   CCL4 #>   4: DTXSID0020446    predicted        1.592376e-06                       -13.3502831   CCL4 #>   5: DTXSID0020573    predicted        1.016181e-08                       -18.4046290   CCL4 #>  ---                                                                                         #> 136: DTXSID9024142    predicted        2.059810e-09                       -20.0006521   CCL4 #> 137: DTXSID9032113 experimental        1.279970e-08                       -18.1738441   CCL4 #> 138: DTXSID9032113    predicted        3.548520e-08                       -17.1541501   CCL4 #> 139: DTXSID9032329 experimental        8.000180e-07                       -14.0386316   CCL4 #> 140: DTXSID9032329    predicted        6.721317e-07                       -14.2128116   CCL4 natadb_vapor_grouped[, set := 'NATADB'] #>             dtxsid     propType mean_vapor_pressure log_transform_mean_vapor_pressure    set #>             <char>       <char>               <num>                             <num> <char> #>   1: DTXSID0020153 experimental        1.229990e+00                         0.2070060 NATADB #>   2: DTXSID0020153    predicted        1.504793e+00                         0.4086556 NATADB #>   3: DTXSID0020448 experimental        5.329670e+01                         3.9758744 NATADB #>   4: DTXSID0020448    predicted        4.756657e+01                         3.8621301 NATADB #>   5: DTXSID0020523 experimental        3.900320e-04                        -7.8492818 NATADB #>  ---                                                                                         #> 263: DTXSID9020299 experimental        2.199890e-06                       -13.0271032 NATADB #> 264: DTXSID9020299    predicted        8.360607e-07                       -13.9945647 NATADB #> 265: DTXSID9020827    predicted        2.930390e-06                       -12.7403750 NATADB #> 266: DTXSID9021138    predicted        3.619153e-03                        -5.6215152 NATADB #> 267: DTXSID9041522    predicted        6.433997e-05                        -9.6513295 NATADB  all_vapor_grouped <- rbind(ccl4_vapor_grouped, natadb_vapor_grouped)  vapor_box <- ggplot(all_vapor_grouped,                      aes(set, log_transform_mean_vapor_pressure)) +                      geom_boxplot(aes(color = propType)) vapor <- ggplot(all_vapor_grouped, aes(log_transform_mean_vapor_pressure)) +                      geom_boxplot((aes(color = set))) +                       coord_flip()"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"henrys-law-constant","dir":"Articles","previous_headings":"Example Use Case: Comparing Physico-chemical Properties Across Chemical Lists > Review Physico-Chemical Properties Across Chemical Lists","what":"Henry’s Law constant","title":"ctxR: Chemical API","text":"Henry’s Law constant can explored similar fashion. Begin grouping data DTXSID, also DTXSID property type. Examine summary statistics. , log transform data positive covers several orders magnitude. Finally, compare chemical lists simultaneously. accomplish , add column data.table denoting chemical list rows correspond combine rows data sets together using function rbind().  , grouping propType aggregating results together chemical list, NATADB chemicals generally higher mean Henry’s Law Constant value CCL4 chemicals.","code":"ccl4_hlc_all <- ccl4_phys_chem[propertyId %in% 'henrys-law',                                 .(mean_hlc = sapply(.SD, mean)),                                 .SDcols = c('value'), by = .(dtxsid)] natadb_hlc_all <- natadb_phys_chem[propertyId %in% 'henrys-law',                                     .(mean_hlc = sapply(.SD, mean)),                                     .SDcols = c('value'), by = .(dtxsid)] ccl4_hlc_grouped <- ccl4_phys_chem[propertyId %in% 'henrys-law',                                     .(mean_hlc = sapply(.SD, mean)),                                     .SDcols = c('value'),                                     by = .(dtxsid, propType)] natadb_hlc_grouped <- natadb_phys_chem[propertyId %in% 'henrys-law',                                         .(mean_hlc = sapply(.SD, mean)),                                         .SDcols = c('value'),                                         by = .(dtxsid, propType)] summary(ccl4_hlc_all) #>     dtxsid             mean_hlc         #>  Length:82          Min.   :0.0000000   #>  Class :character   1st Qu.:0.0000000   #>  Mode  :character   Median :0.0000007   #>                     Mean   :0.0076308   #>                     3rd Qu.:0.0000216   #>                     Max.   :0.4922550 summary(ccl4_hlc_grouped) #>     dtxsid            propType            mean_hlc         #>  Length:110         Length:110         Min.   :0.0000000   #>  Class :character   Class :character   1st Qu.:0.0000000   #>  Mode  :character   Mode  :character   Median :0.0000020   #>                                        Mean   :0.0063874   #>                                        3rd Qu.:0.0001217   #>                                        Max.   :0.4922550 summary(natadb_hlc_all) #>     dtxsid             mean_hlc         #>  Length:144         Min.   :0.0000000   #>  Class :character   1st Qu.:0.0000002   #>  Mode  :character   Median :0.0000328   #>                     Mean   :0.0086311   #>                     3rd Qu.:0.0012426   #>                     Max.   :0.4922550 summary(natadb_hlc_grouped) #>     dtxsid            propType            mean_hlc         #>  Length:210         Length:210         Min.   :0.0000000   #>  Class :character   Class :character   1st Qu.:0.0000003   #>  Mode  :character   Mode  :character   Median :0.0001028   #>                                        Mean   :0.0073349   #>                                        3rd Qu.:0.0028132   #>                                        Max.   :0.4922550 ccl4_hlc_all[, log_transform_mean_hlc := log(mean_hlc)] #>             dtxsid     mean_hlc log_transform_mean_hlc #>             <char>        <num>                  <num> #>  1:  DTXSID0020153 2.918720e-03             -5.8366101 #>  2:  DTXSID0020446 1.527830e-09            -20.2994174 #>  3:  DTXSID0020573 3.748870e-06            -12.4940561 #>  4:  DTXSID0020600 1.479610e-04             -8.8185618 #>  5:  DTXSID0020814 2.049460e-07            -15.4005193 #>  6:  DTXSID0021541 8.825620e-03             -4.7300964 #>  7:  DTXSID0021917 4.922550e-01             -0.7087584 #>  8:  DTXSID0024052 2.338400e-10            -22.1763840 #>  9:  DTXSID1020437 5.639950e-03             -5.1778801 #> 10:  DTXSID1021407 1.768600e-06            -13.2453223 #> 11:  DTXSID1021740 8.824295e-06            -11.6380018 #> 12:  DTXSID1021798 8.664450e-06            -11.6562821 #> 13:  DTXSID1024174 2.964310e-07            -15.0314514 #> 14:  DTXSID1024338 1.646800e-10            -22.5270169 #> 15:  DTXSID1026164 1.977445e-06            -13.1337050 #> 16:  DTXSID1037484 1.196270e-09            -20.5440575 #> 17:  DTXSID1037486 1.185530e-09            -20.5530759 #> 18:  DTXSID1037567 4.339640e-10            -21.5580595 #> 19:  DTXSID2020684 3.194620e-06            -12.6540424 #> 20:  DTXSID2021028 3.662790e-06            -12.5172854 #> 21:  DTXSID2021317 2.493330e-03             -5.9941361 #> 22:  DTXSID2021731 4.553975e-06            -12.2995101 #> 23:  DTXSID2022333 8.026420e-03             -4.8250167 #> 24:  DTXSID2037506 1.313660e-09            -20.4504487 #> 25:  DTXSID2052156 3.785200e-10            -21.6947522 #> 26:  DTXSID3020203 4.129470e-02             -3.1870211 #> 27:  DTXSID3020833 5.902805e-04             -7.4349127 #> 28:  DTXSID3020964 2.389895e-05            -10.6416760 #> 29:  DTXSID3024366 1.485460e-04             -8.8146159 #> 30:  DTXSID3024869 1.776260e-06            -13.2410005 #> 31:  DTXSID3031864 1.803350e-11            -24.7387900 #> 32:  DTXSID3032464 8.835860e-06            -11.6366921 #> 33:  DTXSID3042219 1.047975e-02             -4.5583105 #> 34:  DTXSID3074313 2.046920e-11            -24.6120998 #> 35:  DTXSID4020533 4.847905e-06            -12.2369639 #> 36:  DTXSID4021503 3.771570e-03             -5.5802639 #> 37:  DTXSID4022361 2.458220e-08            -17.5212432 #> 38:  DTXSID4022367 1.047830e-09            -20.6765445 #> 39:  DTXSID4022448 9.004310e-09            -18.5255625 #> 40:  DTXSID4022991 1.238900e-11            -25.1142121 #> 41:  DTXSID4032611 1.477090e-05            -11.1228515 #> 42:  DTXSID4034948 1.537700e-09            -20.2929780 #> 43:  DTXSID5020023 1.214215e-04             -9.0162426 #> 44:  DTXSID5020576 9.440170e-08            -16.1757068 #> 45:  DTXSID5020601 3.864950e-09            -19.3713171 #> 46:  DTXSID5021207 1.374810e-04             -8.8920248 #> 47:  DTXSID5024182 3.307185e-07            -14.9219983 #> 48:  DTXSID5039224 6.639505e-05             -9.6198881 #> 49: DTXSID50867064 1.183860e-08            -18.2519005 #> 50:  DTXSID6020301 4.061025e-02             -3.2037348 #> 51:  DTXSID6020856 3.217130e-09            -19.5547762 #> 52:  DTXSID6021030 9.187830e-07            -13.9002159 #> 53:  DTXSID6021032 3.249700e-04             -8.0317777 #> 54:  DTXSID6022422 1.067460e-07            -16.0528137 #> 55:  DTXSID6024177 2.553800e-07            -15.1805132 #> 56:  DTXSID6037483 5.542140e-10            -21.3134702 #> 57:  DTXSID6037485 5.623550e-10            -21.2988878 #> 58:  DTXSID6037568 8.289390e-09            -18.6082895 #> 59:  DTXSID7020005 8.830950e-08            -16.2424181 #> 60:  DTXSID7020637 3.432355e-07            -14.8848490 #> 61:  DTXSID7021029 3.650960e-05            -10.2179353 #> 62:  DTXSID7024241 3.283070e-06            -12.6267316 #> 63:  DTXSID7047433 6.785440e-08            -16.5059016 #> 64:  DTXSID8020044 4.999450e-06            -12.2061827 #> 65:  DTXSID8020090 2.019270e-06            -13.1127745 #> 66:  DTXSID8020597 5.999740e-08            -16.6289646 #> 67:  DTXSID8020832 7.367270e-03             -4.9107081 #> 68:  DTXSID8021062 1.159700e-05            -11.3647641 #> 69:  DTXSID8022292 2.387120e-08            -17.5505931 #> 70:  DTXSID8022377 3.748870e-06            -12.4940561 #> 71:  DTXSID8023846 4.938440e-09            -19.1262163 #> 72:  DTXSID8023848 9.954840e-09            -18.4252070 #> 73:  DTXSID8025541 4.150640e-07            -14.6948331 #> 74:  DTXSID8031865 1.916920e-10            -22.3751312 #> 75:  DTXSID9021390 3.432295e-04             -7.9771112 #> 76:  DTXSID9021427 5.556870e-07            -14.4030607 #> 77:  DTXSID9022366 5.167830e-09            -19.0808130 #> 78:  DTXSID9023380 4.156230e-09            -19.2986574 #> 79:  DTXSID9023914 5.035540e-11            -23.7119153 #> 80:  DTXSID9024142 2.692760e-06            -12.8249439 #> 81:  DTXSID9032113 3.098320e-07            -14.9872356 #> 82:  DTXSID9032329 1.566850e-06            -13.3664433 #>             dtxsid     mean_hlc log_transform_mean_hlc ccl4_hlc_grouped[, log_transform_mean_hlc := log(mean_hlc)] #>             dtxsid     propType    mean_hlc log_transform_mean_hlc #>             <char>       <char>       <num>                  <num> #>   1: DTXSID0020153    predicted 2.91872e-03              -5.836610 #>   2: DTXSID0020446    predicted 1.52783e-09             -20.299417 #>   3: DTXSID0020573    predicted 3.74887e-06             -12.494056 #>   4: DTXSID0020600 experimental 1.48000e-04              -8.818298 #>   5: DTXSID0020600    predicted 1.47922e-04              -8.818825 #>  ---                                                               #> 106: DTXSID9023914 experimental 5.03002e-11             -23.713012 #> 107: DTXSID9023914    predicted 5.04106e-11             -23.710820 #> 108: DTXSID9024142    predicted 2.69276e-06             -12.824944 #> 109: DTXSID9032113    predicted 3.09832e-07             -14.987236 #> 110: DTXSID9032329    predicted 1.56685e-06             -13.366443  natadb_hlc_all[, log_transform_mean_hlc := log(mean_hlc)] #>             dtxsid     mean_hlc log_transform_mean_hlc #>             <char>        <num>                  <num> #>   1: DTXSID0020153 2.918720e-03              -5.836610 #>   2: DTXSID0020448 2.806465e-03              -5.875830 #>   3: DTXSID0020523 8.611785e-08             -16.267549 #>   4: DTXSID0020529 5.417975e-08             -16.730959 #>   5: DTXSID0020600 1.479610e-04              -8.818562 #>  ---                                                   #> 140: DTXSID9020293 2.943670e-06             -12.735853 #> 141: DTXSID9020299 4.846860e-10             -21.447520 #> 142: DTXSID9020827 2.040880e-07             -15.404715 #> 143: DTXSID9021138 5.672420e-08             -16.685065 #> 144: DTXSID9041522 8.981400e-06             -11.620355 natadb_hlc_grouped[, log_transform_mean_hlc := log(mean_hlc)] #>             dtxsid     propType    mean_hlc log_transform_mean_hlc #>             <char>       <char>       <num>                  <num> #>   1: DTXSID0020153    predicted 2.91872e-03              -5.836610 #>   2: DTXSID0020448 experimental 2.82000e-03              -5.871018 #>   3: DTXSID0020448    predicted 2.79293e-03              -5.880664 #>   4: DTXSID0020523 experimental 8.59999e-08             -16.268920 #>   5: DTXSID0020523    predicted 8.62358e-08             -16.266180 #>  ---                                                               #> 206: DTXSID9020299    predicted 4.84686e-10             -21.447520 #> 207: DTXSID9020827 experimental 2.03000e-07             -15.410060 #> 208: DTXSID9020827    predicted 2.05176e-07             -15.399398 #> 209: DTXSID9021138    predicted 5.67242e-08             -16.685065 #> 210: DTXSID9041522    predicted 8.98140e-06             -11.620355 ccl4_hlc_grouped[, set := 'CCL4'] #>             dtxsid     propType    mean_hlc log_transform_mean_hlc    set #>             <char>       <char>       <num>                  <num> <char> #>   1: DTXSID0020153    predicted 2.91872e-03              -5.836610   CCL4 #>   2: DTXSID0020446    predicted 1.52783e-09             -20.299417   CCL4 #>   3: DTXSID0020573    predicted 3.74887e-06             -12.494056   CCL4 #>   4: DTXSID0020600 experimental 1.48000e-04              -8.818298   CCL4 #>   5: DTXSID0020600    predicted 1.47922e-04              -8.818825   CCL4 #>  ---                                                                      #> 106: DTXSID9023914 experimental 5.03002e-11             -23.713012   CCL4 #> 107: DTXSID9023914    predicted 5.04106e-11             -23.710820   CCL4 #> 108: DTXSID9024142    predicted 2.69276e-06             -12.824944   CCL4 #> 109: DTXSID9032113    predicted 3.09832e-07             -14.987236   CCL4 #> 110: DTXSID9032329    predicted 1.56685e-06             -13.366443   CCL4 natadb_hlc_grouped[, set := 'NATADB'] #>             dtxsid     propType    mean_hlc log_transform_mean_hlc    set #>             <char>       <char>       <num>                  <num> <char> #>   1: DTXSID0020153    predicted 2.91872e-03              -5.836610 NATADB #>   2: DTXSID0020448 experimental 2.82000e-03              -5.871018 NATADB #>   3: DTXSID0020448    predicted 2.79293e-03              -5.880664 NATADB #>   4: DTXSID0020523 experimental 8.59999e-08             -16.268920 NATADB #>   5: DTXSID0020523    predicted 8.62358e-08             -16.266180 NATADB #>  ---                                                                      #> 206: DTXSID9020299    predicted 4.84686e-10             -21.447520 NATADB #> 207: DTXSID9020827 experimental 2.03000e-07             -15.410060 NATADB #> 208: DTXSID9020827    predicted 2.05176e-07             -15.399398 NATADB #> 209: DTXSID9021138    predicted 5.67242e-08             -16.685065 NATADB #> 210: DTXSID9041522    predicted 8.98140e-06             -11.620355 NATADB  all_hlc_grouped <- rbind(ccl4_hlc_grouped, natadb_hlc_grouped)  hlc_box <- ggplot(all_hlc_grouped, aes(set, log_transform_mean_hlc)) +    geom_boxplot(aes(color = propType))  hlc <- ggplot(all_hlc_grouped, aes(log_transform_mean_hlc)) +   geom_boxplot(aes(color = set)) +   coord_flip()"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"boling-point","dir":"Articles","previous_headings":"Example Use Case: Comparing Physico-chemical Properties Across Chemical Lists > Review Physico-Chemical Properties Across Chemical Lists","what":"Boling Point","title":"ctxR: Chemical API","text":"Boiling Point data explored. Begin grouping data DTXSID, also DTXSID property type. Calculate summary statistics. Since boiling point values negative values, log transformation values result warnings NaNs produced. Finally, compare chemical lists simultaneously. accomplish , add column data.table denoting chemical list rows correspond combine rows data sets together using function rbind().  visual inspection set graphs clear previous cases. Note predicted values data set tend higher experimental. mean CCL4, predicted experimental appears greater corresponding means NATADB, overall mean, interquartile ranges different groupings yield slightly different results. gives us sense picture boiling point clear cut experimental predicted two chemical lists previous physico-chemical properties investigated. summarize observations, across various physico-chemical properties chemicals chemical lists, indeed differences mean values various physico-chemical properties grouped predicted experimental. “vapor-pressure”, means predicted values tend little lower experimental, though much closer case NATADB CCL4. trend lower predicted means compared experimental means clearly demonstrated “henrys-law” values data sets. case “boiling-point”, predicted values greater experimental values, though much pronounced CCL4 set means NATADB fairly close.","code":"ccl4_boiling_all <- ccl4_phys_chem[propertyId %in% 'boiling-point',                                     .(mean_boiling_point = sapply(.SD, mean)),                                     .SDcols = c('value'), by = .(dtxsid)] natadb_boiling_all <- natadb_phys_chem[propertyId %in% 'boiling-point',                                         .(mean_boiling_point =                                             sapply(.SD, mean)),                                         .SDcols = c('value'), by = .(dtxsid)] ccl4_boiling_grouped <- ccl4_phys_chem[propertyId %in% 'boiling-point',                                         .(mean_boiling_point =                                             sapply(.SD, mean)),                                         .SDcols = c('value'),                                         by = .(dtxsid, propType)] natadb_boiling_grouped <- natadb_phys_chem[propertyId %in% 'boiling-point',                                             .(mean_boiling_point =                                                 sapply(.SD, mean)),                                             .SDcols = c('value'),                                             by = .(dtxsid, propType)] summary(ccl4_boiling_all) #>     dtxsid          mean_boiling_point #>  Length:91          Min.   : -34.92    #>  Class :character   1st Qu.: 167.40    #>  Mode  :character   Median : 306.29    #>                     Mean   : 350.26    #>                     3rd Qu.: 390.63    #>                     Max.   :3377.66 summary(ccl4_boiling_grouped) #>     dtxsid            propType         mean_boiling_point #>  Length:143         Length:143         Min.   : -40.78    #>  Class :character   Class :character   1st Qu.: 115.13    #>  Mode  :character   Mode  :character   Median : 208.03    #>                                        Mean   : 318.70    #>                                        3rd Qu.: 383.44    #>                                        Max.   :4825.00 summary(natadb_boiling_all) #>     dtxsid          mean_boiling_point #>  Length:152         Min.   :-38.45     #>  Class :character   1st Qu.: 85.98     #>  Mode  :character   Median :187.18     #>                     Mean   :186.92     #>                     3rd Qu.:275.57     #>                     Max.   :584.48 summary(natadb_boiling_grouped) #>     dtxsid            propType         mean_boiling_point #>  Length:295         Length:295         Min.   :-87.78     #>  Class :character   Class :character   1st Qu.: 82.20     #>  Mode  :character   Mode  :character   Median :180.00     #>                                        Mean   :181.67     #>                                        3rd Qu.:262.46     #>                                        Max.   :685.00 ccl4_boiling_grouped[, set := 'CCL4'] #>             dtxsid     propType mean_boiling_point    set #>             <char>       <char>              <num> <char> #>   1: DTXSID0020153 experimental           178.9778   CCL4 #>   2: DTXSID0020153    predicted           180.1880   CCL4 #>   3: DTXSID0020446 experimental           182.5000   CCL4 #>   4: DTXSID0020446    predicted           340.0280   CCL4 #>   5: DTXSID0020573    predicted           398.2052   CCL4 #>  ---                                                      #> 139: DTXSID9024142    predicted           452.0113   CCL4 #> 140: DTXSID9032113    predicted           384.5745   CCL4 #> 141: DTXSID9032119 experimental           990.0000   CCL4 #> 142: DTXSID9032119    predicted           482.9800   CCL4 #> 143: DTXSID9032329    predicted           448.4297   CCL4 natadb_boiling_grouped[, set := 'NATADB'] #>             dtxsid     propType mean_boiling_point    set #>             <char>       <char>              <num> <char> #>   1: DTXSID0020153 experimental          178.97780 NATADB #>   2: DTXSID0020153    predicted          180.18800 NATADB #>   3: DTXSID0020448 experimental           96.14168 NATADB #>   4: DTXSID0020448    predicted           97.64523 NATADB #>   5: DTXSID0020523 experimental          113.00000 NATADB #>  ---                                                      #> 291: DTXSID9021138    predicted          263.44175 NATADB #> 292: DTXSID9021261 experimental          685.00000 NATADB #> 293: DTXSID9021261    predicted          483.96000 NATADB #> 294: DTXSID9041522 experimental          340.00000 NATADB #> 295: DTXSID9041522    predicted          334.18150 NATADB  all_boiling_grouped <- rbind(ccl4_boiling_grouped, natadb_boiling_grouped)  boiling_box <- ggplot(all_boiling_grouped, aes(set, mean_boiling_point)) +    geom_boxplot(aes(color = propType)) boiling <- ggplot(all_boiling_grouped, aes(mean_boiling_point)) +   geom_boxplot(aes(color = set)) +    coord_flip()"},{"path":"https://usepa.github.io/ctxR/dev/articles/Chemical.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"ctxR: Chemical API","text":"vignette, variety functions access different types data found Chemical endpoints CTX APIs explored. exploration exhaustive, provides basic introduction one may access data work . Additional endpoints corresponding functions exist encourage user explore keeping mind examples contained vignette.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Exposure.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"ctxR: Exposure API","text":"vignette, CTX Exposure API explored. Data provided Exposure API broadly organized three different areas, Functional Use Information, Product Data, List Presence Data. data (except Functional Use Probability endpoint) developed publicly available documents also accessible using Chemical Exposure Knowledgebase (ChempExpo) interactive web application developed United States Environmental Protection Agency. underlying database Exposure API ChemExpo Chemicals Products Database (CPDat). CPDat provides reported information chemicals used commerce (possible) quantities occur consumer industrial products; see Dionisio et al. (2018) information CPDat. data provided Functional Use Probability endpoint predictions EPA’s Quantitative Structure Use Relationship (QSUR) models Phillips et al. (2017). Product Data organized harmonized Product Use Categories (PUCs). PUCs assigned products (associated Composition Documents) indicate type product associated data record. organized hierarchicially, General Category containing Product Family, turn contains Product Type. Exposure API also provide information PUC assigned. note Machine Learning model used assign PUCs “classificationmethod” equal “Automatic”. , assignments may incorrect. information PUC categories can found Isaacs et al. (2020). List Presence Data reflect occurrence chemicals lists present publicly available documents (sourced variety federal state agencies trade associations). lists tagged List Presence Keywords (LPKs) together describe information contained document relevant chemical used. LPKs updated version cassettes provided Chemical Product Categories (CPCat) database; see Dionisio et al. (2015). date information current LPKs see CPCat cassettes updated, see Koval et al. (2022). reported predicted Function Use Information available. Reported functional use information organized harmonized Function Categories (FCs) describe role chemical serves product industrial process. harmonized technical function categories definitions developed Organization Economic Co-operation Development (OECD) (exception categories unique consumer products noted developed EPA). categories augmented additional categories needed describe chemicals personal care, pharmaceutical, commercial sectors. reported function data form basis ORD’s QSUR models (Phillips et al. (2016)). models provide structure-based predictions chemical function available Functional Use Probability endpoint. Note models developed prior OECD function categories, function categories yet aligned harmonized categories used reported data. Updated models harmonized categories development. Information ChemExpo sourced : Sakshi Handa, Katherine . Phillips, Kenta Baron-Furuyama, Kristin K. Isaacs. 2023. “ChemExpo Knowledgebase User Guide”. https://comptox.epa.gov/chemexpo/static/user_guide/index.html. NOTE: Please see introductory vignette overview ctxR package initial set instruction API key storage. Several ctxR functions can used access CTX Exposure API data, described following sections. Tables output example filtered display first rows data.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Exposure.html","id":"functional-use-resource","dir":"Articles","previous_headings":"","what":"Functional Use Resource","title":"ctxR: Exposure API","text":"Functional uses chemicals may searched.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Exposure.html","id":"exposure-functional-use","dir":"Articles","previous_headings":"Functional Use Resource","what":"Exposure Functional Use","title":"ctxR: Exposure API","text":"get_exposure_functional_use() retrieves FCs associated exposure data specific chemical (DTXSID).","code":"exp_fun_use <- get_exposure_functional_use(DTXSID = 'DTXSID7020182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Exposure.html","id":"exposure-functional-use-probability","dir":"Articles","previous_headings":"Functional Use Resource","what":"Exposure Functional Use Probability","title":"ctxR: Exposure API","text":"get_exposure_functional_use_probability() retrieves probability functional use within different FCs given chemical (DTXSID). Note, probability chemical used across categories rather probability within FC chemical used.","code":"exp_fun_use_prob <- get_exposure_functional_use_probability(DTXSID = 'DTXSID7020182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Exposure.html","id":"exposure-functional-use-categories","dir":"Articles","previous_headings":"Functional Use Resource","what":"Exposure Functional Use Categories","title":"ctxR: Exposure API","text":"get_exposure_functional_use_categories() retrieves FCs. specific chemical, rather list FCs.","code":"exp_fun_use_cat <- get_exposure_functional_use_category()"},{"path":"https://usepa.github.io/ctxR/dev/articles/Exposure.html","id":"httk-data","dir":"Articles","previous_headings":"Functional Use Resource > Exposure Functional Use Categories","what":"httk data","title":"ctxR: Exposure API","text":"single resource returns httk model data available","code":"bpa_httk <- get_httk_data(DTXSID = 'DTXSID7020182') head(bpa_httk) #>       id        dtxsid    parameter measuredText measured predictedText #> 1 101171 DTXSID7020182          Css       0.0083   0.0083         1.114 #> 2 101172 DTXSID7020182          Css       0.0083   0.0083        0.5297 #> 3 101173 DTXSID7020182          Css       0.0083   0.0083         1.076 #> 4 101174 DTXSID7020182          Css       0.0083   0.0083        0.5116 #> 5 101175 DTXSID7020182 TK.Half.Life         0.19   0.1900         139.5 #> 6 101176 DTXSID7020182     Days.Css           NA       NA           112 #>   predicted units          model              reference percentile species #> 1    1.1140  mg/L           PBTK Wambaugh et al. (2018)        95%     Rat #> 2    0.5297  mg/L           PBTK Wambaugh et al. (2018)        50%     Rat #> 3    1.0760  mg/L 3compartmentss Wambaugh et al. (2018)        95%     Rat #> 4    0.5116  mg/L 3compartmentss Wambaugh et al. (2018)        50%     Rat #> 5  139.5000 hours   1compartment Wambaugh et al. (2018)         NA     Rat #> 6  112.0000  Days           PBTK                     NA         NA     Rat #>   dataSourceSpecies dataVersion                  importDate #> 1               Rat          NA 2024-06-13T16:53:14.622350Z #> 2               Rat          NA 2024-06-13T16:53:14.622350Z #> 3               Rat          NA 2024-06-13T16:53:14.622350Z #> 4               Rat          NA 2024-06-13T16:53:14.622350Z #> 5               Rat          NA 2024-06-13T16:53:14.622350Z #> 6               Rat          NA 2024-06-13T16:53:14.622350Z"},{"path":"https://usepa.github.io/ctxR/dev/articles/Exposure.html","id":"product-data-resource","dir":"Articles","previous_headings":"","what":"Product Data Resource","title":"ctxR: Exposure API","text":"resources retrieving product use data associated chemical identifiers (DTXSID) general use.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Exposure.html","id":"exposure-product-data","dir":"Articles","previous_headings":"Product Data Resource","what":"Exposure Product Data","title":"ctxR: Exposure API","text":"get_exposure_product_data() retrieves product data (PUCs related data) products use specified chemical (DTXSID).","code":"exp_prod_dat <- get_exposure_product_data(DTXSID = 'DTXSID7020182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Exposure.html","id":"exposure-product-use-category-data","dir":"Articles","previous_headings":"Product Data Resource","what":"Exposure Product Use Category Data","title":"ctxR: Exposure API","text":"get_exposure_product_data_puc() retrieves PUCs. specific chemical, rather list PUCs.","code":"exp_prod_data_puc <- get_exposure_product_data_puc()"},{"path":"https://usepa.github.io/ctxR/dev/articles/Exposure.html","id":"list-presence-resource","dir":"Articles","previous_headings":"","what":"List Presence Resource","title":"ctxR: Exposure API","text":"resources retrieving list data specific chemicals (DTXSID) general list presence information.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Exposure.html","id":"list-presence-tags","dir":"Articles","previous_headings":"List Presence Resource","what":"List Presence Tags","title":"ctxR: Exposure API","text":"get_exposure_list_presence_tags() retrieves list presence tag information (including LPKs). specific chemical, rather list list presence tags.","code":"exp_list_tags <- get_exposure_list_presence_tags()"},{"path":"https://usepa.github.io/ctxR/dev/articles/Exposure.html","id":"list-presence-tag-data","dir":"Articles","previous_headings":"List Presence Resource","what":"List Presence Tag Data","title":"ctxR: Exposure API","text":"get_exposure_list_presence_tags_by_dtxsid() retrieves LPKs associated data specific chemical (DTXSID).","code":"exp_list_tags_dat <- get_exposure_list_presence_tags_by_dtxsid(DTXSID = 'DTXSID7020182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Exposure.html","id":"exposure-predictions","dir":"Articles","previous_headings":"List Presence Resource > List Presence Tag Data","what":"Exposure predictions","title":"ctxR: Exposure API","text":"two functions provide access exposure prediction data. first provides general information second provides information broken different demographic groups.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Exposure.html","id":"general-exposure-predictions","dir":"Articles","previous_headings":"List Presence Resource > List Presence Tag Data > Exposure predictions","what":"General exposure predictions","title":"ctxR: Exposure API","text":"get_general_exposure_prediction() returns general exposure information given chemical.","code":"bpa_general_exposure <- get_general_exposure_prediction(DTXSID = 'DTXSID7020182') head(bpa_general_exposure) #>           dtxsid productionVolume  units stockholmConvention probabilityDietary #>           <char>            <int> <char>               <int>              <num> #> 1: DTXSID7020182          2780000 kg/day                   0                  1 #> 5 variable(s) not shown: [probabilityResidential <num>, probabilityPesticde <num>, probabilityIndustrial <num>, dataVersion <lgcl>, importDate <char>]"},{"path":"https://usepa.github.io/ctxR/dev/articles/Exposure.html","id":"demographic-exposure-predictions","dir":"Articles","previous_headings":"List Presence Resource > List Presence Tag Data > Exposure predictions","what":"Demographic exposure predictions","title":"ctxR: Exposure API","text":"get_demographic_exposure_prediction() returns exposure prediction information split across different demographics given chemical.","code":"bpa_demographic_exposure <- get_demographic_exposure_prediction(DTXSID = 'DTXSID7020182') bpa_demographic_exposure #>        id        dtxsid        demographic       predictor       median #> 1  768361 DTXSID7020182              Total    Food.Contact 1.766000e-02 #> 2  769393 DTXSID7020182              Total            FINE 9.460000e-06 #> 3  772655 DTXSID7020182              Total          RAIDAR 3.770000e+00 #> 4  784083 DTXSID7020182              Total     USETox.Pest 5.624000e-02 #> 5  785935 DTXSID7020182              Total   USETox.Indust 1.372000e-04 #> 6  749502 DTXSID7020182            Age 66+ SEEM2 Heuristic 6.608350e-05 #> 7  751534 DTXSID7020182           BMI > 30 SEEM2 Heuristic 7.073042e-05 #> 8  760855 DTXSID7020182              Total  SHEDS.Indirect 7.150000e-05 #> 9  761591 DTXSID7020182              Total    SHEDS.Direct 0.000000e+00 #> 10 763267 DTXSID7020182          BMI <= 30 SEEM2 Heuristic 6.245051e-05 #> 11 488214 DTXSID7020182              Total SEEM3 Consensus 5.497000e-05 #> 12 797784 DTXSID7020182              Total      USETox.Res 4.395000e-02 #> 13 807431 DTXSID7020182              Total     USETox.Diet 1.498000e-04 #> 14 709226 DTXSID7020182              Males SEEM2 Heuristic 3.867956e-05 #> 15 735410 DTXSID7020182          Age 12-19 SEEM2 Heuristic 5.871957e-05 #> 16 697139 DTXSID7020182 Repro. Age Females SEEM2 Heuristic 1.364275e-05 #> 17 711258 DTXSID7020182            Females SEEM2 Heuristic 1.244431e-05 #> 18 737451 DTXSID7020182          Age 20-65 SEEM2 Heuristic 5.675943e-05 #> 19 723306 DTXSID7020182           Age 6-11 SEEM2 Heuristic 6.296203e-05 #>              medianText          l95              l95Text         u95 #> 1               0.01766           NA                   NA          NA #> 2              9.46e-06           NA                   NA          NA #> 3                  3.77           NA                   NA          NA #> 4               0.05624           NA                   NA          NA #> 5             0.0001372           NA                   NA          NA #> 6  6.60834995383669e-05 2.798634e-07  2.7986341540408e-07 0.019477870 #> 7  7.07304192271297e-05 3.136219e-07 3.13621919723853e-07 0.018576052 #> 8              7.15e-05           NA                   NA          NA #> 9                     0           NA                   NA          NA #> 10  6.2450508333388e-05 2.591822e-07 2.59182177179327e-07 0.013621125 #> 11            5.497e-05 1.923000e-07            1.923e-07 0.020440000 #> 12              0.04395           NA                   NA          NA #> 13            0.0001498           NA                   NA          NA #> 14 3.86795578537834e-05 2.846711e-07 2.84671057884619e-07 0.006306170 #> 15 5.87195691748974e-05 2.809632e-07 2.80963221822448e-07 0.017185596 #> 16 1.36427543462443e-05 5.637240e-08 5.63723993835891e-08 0.004176617 #> 17 1.24443070751952e-05 4.901108e-08 4.90110833197268e-08 0.002897798 #> 18 5.67594250809775e-05 2.080289e-07 2.08028872989558e-07 0.011509267 #> 19 6.29620332442998e-05 3.049913e-07 3.04991342892185e-07 0.010537090 #>                u95Text           units ad      reference dataVersion #> 1                   NA       mg/kg/day  1    Biryol 2017          NA #> 2                   NA          mg/day  1      Shin 2012          NA #> 3                   NA       mg/kg/day  1     Arnot 2008          NA #> 4                   NA intake fraction  1    Fantke 2013          NA #> 5                   NA intake fraction  1 Rosenbaum 2008          NA #> 6   0.0194778699251516       mg/kg/day  1  Wambaugh 2014          NA #> 7   0.0185760522525412       mg/kg/day  1  Wambaugh 2014          NA #> 8                   NA       mg/kg/day  1    Isaacs 2017          NA #> 9                   NA       mg/kg/day  1    Isaacs 2017          NA #> 10  0.0136211249503816       mg/kg/day  1  Wambaugh 2014          NA #> 11             0.02044       mg/kg/day  1      Ring 2018          NA #> 12                  NA intake fraction  1     Huang 2016          NA #> 13                  NA intake fraction  1  Ernstoff 2016          NA #> 14 0.00630617035849566       mg/kg/day  1  Wambaugh 2014          NA #> 15  0.0171855959252902       mg/kg/day  1  Wambaugh 2014          NA #> 16 0.00417661734132225       mg/kg/day  1  Wambaugh 2014          NA #> 17 0.00289779809405841       mg/kg/day  1  Wambaugh 2014          NA #> 18  0.0115092672875229       mg/kg/day  1  Wambaugh 2014          NA #> 19  0.0105370896882791       mg/kg/day  1  Wambaugh 2014          NA #>                     importDate #> 1  2024-06-13T19:25:16.277317Z #> 2  2024-06-13T19:25:16.277317Z #> 3  2024-06-13T19:25:16.277317Z #> 4  2024-06-13T19:25:16.277317Z #> 5  2024-06-13T19:25:16.277317Z #> 6  2024-06-13T19:25:16.277317Z #> 7  2024-06-13T19:25:16.277317Z #> 8  2024-06-13T19:25:16.277317Z #> 9  2024-06-13T19:25:16.277317Z #> 10 2024-06-13T19:25:16.277317Z #> 11 2024-06-13T19:25:16.277317Z #> 12 2024-06-13T19:25:16.277317Z #> 13 2024-06-13T19:25:16.277317Z #> 14 2024-06-13T19:25:16.277317Z #> 15 2024-06-13T19:25:16.277317Z #> 16 2024-06-13T19:25:16.277317Z #> 17 2024-06-13T19:25:16.277317Z #> 18 2024-06-13T19:25:16.277317Z #> 19 2024-06-13T19:25:16.277317Z"},{"path":"https://usepa.github.io/ctxR/dev/articles/Exposure.html","id":"batch-search","dir":"Articles","previous_headings":"List Presence Resource","what":"Batch Search","title":"ctxR: Exposure API","text":"batch search versions several endpoints gather data specific chemical. Namely, get_exposure_functional_use_batch(), get_exposure_functional_use_probability(), get_exposure_product_data_batch(), get_exposure_list_presence_tags_by_dtxsid_batch(), get_general_exposure_prediction_batch(), get_demographic_exposure_prediction_batch(). function get_exposure_functional_use_probability() returns data.table row corresponding unique chemical column representing functional use category associated least one input chemical. batch functions return named list data.frames data.tables, names corresponding unique chemicals input data.frames data.tables corresponding information individual chemical.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Exposure.html","id":"functional-use-probability-batch","dir":"Articles","previous_headings":"List Presence Resource","what":"Functional use probability batch","title":"ctxR: Exposure API","text":"demonstrate individual results differ batch results retrieving functional use probabilities. Observe Caffeine probabilities assigned four functional use categories Bisphenol probabilities assigned twelve categories. single chemical search, functional use categories denote row. However, using batch search function, reported categories included columns, rows corresponding chemical. chemical probability associated functional use, corresponding entry given NA.","code":"bpa_prob <- get_exposure_functional_use_probability(DTXSID = 'DTXSID7020182') caf_prob <- get_exposure_functional_use_probability(DTXSID = 'DTXSID0020232')  bpa_caf_prob <- get_exposure_functional_use_probability_batch(DTXSID = c('DTXSID7020182', 'DTXSID0020232')) #>    harmonizedFunctionalUse probability #> 1            antimicrobial      0.3722 #> 2              antioxidant      0.8941 #> 3                 catalyst      0.2031 #> 4                 colorant      0.1560 #> 5              crosslinker      0.7743 #> 6          flame_retardant      0.2208 #> 7                flavorant      0.0314 #> 8                fragrance      0.2071 #> 9          heat_stabilizer      0.5119 #> 10        skin_conditioner      0.1168 #> 11         skin_protectant      0.3306 #> 12             uv_absorber      0.8046 #>   harmonizedFunctionalUse probability #> 1           antimicrobial      0.4808 #> 2                  buffer      0.6370 #> 3                colorant      0.3962 #> 4        skin_conditioner      0.9821 #>           DTXSID antimicrobial antioxidant catalyst colorant crosslinker #>           <char>         <num>       <num>    <num>    <num>       <num> #> 1: DTXSID7020182        0.3722      0.8941   0.2031   0.1560      0.7743 #> 2: DTXSID0020232        0.4808          NA       NA   0.3962          NA #> 8 variable(s) not shown: [flame_retardant <num>, flavorant <num>, fragrance <num>, heat_stabilizer <num>, skin_conditioner <num>, skin_protectant <num>, uv_absorber <num>, buffer <num>]"},{"path":"https://usepa.github.io/ctxR/dev/articles/Exposure.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"ctxR: Exposure API","text":"several CTX Exposure API endpoints ctxR contains functions , batch versions well. allow users access various types exposure data associated given chemical. vignette, explored non-batch versions discussed batch versions. encourage user experiment different endpoints understand better sorts data available.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Hazard.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"ctxR: Hazard API","text":"vignette, CTX Hazard API explored. Data Hazard API come Toxicity Value Database (ToxValDB). ToxValDB includes data thousands chemicals tens thousands records, emphasis quantitative estimates relevant points--departure vivo toxicology studies, - low-observable adverse effect levels, screening levels, reference doses, tolerable daily intake, etc. Aggregated Computational Toxicology Resource (ACToR) currently integrated ToxValDB. ACToR, described Judson et al (2008), designed serve central location information chemical structure vitro bioassays, vivo toxicology assays used various Computational Toxicology efforts US EPA. information ToxValDB can found https://www.epa.gov/comptox-tools/downloadable-computational-toxicology-data#. Additional resources available “ToxVal” subtopic: New Approach Methods training. NOTE: Please see introductory vignette overview ctxR package initial set instruction API key storage. Several ctxR functions can used access CTX Hazard API data, described following sections.Tables output example filtered display first rows data.","code":""},{"path":[]},{"path":"https://usepa.github.io/ctxR/dev/articles/Hazard.html","id":"get-hazard-data-by-dtxsid","dir":"Articles","previous_headings":"Hazard Resource","what":"Get Hazard Data by DTXSID","title":"ctxR: Hazard API","text":"get_hazard_by_dtxsid() retrieves hazard data, human EcoTox data.","code":"hazard_by_dtxsid <- get_hazard_by_dtxsid(DTXSID = 'DTXSID7020182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Hazard.html","id":"get-human-hazard-data-by-dtxsid","dir":"Articles","previous_headings":"Hazard Resource","what":"Get Human Hazard Data by DTXSID","title":"ctxR: Hazard API","text":"get_human_hazard_by_dtxsid() retrieves human hazard data.","code":"human_hazard_by_dtxsid <- get_human_hazard_by_dtxsid(DTXSID = 'DTXSID7020182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Hazard.html","id":"get-ecotox-hazard-data-by-dtxsid","dir":"Articles","previous_headings":"Hazard Resource","what":"Get EcoTox Hazard Data by DTXSID","title":"ctxR: Hazard API","text":"get_ecotox_hazard_by_dtxsid() retrieves ecological toxicity hazard data.","code":"ecotox_hazard_by_dtxsid <- get_ecotox_hazard_by_dtxsid(DTXSID = 'DTXSID7020182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Hazard.html","id":"skin-eye-resource","dir":"Articles","previous_headings":"","what":"Skin Eye Resource","title":"ctxR: Hazard API","text":"get_skin_eye_hazard() retrieves hazard data specific skin eye hazard.","code":"skin_eye_hazard <- get_skin_eye_hazard(DTXSID = 'DTXSID7020182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Hazard.html","id":"cancer-resource","dir":"Articles","previous_headings":"","what":"Cancer Resource","title":"ctxR: Hazard API","text":"get_cancer_hazard() retrieves cancer hazard data.","code":"cancer_hazard <- get_cancer_hazard(DTXSID = 'DTXSID7020182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Hazard.html","id":"genetox-resource","dir":"Articles","previous_headings":"","what":"Genetox Resource","title":"ctxR: Hazard API","text":"get_genetox_summary() retrieves summary level data genotoxicity data associated chemical. get_genetox_detail() retrieves detailed genetox data chemical provided summary level.","code":"genetox_summary <- get_genetox_summary(DTXSID = 'DTXSID7020182') genetox_details <- get_genetox_details(DTXSID = 'DTXSID7020182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Hazard.html","id":"example-use-case-comparing-hazard-data-across-chemical-lists","dir":"Articles","previous_headings":"","what":"Example Use Case: Comparing Hazard Data Across Chemical Lists","title":"ctxR: Hazard API","text":"fourth Drinking Water Contaminant Candidate List (CCL4) set chemicals “…subject proposed promulgated national primary drinking water regulations, known anticipated occur public water systems….” Moreover, list “…announced November 17, 2016. CCL 4 includes 97 chemicals chemical groups 12 microbial contaminants….” National-Scale Air Toxics Assessments (NATA) “… EPA’s ongoing comprehensive evaluation air toxics United States… state---science screening tool State/Local/Tribal agencies prioritize pollutants, emission sources locations interest study order gain better understanding risks… use general information sources develop estimates risks likely overestimate impacts underestimate ….” lists can found CCD CCL4 additional information CCL4 information NATADB additional information NATA information. quotes previous paragraph excerpted list detail descriptions found using CCD links. example use case, hazard data compared water contaminant priority air toxics list.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Hazard.html","id":"obtain-lists-of-chemicals","dir":"Articles","previous_headings":"Example Use Case: Comparing Hazard Data Across Chemical Lists","what":"Obtain Lists of Chemicals","title":"ctxR: Hazard API","text":"First, confirm chemical list query. Next, retrieve list chemicals associated list.","code":"options(width = 100) ccl4_information <- get_public_chemical_list_by_name('CCL4') print(ccl4_information, trunc.cols = TRUE) #>    id    type                                    label visibility #> 1 443 federal WATER|EPA: Chemical Contaminants - CCL 4     PUBLIC #>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             longDescription #> 1 The Contaminant Candidate List (CCL) is a list of contaminants that, at the time of publication, are not subject to any proposed or promulgated national primary drinking water regulations, but are known or anticipated to occur in public water systems. Contaminants listed on the CCL may require future regulation under the Safe Drinking Water Act (SDWA). EPA announced the <a href='https://www.epa.gov/ccl/contaminant-candidate-list-4-ccl-4-0' target='_blank'>fourth Drinking Water Contaminant Candidate List (CCL 4)<\/a> on November 17, 2016. The CCL 4 includes 97 chemicals or chemical groups and 12 microbial contaminants. The group of cyanotoxins on CCL 4 includes, but is not limited to: anatoxin-a, cylindrospermopsin, microcystins, and saxitoxin. The CCL Chemical Candidate Lists are versioned iteratively and this description navigates between the various versions of the lists. The list of substances displayed below represents only the chemical CCL 4 contaminants. For the versioned lists, please use the hyperlinked lists below.<br/><br/> \\r\\n\\r\\n<a href='https://comptox.epa.gov/dashboard/chemical_lists/CCL5' target='_blank'>CCL5 - November 2022<\/a> <br/><br/>\\r\\n<a href='https://comptox.epa.gov/dashboard/chemical_lists/CCL4' target='_blank'>CCL4 - November 2016<\/a> \\r\\n This list<br/><br/>\\r\\n<a href='https://comptox.epa.gov/dashboard/chemical_lists/CCL3' target='_blank'>CCL3 - October 2009<\/a> <br/><br/>\\r\\n<a href='https://comptox.epa.gov/dashboard/chemical_lists/CCL2' target='_blank'>CCL2 - February 2005<\/a><br/><br/>\\r\\n<a href='https://comptox.epa.gov/dashboard/chemical_lists/CCL1' target='_blank'>CCL1 - March 1998<\/a><br/><br/>  #>              updatedAt listName chemicalCount            createdAt #> 1 2022-10-26T21:14:27Z     CCL4           100 2017-12-28T17:58:36Z #>                                                                                                                                              shortDescription #> 1 The Contaminant Candidate List (CCL) is a list of contaminants that are known or anticipated to occur in public water systems. Version 4 is known as CCL 4.  natadb_information <- get_public_chemical_list_by_name('NATADB') print(natadb_information, trunc.cols = TRUE) #>    id    type                                            label visibility #> 1 454 federal EPA: National-Scale Air Toxics AssessmentlongDescription #> 1 The National-Scale Air Toxics Assessment (NATA) is EPA's ongoing comprehensive evaluation of air toxics in the United States. EPA developed the NATA as a state-of-the-science screening tool for State/Local/Tribal Agencies to prioritize pollutants, emission sources and locations of interest for further study in order to gain a better understanding of risks.  NATA assessments do not incorporate refined information about emission sources but, rather, use general information about sources to develop estimates of risks which are more likely to overestimate impacts than underestimate them.\\r\\n\\r\\nNATA provides estimates of the risk of cancer and other serious health effects from breathing (inhaling) air toxics in order to inform both national and more localized efforts to identify and prioritize air toxics, emission source types and locations which are of greatest potential concern in terms of contributing to population risk.  This in turn helps air pollution experts focus limited analytical resources on areas and or populations where the potential for health risks are highest.  Assessments include estimates of cancer and non-cancer health effects based on chronic exposure from outdoor sources, including assessments of non-cancer health effects for Diesel Particulate Matter (PM). Assessments provide a snapshot of the outdoor air quality and the risks to human health that would result if air toxic emissions levels remained unchanged. #>              updatedAt listName chemicalCount            createdAt #> 1 2018-11-16T21:42:01Z   NATADB           163 2018-02-21T12:04:16Z #>                                                                                                                shortDescription #> 1 The National-Scale Air Toxics Assessment (NATA) is EPA's ongoing comprehensive evaluation of air toxics in the United States. ccl4 <- get_chemicals_in_list('CCL4') ccl4 <- data.table::as.data.table(ccl4)  natadb <- get_chemicals_in_list('NATADB') natadb <- data.table::as.data.table(natadb)"},{"path":"https://usepa.github.io/ctxR/dev/articles/Hazard.html","id":"review-genotoxicity-data-for-a-single-chemical","dir":"Articles","previous_headings":"Example Use Case: Comparing Hazard Data Across Chemical Lists","what":"Review Genotoxicity Data for a Single Chemical","title":"ctxR: Hazard API","text":"Using standard CompTox Chemicals Dashboard approach access genotoxicity hazard data, one navigate individual chemical page shown . Figure 2 shows genotoxicity section hazard tab Bisphenol . page provides summary available genotoxicity data well individual reports samples data. CTX APIs streamline process retrieving information programmatic fashion. Figure 3 shows particular set genotoxicity resources available Hazard endpoints CTX APIs. summary detail resources, reflecting information one can find CompTox Chemicals Dashboard Genotoxicity page given chemical.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Hazard.html","id":"review-genotoxicity-data-for-chemical-lists","dir":"Articles","previous_headings":"Example Use Case: Comparing Hazard Data Across Chemical Lists","what":"Review Genotoxicity Data for Chemical Lists","title":"ctxR: Hazard API","text":"function get_genetox_summary() used access summary genotoxicity information per chemical. query list chemicals, rather searching individually chemical, batch search version function, get_genetox_summary_batch(), can used access details. First, pull data. Next, may helpful examine dimensions column names output. information returned first variety highlighted Figure 2, , summary data available genotoxicity data chemical. Observe genotoxicity data returned 71 chemicals CCL4 chemical list 153 NATA chemical list. Chemicals missing genotoxicity information noted. Now, genotoxicity details chemicals chemical list returned using function get_genetox_details_batch(). inspecting first chemical set results, DTXSID0020153, notice information identical case information chemical specific chemical list specific. Assays present chemicals chemical list can explored. First, determine unique values assayCategory column group values determine number unique assays assayCategory value. Next, determine number assays per unique assayCategory value, count number assay results grouping assayCategory, assayType, also examine different numbers assayCategory assayTypes values used chemical lists. Observe 90 unique assays CCl4 114 unique assays NATADB. different assay categories “vitro”, “ND”, “vivo”, 65 unique “vitro” assays CCl4 83 NATADB, 3 unique “ND” assays CCL4 3 NATADB, 22 unique “vivo” assays CCL4 28 NATADB. One may interested looking number chemicals assay resulted positive negative result. assess , group assayResult determine number unique dtxsid values associated assayResult value. CCL4, 64 unique chemicals negative assay result, 53 positive result, 15 equivocal result. NATADB, 141 unique chemicals negative assay result, 130 positive result, 48 equivocal result. Observe since 72 unique dtxsid values assay results CCL4 153 NATADB, several chemicals multiple assay results. Next, determine chemicals chemical list known genotoxic effects. , examine chemicals produce least one positive response assayResult column. Given amount genotoxicity data, consider one chemical, DTXSID0020153, get sense assays, number type result, correspond “positive” results. determine , group assayResult calculate .N group. also isolate positive output data.table number type. five assays produced negative result, 22 produced positive result, one produced equivocal result. 22 positive assays, “bacterial reverse mutation assay” “Ames” numerous, three .","code":"ccl4_genotox <- get_genetox_summary_batch(DTXSID = ccl4$dtxsid) natadb_genetox <- get_genetox_summary_batch(DTXSID = natadb$dtxsid) dim(ccl4_genotox) #> [1] 71  7 dim(natadb_genetox) #> [1] 153   7 colnames(ccl4_genotox) #> [1] \"id\"              \"dtxsid\"          \"reportsPositive\" \"reportsNegative\" \"reportsOther\"    #> [6] \"ames\"            \"micronucleus\" head(ccl4_genotox) #>       id        dtxsid reportsPositive reportsNegative reportsOther   ames micronucleus #>    <int>        <char>           <int>           <int>        <int> <char>       <char> #> 1: 16410 DTXSID0020153              26               5            1      -     positive #> 2: 20381 DTXSID0020446               0              12            0      -     negative #> 3: 21212 DTXSID0020573               3              14            0      -     negative #> 4: 23984 DTXSID0020600              20               0            1      -     positive #> 5: 23751 DTXSID0020814               1               0            0      -            - #> 6: 18199 DTXSID0021464               9              11            0      -     positive ccl4[!(dtxsid %in% ccl4_genotox$dtxsid),       .(dtxsid, casrn, preferredName, molFormula)] #>              dtxsid       casrn             preferredName    molFormula #>              <char>      <char>                    <char>        <char> #>  1: DTXSID001024118  77238-39-2               Microcystin          <NA> #>  2:   DTXSID0024052  55290-64-7                Dimethipin     C6H10O4S2 #>  3:   DTXSID0032578  59669-26-0                Thiodicarb  C10H18N4O4S3 #>  4:   DTXSID1037484 194992-44-4             Acetochlor OA     C14H19NO4 #>  5:   DTXSID1037486 171262-17-2 2-[(2,6-Diethylphenyl)(me     C14H19NO4 #>  6:   DTXSID1037567 171118-09-5           Metolachlor ESA    C15H23NO5S #>  7:   DTXSID2022333    135-98-8          sec-Butylbenzene        C10H14 #>  8:   DTXSID2031083 143545-90-8        Cylindrospermopsin   C15H21N5O7S #>  9:   DTXSID2037506  16655-82-6       3-Hydroxycarbofuran     C12H15NO4 #> 10:   DTXSID2052156    517-09-9                 Equilenin      C18H18O2 #> 11:   DTXSID3021857  25154-52-3             n-Nonylphenol       C15H24O #> 12:   DTXSID3034458  99129-21-2                 Clethodim  C17H26ClNO3S #> 13:   DTXSID3042219    103-65-1             Propylbenzene         C9H12 #> 14:   DTXSID3073137  14866-68-3                  Chlorate          ClO3 #> 15:   DTXSID3074313  35523-89-8                 Saxitoxin    C10H17N7O4 #> 16:   DTXSID4022448  51218-45-2               Metolachlor   C15H22ClNO2 #> 17:   DTXSID4032611  13194-48-4                  Ethoprop    C8H19O2PS2 #> 18:   DTXSID4034948 112410-23-8              Tebufenozide    C22H28N2O2 #> 19:  DTXSID50867064  64285-06-9                Anatoxin a      C10H15NO #> 20:   DTXSID6024177  10265-92-6             Methamidophos     C2H8NO2PS #> 21:   DTXSID6037483 187022-11-3            Acetochlor ESA    C14H21NO5S #> 22:   DTXSID6037485 142363-53-9              Alachlor ESA    C14H21NO5S #> 23:   DTXSID6037568 152019-73-3            Metolachlor OA     C15H21NO4 #> 24:   DTXSID7024241  42874-03-3               Oxyfluorfen C15H11ClF3NO4 #> 25:   DTXSID7047433    474-86-2                   Equilin      C18H20O2 #> 26:   DTXSID8022377     57-91-0         17alpha-Estradiol      C18H24O2 #> 27:   DTXSID8052483   7440-56-4                 Germanium            Ge #> 28:   DTXSID9032113 107534-96-3              Tebuconazole   C16H22ClN3O #> 29:   DTXSID9032329    741-58-2                 Bensulide  C14H24NO4PS3 #>              dtxsid       casrn             preferredName    molFormula natadb[!(dtxsid %in% natadb_genetox$dtxsid),         .(dtxsid, casrn, preferredName, molFormula)] #>             dtxsid        casrn             preferredName molFormula #>             <char>       <char>                    <char>     <char> #>  1: DTXSID00872421 NOCAS_872421     Lead & Lead Compounds       <NA> #>  2:  DTXSID1020273    7782-50-5                  Chlorine        Cl2 #>  3: DTXSID10872417 NOCAS_872417 Cadmium & Cadmium Compoun       <NA> #>  4: DTXSID30872414 NOCAS_872414 Antimony & Antimony Compo       <NA> #>  5: DTXSID30872419 NOCAS_872419 Cobalt & Cobalt Compounds       <NA> #>  6: DTXSID40872425 NOCAS_872425 Nickel & Nickel Compounds       <NA> #>  7:  DTXSID5024267    1336-36-3 Polychlorinated biphenyls       <NA> #>  8:  DTXSID7020687     608-73-1 1,2,3,4,5,6-Hexachlorocyc    C6H6Cl6 #>  9:  DTXSID7023984  NOCAS_23984       Coke oven emissions       <NA> #> 10: DTXSID90872415 NOCAS_872415 Arsenic & Arsenic Compoun       <NA> ccl4_genetox_details <- get_genetox_details_batch(DTXSID = ccl4$dtxsid) natadb_genetox_details <- get_genetox_details_batch(DTXSID = natadb$dtxsid) identical(ccl4_genetox_details[dtxsid %in% 'DTXSID0020153', ],            natadb_genetox_details[dtxsid %in% 'DTXSID0020153', ]) #> [1] TRUE ccl4_genetox_details[, unique(assayCategory)] #> [1] \"in vitro\" \"ND\"       \"in vivo\" natadb_genetox_details[, unique(assayCategory)] #> [1] \"in vitro\" \"ND\"       \"in vivo\" ccl4_genetox_details[, unique(assayType)] #>  [1] \"InVivoMN\"                                                                                                                               #>  [2] \"Overall\"                                                                                                                                #>  [3] \"bacterial reverse mutation assay\"                                                                                                       #>  [4] \"micronucleus assay\"                                                                                                                     #>  [5] \"Ames\"                                                                                                                                   #>  [6] \"InVitroCA\"                                                                                                                              #>  [7] \"InVitroMLA\"                                                                                                                             #>  [8] \"InVitroMN\"                                                                                                                              #>  [9] \"Cell transformation, clonal assay\"                                                                                                      #> [10] \"Forward and reverse gene mutation, host-mediated assay\"                                                                                 #> [11] \"Histidine reverse gene mutation, Ames assay\"                                                                                            #> [12] \"Micronucleus test, chromosome aberrations\"                                                                                              #> [13] \"Mitotic recombination or gene conversion\"                                                                                               #> [14] \"Rec-assay, DNA effects (bacterial DNA repair)\"                                                                                          #> [15] \"Rec-assay, spot test, DNA effects (bacterial DNA repair)\"                                                                               #> [16] \"Sister-chromatid exchange (SCE) in vitro\"                                                                                               #> [17] \"Unscheduled DNA synthesis (UDS) in vitro, DNA effects\"                                                                                  #> [18] \"In vivo carcinogenicity studies\"                                                                                                        #> [19] \"in vitro mammalian chromosome aberration test\"                                                                                          #> [20] \"mammalian cell gene mutation assay\"                                                                                                     #> [21] \"DNA damage and repair assay, unscheduled DNA synthesis in mammalian cells in vitro\"                                                     #> [22] \"in vivo micronucleus (mouse)\"                                                                                                           #> [23] \"in vivo micronucleus (rat)\"                                                                                                             #> [24] \"Sperm morphology\"                                                                                                                       #> [25] \"InVivoCA\"                                                                                                                               #> [26] \"InVivoUDS\"                                                                                                                              #> [27] \"transgenic\"                                                                                                                             #> [28] \"Chromosome aberrations\"                                                                                                                 #> [29] \"Forward gene mutation at the HPRT locus\"                                                                                                #> [30] \"Heritable translocation test, chromosome aberrations\"                                                                                   #> [31] \"Reverse gene mutation\"                                                                                                                  #> [32] \"Sex-linked recessive lethal gene mutation\"                                                                                              #> [33] \"Sister-chromatid exchange (SCE) in vivo\"                                                                                                #> [34] \"Dominant lethal test\"                                                                                                                   #> [35] \"Unscheduled DNA synthesis (UDS) in vivo; DNA effects\"                                                                                   #> [36] \"chromosome aberration assay\"                                                                                                            #> [37] \"mammalian germ cell cytogenetic assay\"                                                                                                  #> [38] \"bacterial forward mutation assay\"                                                                                                       #> [39] \"sister chromatid exchange assay in mammalian cells\"                                                                                     #> [40] \"DNA Binding\"                                                                                                                            #> [41] \"rodent dominant lethal assay\"                                                                                                           #> [42] \"unscheduled DNA synthesis\"                                                                                                              #> [43] \"Bacterial Mutagenesis\"                                                                                                                  #> [44] \"Cytogenetics Other\"                                                                                                                     #> [45] \"Cytotoxicity\"                                                                                                                           #> [46] \"In Vitro Micronucleus\"                                                                                                                  #> [47] \"bacterial gene mutation assay\"                                                                                                          #> [48] \"in vitro mammalian cell micronucleus test\"                                                                                              #> [49] \"Aneuploidy, chromosome aberrations\"                                                                                                     #> [50] \"Chromosome aberrations in vivo\"                                                                                                         #> [51] \"sister chromatid exchange assay\"                                                                                                        #> [52] \"InVivoDNADamage\"                                                                                                                        #> [53] \"Cell transformation, viral enhanced\"                                                                                                    #> [54] \"combined chromosome aberration and micronucleus assay\"                                                                                  #> [55] \"Chromosome aberrations in vitro\"                                                                                                        #> [56] \"Forward gene mutation\"                                                                                                                  #> [57] \"Forward gene mutation at the HPRT or ouabain locus\"                                                                                     #> [58] \"Forward gene mutation at the thymidine kinase (TK) locus; chromosome aberrations\"                                                       #> [59] \"Specific locus test, gene mutation\"                                                                                                     #> [60] \"Spot test, gene mutation\"                                                                                                               #> [61] \"In Vivo Non-mammalian Mutagenesis\"                                                                                                      #> [62] \"In Vivo Micronucleus\"                                                                                                                   #> [63] \"mouse spot test\"                                                                                                                        #> [64] \"transgenic rodent mutagenicity assay\"                                                                                                   #> [65] \"yeast cytogenetic assay\"                                                                                                                #> [66] \"Micronucleus and sister chromatid exchange\"                                                                                             #> [67] \"in vivo comet (mouse)\"                                                                                                                  #> [68] \"in vivo comet (rat)\"                                                                                                                    #> [69] \"Gene mutation\"                                                                                                                          #> [70] \"in vitro mammalian cell transformation assay\"                                                                                           #> [71] \"Cell transformation\"                                                                                                                    #> [72] \"Tryptophan reverse gene mutation\"                                                                                                       #> [73] \"Cell Transformation\"                                                                                                                    #> [74] \"DNA Damage/Repair\"                                                                                                                      #> [75] \"In Vitro Chromosome Aberration\"                                                                                                         #> [76] \"Mutation\"                                                                                                                               #> [77] \"DNA Covalent Binding\"                                                                                                                   #> [78] \"In Vivo Chromosome Aberration\"                                                                                                          #> [79] \"In Vivo Mammalian Mutagenesis\"                                                                                                          #> [80] \"in vitro chromosomal aberration study in mammalian cells\"                                                                               #> [81] \"Mutation Other\"                                                                                                                         #> [82] \"Evaluation of metabolic activity of acute cytotoxicity\"                                                                                 #> [83] \"In vitro mammalian chromosomal aberration test\"                                                                                         #> [84] \"Forward and reverse gene mutation, body fluid assay\"                                                                                    #> [85] \"Forward and reverse gene mutation, chromosome aberrations, mitotic recombination and gene conversion, DNA effects, host-mediated assay\" #> [86] \"Chromosomal aberration assay\"                                                                                                           #> [87] \"Mitotic recombination\"                                                                                                                  #> [88] \"Aneuploidy, sex chromosome gain, chromosome aberrations\"                                                                                #> [89] \"Aneuploidy, whole sex chromosome loss, chromosome aberrations\"                                                                          #> [90] \"fluctuation test\" natadb_genetox_details[, unique(assayType)] #>   [1] \"InVivoMN\"                                                                                                                                    #>   [2] \"Overall\"                                                                                                                                     #>   [3] \"bacterial reverse mutation assay\"                                                                                                            #>   [4] \"micronucleus assay\"                                                                                                                          #>   [5] \"Ames\"                                                                                                                                        #>   [6] \"InVitroCA\"                                                                                                                                   #>   [7] \"InVitroMLA\"                                                                                                                                  #>   [8] \"InVitroMN\"                                                                                                                                   #>   [9] \"Cell transformation, clonal assay\"                                                                                                           #>  [10] \"Forward and reverse gene mutation, host-mediated assay\"                                                                                      #>  [11] \"Histidine reverse gene mutation, Ames assay\"                                                                                                 #>  [12] \"Micronucleus test, chromosome aberrations\"                                                                                                   #>  [13] \"Mitotic recombination or gene conversion\"                                                                                                    #>  [14] \"Rec-assay, DNA effects (bacterial DNA repair)\"                                                                                               #>  [15] \"Rec-assay, spot test, DNA effects (bacterial DNA repair)\"                                                                                    #>  [16] \"Sister-chromatid exchange (SCE) in vitro\"                                                                                                    #>  [17] \"Unscheduled DNA synthesis (UDS) in vitro, DNA effects\"                                                                                       #>  [18] \"In vivo carcinogenicity studies\"                                                                                                             #>  [19] \"DNA damage and repair assay, unscheduled DNA synthesis in mammalian cells in vitro\"                                                          #>  [20] \"rodent dominant lethal assay\"                                                                                                                #>  [21] \"Chromosome aberrations\"                                                                                                                      #>  [22] \"Gene mutation\"                                                                                                                               #>  [23] \"InVivoUDS\"                                                                                                                                   #>  [24] \"InVivoCA\"                                                                                                                                    #>  [25] \"transgenic\"                                                                                                                                  #>  [26] \"Forward gene mutation at the HPRT locus\"                                                                                                     #>  [27] \"Heritable translocation test, chromosome aberrations\"                                                                                        #>  [28] \"Reverse gene mutation\"                                                                                                                       #>  [29] \"Sex-linked recessive lethal gene mutation\"                                                                                                   #>  [30] \"Sister-chromatid exchange (SCE) in vivo\"                                                                                                     #>  [31] \"Dominant lethal test\"                                                                                                                        #>  [32] \"Unscheduled DNA synthesis (UDS) in vivo; DNA effects\"                                                                                        #>  [33] \"Bacterial Mutagenesis\"                                                                                                                       #>  [34] \"Cytogenetics Other\"                                                                                                                          #>  [35] \"Cytotoxicity\"                                                                                                                                #>  [36] \"DNA Damage/Repair\"                                                                                                                           #>  [37] \"In Vitro Chromosome Aberration\"                                                                                                              #>  [38] \"In Vitro Micronucleus\"                                                                                                                       #>  [39] \"In Vivo Non-mammalian Mutagenesis\"                                                                                                           #>  [40] \"Mutation\"                                                                                                                                    #>  [41] \"In Vivo Chromosome Aberration\"                                                                                                               #>  [42] \"In Vivo Mammalian Mutagenesis\"                                                                                                               #>  [43] \"In Vivo Micronucleus\"                                                                                                                        #>  [44] \"in vitro mammalian chromosome aberration test\"                                                                                               #>  [45] \"InVivoDNADamage\"                                                                                                                             #>  [46] \"Cell transformation, viral enhanced\"                                                                                                         #>  [47] \"mammalian cell gene mutation assay\"                                                                                                          #>  [48] \"in vivo micronucleus (mouse)\"                                                                                                                #>  [49] \"Sperm morphology\"                                                                                                                            #>  [50] \"Forward and reverse gene mutation, mitotic recombination and gene conversion, host-mediated assay\"                                           #>  [51] \"Spot test, gene mutation\"                                                                                                                    #>  [52] \"bacterial forward mutation assay\"                                                                                                            #>  [53] \"sister chromatid exchange assay in mammalian cells\"                                                                                          #>  [54] \"DNA Binding\"                                                                                                                                 #>  [55] \"unscheduled DNA synthesis\"                                                                                                                   #>  [56] \"bacteriophage induction in E. coli, gene mutation, UDS in mammalian cells, sex-linked recessive lethal mutations in Drosophila\"              #>  [57] \"DNA damage, gene mutation, reverse mutation, gene conversion, DNA repair, chromosomal aberration, chromatid exchange, UDS\"                   #>  [58] \"chromosome aberration study in mammalian cells\"                                                                                              #>  [59] \"in vitro mammalian cell transformation assay\"                                                                                                #>  [60] \"Forward gene mutation at the thymidine kinase (TK) locus; chromosome aberrations\"                                                            #>  [61] \"Cell transformation\"                                                                                                                         #>  [62] \"Forward and reverse gene mutation, body fluid assay\"                                                                                         #>  [63] \"Forward gene mutation at the HPRT or ouabain locus\"                                                                                          #>  [64] \"chromosome aberration assay\"                                                                                                                 #>  [65] \"Drosophila SLRL assay\"                                                                                                                       #>  [66] \"Salmonella and Escherichia strains: bacterial reverse mutation assay (e.g. Ames test) ; Bacillus strains: recombination assay\"               #>  [67] \"Cytogenetic assay in bone marrow cells\"                                                                                                      #>  [68] \"in vivo comet (mouse)\"                                                                                                                       #>  [69] \"Chromosome aberrations in vitro\"                                                                                                             #>  [70] \"Forward gene mutation\"                                                                                                                       #>  [71] \"Chromosome aberrations in vivo\"                                                                                                              #>  [72] \"in vitro mammalian cell gene mutation tests using the thymidine kinase gene\"                                                                 #>  [73] \"in vivo comet (rat)\"                                                                                                                         #>  [74] \"in vivo micronucleus (rat)\"                                                                                                                  #>  [75] \"mouse spot test\"                                                                                                                             #>  [76] \"Aneuploidy, whole sex chromosome loss, chromosome aberrations\"                                                                               #>  [77] \"sister chromatid exchange assay\"                                                                                                             #>  [78] \"Mouse Lymphoma Forward Mutation Assay\"                                                                                                       #>  [79] \"mammalian erythrocyte micronucleus test\"                                                                                                     #>  [80] \"Tryptophan reverse gene mutation\"                                                                                                            #>  [81] \"bacterial gene mutation assay\"                                                                                                               #>  [82] \"yeast forward mutation and mitotic gene conversion assays in Schizosaccharomyces pombe (P1 strain) and Saccharomyces cerevisiae (D4 strain)\" #>  [83] \"Micronucleus test in vitro, chromosome aberrations\"                                                                                          #>  [84] \"heritable translocation assay\"                                                                                                               #>  [85] \"mitotic recombination assay with Saccharomyces cerevisiae\"                                                                                   #>  [86] \"Aneuploidy, chromosome aberrations\"                                                                                                          #>  [87] \"cell transformation\"                                                                                                                         #>  [88] \"in vitro mammalian cell micronucleus test\"                                                                                                   #>  [89] \"somatic mutation and recombination test in Drosophila\"                                                                                       #>  [90] \"transgenic rodent mutagenicity assay\"                                                                                                        #>  [91] \"yeast cytogenetic assay\"                                                                                                                     #>  [92] \"Micronucleus and sister chromatid exchange\"                                                                                                  #>  [93] \"in vitro mammalian cell gene mutation test using the Hprt and xprt genes\"                                                                    #>  [94] \"bone marrow chromosome aberration assay and mammalian germ cell cytogenetic assay\"                                                           #>  [95] \"bacterial mutation\"                                                                                                                          #>  [96] \"bacterial reverse mutation assay (Salmonella typhimurium and Escherichia coli)\"                                                              #>  [97] \"Aneuploidy, partial sex chromosome loss, chromosome aberrations \"                                                                            #>  [98] \"Chromosome aberrations, in vivo\"                                                                                                             #>  [99] \"in vitro chromosome aberration study\"                                                                                                        #> [100] \"Cell transformation, focus assay\"                                                                                                            #> [101] \"Forward and reverse gene mutation, mitotic recombination and gene conversion, DNA effects, host-mediated assay\"                              #> [102] \"gene mutation assay in fungi\"                                                                                                                #> [103] \"DNA adduct formation\"                                                                                                                        #> [104] \"Cell Transformation\"                                                                                                                         #> [105] \"DNA Covalent Binding\"                                                                                                                        #> [106] \"mammalian comet assay\"                                                                                                                       #> [107] \"Aneuploidy, sex chromosome gain, chromosome aberrations\"                                                                                     #> [108] \"mammalian germ cell cytogenetic assay\"                                                                                                       #> [109] \"Forward and reverse gene mutation, chromosome aberrations, mitotic recombination and gene conversion, DNA effects, host-mediated assay\"      #> [110] \"E. coli K-12 DNA repair host-mediated assay\"                                                                                                 #> [111] \"Chromosomal aberration assay\"                                                                                                                #> [112] \"forward mutation\"                                                                                                                            #> [113] \"mammalian cell gene mutation test\"                                                                                                           #> [114] \"Mitotic recombination\" ccl4_genetox_details[, .(Assays = length(unique(assayType))),                       by = .(assayCategory)] #>    assayCategory Assays #>           <char>  <int> #> 1:      in vitro     65 #> 2:            ND      3 #> 3:       in vivo     22 natadb_genetox_details[, .(Assays = length(unique(assayType))),                        by = .(assayCategory)] #>    assayCategory Assays #>           <char>  <int> #> 1:      in vitro     83 #> 2:            ND      3 #> 3:       in vivo     28  ccl4_genetox_details[, .N, by = .(assayCategory, assayType, assayResult)] #>      assayCategory                 assayType assayResult     N #>             <char>                    <char>      <char> <int> #>   1:      in vitro                  InVivoMN    negative    10 #>   2:            ND                   Overall    positive     5 #>   3:      in vitro bacterial reverse mutatio    positive    39 #>   4:       in vivo        micronucleus assay    negative    36 #>   5:       in vivo        micronucleus assay   equivocal     1 #>  ---                                                           #> 149:      in vitro Heritable translocation t    negative     1 #> 150:      in vitro     Mitotic recombination    positive     1 #> 151:      in vitro Aneuploidy, sex chromosom    negative     1 #> 152:      in vitro Aneuploidy, whole sex chr    positive     1 #> 153:      in vitro          fluctuation test    negative     2 ccl4_genetox_details[, .N, by = .(assayCategory)] #>    assayCategory     N #>           <char> <int> #> 1:      in vitro   815 #> 2:            ND    38 #> 3:       in vivo   188 ccl4_genetox_details[assayCategory == 'in vitro', .N, by = .(assayType)] #>                     assayType     N #>                        <char> <int> #>  1:                  InVivoMN    28 #>  2: bacterial reverse mutatio   165 #>  3:                      Ames    88 #>  4:                 InVitroCA    31 #>  5:                InVitroMLA    24 #>  6:                 InVitroMN     6 #>  7: Cell transformation, clon     8 #>  8: Forward and reverse gene      7 #>  9: Histidine reverse gene mu    19 #> 10: Micronucleus test, chromo     8 #> 11: Mitotic recombination or     18 #> 12: Rec-assay, DNA effects (b    15 #> 13: Rec-assay, spot test, DNA     2 #> 14: Sister-chromatid exchange    41 #> 15: in vitro mammalian chromo    22 #> 16: mammalian cell gene mutat    42 #> 17: DNA damage and repair ass    21 #> 18:    Chromosome aberrations     2 #> 19: Forward gene mutation at      5 #> 20: Heritable translocation t     5 #> 21:     Reverse gene mutation     9 #> 22: Sex-linked recessive leth     9 #> 23: Sister-chromatid exchange    13 #> 24: chromosome aberration ass    15 #> 25: bacterial forward mutatio     1 #> 26: sister chromatid exchange    11 #> 27:     Bacterial Mutagenesis    27 #> 28:        Cytogenetics Other    26 #> 29:              Cytotoxicity    21 #> 30:     In Vitro Micronucleus     4 #> 31: bacterial gene mutation a     7 #> 32: in vitro mammalian cell m     5 #> 33: Aneuploidy, chromosome ab     5 #> 34: sister chromatid exchange     3 #> 35: Cell transformation, vira    12 #> 36: combined chromosome aberr     1 #> 37: Chromosome aberrations in     2 #> 38:     Forward gene mutation     5 #> 39: Forward gene mutation at      6 #> 40: Forward gene mutation at      2 #> 41: Specific locus test, gene     1 #> 42:  Spot test, gene mutation     1 #> 43: In Vivo Non-mammalian Mut     7 #> 44:           mouse spot test     2 #> 45: transgenic rodent mutagen     1 #> 46:   yeast cytogenetic assay     1 #> 47:             Gene mutation     4 #> 48: in vitro mammalian cell t     2 #> 49:       Cell transformation     5 #> 50: Tryptophan reverse gene m     8 #> 51:       Cell Transformation     2 #> 52:         DNA Damage/Repair     8 #> 53: In Vitro Chromosome Aberr    11 #> 54:                  Mutation     3 #> 55: in vitro chromosomal aber     1 #> 56:            Mutation Other     4 #> 57: Evaluation of metabolic a     1 #> 58: In vitro mammalian chromo     2 #> 59: Forward and reverse gene      2 #> 60: Forward and reverse gene      1 #> 61: Chromosomal aberration as     2 #> 62:     Mitotic recombination     1 #> 63: Aneuploidy, sex chromosom     1 #> 64: Aneuploidy, whole sex chr     1 #> 65:          fluctuation test     2 #>                     assayType     N ccl4_genetox_details[assayCategory == 'ND', .N, by = .(assayType)] #>                    assayType     N #>                       <char> <int> #> 1:                   Overall     5 #> 2: In vivo carcinogenicity s    23 #> 3:                transgenic    10 ccl4_genetox_details[assayCategory == 'in vivo', .N, by = .(assayType)] #>                     assayType     N #>                        <char> <int> #>  1:        micronucleus assay    46 #>  2: Unscheduled DNA synthesis     9 #>  3: in vivo micronucleus (mou    19 #>  4: in vivo micronucleus (rat     9 #>  5:          Sperm morphology     9 #>  6:                  InVivoCA    14 #>  7:                 InVivoUDS    11 #>  8:      Dominant lethal test     5 #>  9: Unscheduled DNA synthesis     3 #> 10: mammalian germ cell cytog     2 #> 11:               DNA Binding     1 #> 12: rodent dominant lethal as    15 #> 13: unscheduled DNA synthesis     6 #> 14: Chromosome aberrations in     2 #> 15:           InVivoDNADamage     7 #> 16:      In Vivo Micronucleus     1 #> 17: Micronucleus and sister c     2 #> 18:     in vivo comet (mouse)     1 #> 19:       in vivo comet (rat)     3 #> 20:      DNA Covalent Binding    12 #> 21: In Vivo Chromosome Aberra     4 #> 22: In Vivo Mammalian Mutagen     7 #>                     assayType     N  natadb_genetox_details[, .N, by = .(assayCategory, assayType, assayResult)] #>      assayCategory                 assayType assayResult     N #>             <char>                    <char>      <char> <int> #>   1:      in vitro                  InVivoMN    negative    40 #>   2:            ND                   Overall    positive    16 #>   3:      in vitro bacterial reverse mutatio    positive    93 #>   4:       in vivo        micronucleus assay    negative    76 #>   5:       in vivo        micronucleus assay   equivocal     4 #>  ---                                                           #> 194:      in vitro Heritable translocation t    negative     2 #> 195:       in vivo     mammalian comet assay   equivocal     1 #> 196:      in vitro mammalian cell gene mutat    positive     1 #> 197:      in vitro in vitro mammalian cell t    positive     1 #> 198:      in vitro     Mitotic recombination    positive     1 natadb_genetox_details[, .N, by = .(assayCategory)] #>    assayCategory     N #>           <char> <int> #> 1:      in vitro  2112 #> 2:            ND   100 #> 3:       in vivo   435 natadb_genetox_details[assayCategory == 'in vitro', .N, by = .(assayType)] #>                     assayType     N #>                        <char> <int> #>  1:                  InVivoMN    89 #>  2: bacterial reverse mutatio   362 #>  3:                      Ames   258 #>  4:                 InVitroCA    98 #>  5:                InVitroMLA    85 #>  6:                 InVitroMN    20 #>  7: Cell transformation, clon    14 #>  8: Forward and reverse gene     17 #>  9: Histidine reverse gene mu    55 #> 10: Micronucleus test, chromo    33 #> 11: Mitotic recombination or     47 #> 12: Rec-assay, DNA effects (b    34 #> 13: Rec-assay, spot test, DNA     6 #> 14: Sister-chromatid exchange    98 #> 15: DNA damage and repair ass    50 #> 16:    Chromosome aberrations    25 #> 17:             Gene mutation    20 #> 18: Forward gene mutation at     12 #> 19: Heritable translocation t    10 #> 20:     Reverse gene mutation    30 #> 21: Sex-linked recessive leth    26 #> 22: Sister-chromatid exchange    31 #> 23:     Bacterial Mutagenesis    41 #> 24:        Cytogenetics Other    41 #> 25:              Cytotoxicity    20 #> 26:         DNA Damage/Repair    27 #> 27: In Vitro Chromosome Aberr     6 #> 28:     In Vitro Micronucleus     8 #> 29: In Vivo Non-mammalian Mut     7 #> 30:                  Mutation     6 #> 31: in vitro mammalian chromo    91 #> 32: Cell transformation, vira    46 #> 33: mammalian cell gene mutat   104 #> 34: Forward and reverse gene      4 #> 35:  Spot test, gene mutation     4 #> 36: bacterial forward mutatio     4 #> 37: sister chromatid exchange    50 #> 38: bacteriophage induction i     1 #> 39: DNA damage, gene mutation     1 #> 40: chromosome aberration stu     1 #> 41: in vitro mammalian cell t     2 #> 42: Forward gene mutation at      6 #> 43:       Cell transformation    11 #> 44: Forward and reverse gene      7 #> 45: Forward gene mutation at     10 #> 46: chromosome aberration ass    24 #> 47:     Drosophila SLRL assay    20 #> 48: Salmonella and Escherichi     4 #> 49: Cytogenetic assay in bone     1 #> 50: Chromosome aberrations in     7 #> 51:     Forward gene mutation    18 #> 52: in vitro mammalian cell g     2 #> 53:           mouse spot test     7 #> 54: Aneuploidy, whole sex chr     4 #> 55: sister chromatid exchange     7 #> 56: Mouse Lymphoma Forward Mu     1 #> 57: Tryptophan reverse gene m    18 #> 58: bacterial gene mutation a    11 #> 59: yeast forward mutation an     4 #> 60: Micronucleus test in vitr     2 #> 61: mitotic recombination ass     6 #> 62: Aneuploidy, chromosome ab     8 #> 63:       cell transformation     2 #> 64: in vitro mammalian cell m    13 #> 65: somatic mutation and reco     3 #> 66: transgenic rodent mutagen     2 #> 67:   yeast cytogenetic assay     2 #> 68: in vitro mammalian cell g     2 #> 69:        bacterial mutation     1 #> 70: bacterial reverse mutatio     5 #> 71: Aneuploidy, partial sex c     2 #> 72: in vitro chromosome aberr     1 #> 73: Cell transformation, focu     2 #> 74: Forward and reverse gene      1 #> 75: gene mutation assay in fu     5 #> 76:       Cell Transformation     1 #> 77: Aneuploidy, sex chromosom     1 #> 78: Forward and reverse gene      1 #> 79: E. coli K-12 DNA repair h     1 #> 80: Chromosomal aberration as     2 #> 81:          forward mutation     1 #> 82: mammalian cell gene mutat     1 #> 83:     Mitotic recombination     1 #>                     assayType     N natadb_genetox_details[assayCategory == 'ND', .N, by = .(assayType)] #>                    assayType     N #>                       <char> <int> #> 1:                   Overall    16 #> 2: In vivo carcinogenicity s    66 #> 3:                transgenic    18 natadb_genetox_details[assayCategory == 'in vivo', .N, by = .(assayType)] #>                     assayType     N #>                        <char> <int> #>  1:        micronucleus assay   105 #>  2: Unscheduled DNA synthesis    27 #>  3: rodent dominant lethal as    31 #>  4:                 InVivoUDS    33 #>  5:                  InVivoCA    37 #>  6:      Dominant lethal test    14 #>  7: Unscheduled DNA synthesis     5 #>  8: In Vivo Chromosome Aberra     5 #>  9: In Vivo Mammalian Mutagen     6 #> 10:      In Vivo Micronucleus    11 #> 11:           InVivoDNADamage    23 #> 12: in vivo micronucleus (mou    51 #> 13:          Sperm morphology    25 #> 14:               DNA Binding     1 #> 15: unscheduled DNA synthesis    18 #> 16:     in vivo comet (mouse)     4 #> 17: Chromosome aberrations in     9 #> 18:       in vivo comet (rat)     3 #> 19: in vivo micronucleus (rat     9 #> 20: mammalian erythrocyte mic     2 #> 21: heritable translocation a     2 #> 22: Micronucleus and sister c     2 #> 23: bone marrow chromosome ab     1 #> 24: Chromosome aberrations, i     2 #> 25:      DNA adduct formation     1 #> 26:      DNA Covalent Binding     1 #> 27:     mammalian comet assay     6 #> 28: mammalian germ cell cytog     1 #>                     assayType     N ccl4_genetox_details[, .(DTXSIDs = length(unique(dtxsid))), by = .(assayResult)] #>    assayResult DTXSIDs #>         <char>   <int> #> 1:    negative      64 #> 2:    positive      53 #> 3:   equivocal      15 natadb_genetox_details[, .(DTXSIDs = length(unique(dtxsid))),                         by = .(assayResult)] #>    assayResult DTXSIDs #>         <char>   <int> #> 1:    negative     141 #> 2:    positive     130 #> 3:   equivocal      48 ccl4_genetox_details[, .(is_positive = any(assayResult == 'positive')),                       by = .(dtxsid)][is_positive == TRUE, dtxsid] #>  [1] \"DTXSID0020153\" \"DTXSID0020573\" \"DTXSID0020600\" \"DTXSID0020814\" \"DTXSID0021464\" \"DTXSID0021541\" #>  [7] \"DTXSID0024341\" \"DTXSID1021407\" \"DTXSID1021740\" \"DTXSID1021798\" \"DTXSID1024338\" \"DTXSID1026164\" #> [13] \"DTXSID1031040\" \"DTXSID2021028\" \"DTXSID2021317\" \"DTXSID2021731\" \"DTXSID3020203\" \"DTXSID3020702\" #> [19] \"DTXSID3020833\" \"DTXSID3024869\" \"DTXSID3031864\" \"DTXSID4020533\" \"DTXSID4021503\" \"DTXSID4022361\" #> [25] \"DTXSID4022367\" \"DTXSID5020023\" \"DTXSID5020576\" \"DTXSID5020601\" \"DTXSID5021207\" \"DTXSID5024182\" #> [31] \"DTXSID5039224\" \"DTXSID6020301\" \"DTXSID6021030\" \"DTXSID6021032\" \"DTXSID6022422\" \"DTXSID7020005\" #> [37] \"DTXSID7020215\" \"DTXSID7020637\" \"DTXSID7021029\" \"DTXSID8020044\" \"DTXSID8020090\" \"DTXSID8020832\" #> [43] \"DTXSID8021062\" \"DTXSID8023846\" \"DTXSID8023848\" \"DTXSID8025541\" \"DTXSID8031865\" \"DTXSID9020243\" #> [49] \"DTXSID9021390\" \"DTXSID9021427\" \"DTXSID9022366\" \"DTXSID9023380\" \"DTXSID9023914\" natadb_genetox_details[, .(is_positive = any(assayResult == 'positive')),                        by = .(dtxsid)][is_positive == TRUE, dtxsid] #>   [1] \"DTXSID0020153\" \"DTXSID0020448\" \"DTXSID0020523\" \"DTXSID0020529\" \"DTXSID0020600\" #>   [6] \"DTXSID0020868\" \"DTXSID0021381\" \"DTXSID0021383\" \"DTXSID0021541\" \"DTXSID0021834\" #>  [11] \"DTXSID0021965\" \"DTXSID0024187\" \"DTXSID0039227\" \"DTXSID0039229\" \"DTXSID1020148\" #>  [16] \"DTXSID1020302\" \"DTXSID1020306\" \"DTXSID1020431\" \"DTXSID1020512\" \"DTXSID1020516\" #>  [21] \"DTXSID1020566\" \"DTXSID1021374\" \"DTXSID1021798\" \"DTXSID1021827\" \"DTXSID1022057\" #>  [26] \"DTXSID1023786\" \"DTXSID1024045\" \"DTXSID1026164\" \"DTXSID1049641\" \"DTXSID2020137\" #>  [31] \"DTXSID2020262\" \"DTXSID2020507\" \"DTXSID2020682\" \"DTXSID2020844\" \"DTXSID2021284\" #>  [36] \"DTXSID2021286\" \"DTXSID2021319\" \"DTXSID2021658\" \"DTXSID2021731\" \"DTXSID2021781\" #>  [41] \"DTXSID3020203\" \"DTXSID3020257\" \"DTXSID3020413\" \"DTXSID3020415\" \"DTXSID3020596\" #>  [46] \"DTXSID3020679\" \"DTXSID3020702\" \"DTXSID3020833\" \"DTXSID3021431\" \"DTXSID3025091\" #>  [51] \"DTXSID3039242\" \"DTXSID4020161\" \"DTXSID4020298\" \"DTXSID4020402\" \"DTXSID4020533\" #>  [56] \"DTXSID4020583\" \"DTXSID4020874\" \"DTXSID4020901\" \"DTXSID4021006\" \"DTXSID4021056\" #>  [61] \"DTXSID4021395\" \"DTXSID4039231\" \"DTXSID5020023\" \"DTXSID5020027\" \"DTXSID5020029\" #>  [66] \"DTXSID5020071\" \"DTXSID5020316\" \"DTXSID5020449\" \"DTXSID5020491\" \"DTXSID5020601\" #>  [71] \"DTXSID5020607\" \"DTXSID5020865\" \"DTXSID5021124\" \"DTXSID5021207\" \"DTXSID5021380\" #>  [76] \"DTXSID5021386\" \"DTXSID5024055\" \"DTXSID5024059\" \"DTXSID5039224\" \"DTXSID6020145\" #>  [81] \"DTXSID6020307\" \"DTXSID6020353\" \"DTXSID6020432\" \"DTXSID6020438\" \"DTXSID6020515\" #>  [86] \"DTXSID6020569\" \"DTXSID6020981\" \"DTXSID6021828\" \"DTXSID6022422\" \"DTXSID6023947\" #>  [91] \"DTXSID6023949\" \"DTXSID7020005\" \"DTXSID7020009\" \"DTXSID7020267\" \"DTXSID7020637\" #>  [96] \"DTXSID7020689\" \"DTXSID7020710\" \"DTXSID7020716\" \"DTXSID7021029\" \"DTXSID7021100\" #> [101] \"DTXSID7021106\" \"DTXSID7021318\" \"DTXSID7021360\" \"DTXSID7021368\" \"DTXSID7021948\" #> [106] \"DTXSID7024166\" \"DTXSID7024370\" \"DTXSID7024532\" \"DTXSID7025180\" \"DTXSID7026156\" #> [111] \"DTXSID8020090\" \"DTXSID8020173\" \"DTXSID8020250\" \"DTXSID8020599\" \"DTXSID8020759\" #> [116] \"DTXSID8020832\" \"DTXSID8021195\" \"DTXSID8021197\" \"DTXSID8021432\" \"DTXSID8021434\" #> [121] \"DTXSID8021438\" \"DTXSID8024286\" \"DTXSID9020168\" \"DTXSID9020243\" \"DTXSID9020247\" #> [126] \"DTXSID9020293\" \"DTXSID9020827\" \"DTXSID9021138\" \"DTXSID9021261\" \"DTXSID9041522\" ccl4_genetox_details[dtxsid == 'DTXSID0020153', .(Number = .N),                       by = .(assayResult)] #>    assayResult Number #>         <char>  <int> #> 1:    negative      5 #> 2:    positive     22 #> 3:   equivocal      1 ccl4_genetox_details[dtxsid == 'DTXSID0020153' & assayResult == 'positive',                       .(Number_of_assays = .N), by = .(assayType)][order(-Number_of_assays),] #>                     assayType Number_of_assays #>                        <char>            <int> #>  1: bacterial reverse mutatio                3 #>  2:                      Ames                3 #>  3:                 InVitroCA                2 #>  4:                InVitroMLA                2 #>  5: Rec-assay, DNA effects (b                2 #>  6: Sister-chromatid exchange                2 #>  7:                   Overall                1 #>  8:                 InVitroMN                1 #>  9: Cell transformation, clon                1 #> 10: Histidine reverse gene mu                1 #> 11: Mitotic recombination or                 1 #> 12: Rec-assay, spot test, DNA                1 #> 13: Unscheduled DNA synthesis                1 #> 14: In vivo carcinogenicity s                1"},{"path":"https://usepa.github.io/ctxR/dev/articles/Hazard.html","id":"review-hazard-data-for-chemical-lists","dir":"Articles","previous_headings":"Example Use Case: Comparing Hazard Data Across Chemical Lists","what":"Review Hazard Data for Chemical Lists","title":"ctxR: Hazard API","text":"Hazard data associated chemicals chemical list can retrieved. chemical, potentially hundreds rows hazard data, returned results much larger API endpoints. model one structure query chemicals CCL4 NATADB, leave reader explore data similar fashion previous examples. Next, may helpful examine dimensions column names output.","code":"ccl4_hazard <- get_hazard_by_dtxsid_batch(DTXSID = ccl4$dtxsid) natadb_hazard <- get_hazard_by_dtxsid_batch(DTXSID = natadb$dtxsid) dim(ccl4_hazard) dim(natadb_hazard) colnames(ccl4_hazard) head(ccl4_hazard)"},{"path":"https://usepa.github.io/ctxR/dev/articles/Hazard.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"ctxR: Hazard API","text":"vignette, variety functions access different types data found Hazard endpoints CTX APIs explored. exploration exhaustive, provides basic introduction one may access data work . Additional endpoints corresponding functions exist encourage user explore keeping mind examples contained vignette.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Introduction.html","id":"introduction-to-the-ccd","dir":"Articles","previous_headings":"","what":"Introduction to the CCD","title":"ctxR: Utilities for Interacting with the CTX APIs in R","text":"Accessing chemical data vital step many workflows related chemical, biological, environmental modeling. many resources available one can pull data, CompTox Chemicals Dashboard (CCD), built maintained United States Environmental Protection Agency, particularly well-designed suitable purposes. Originally introduced CompTox Chemistry Dashboard: community data resource environmental chemistry, CCD contains information 1.2 million chemicals May 2024 cited 612 times according CrossRef. learn CCD, please visit page CCD. CCD includes chemical information many different domains, including physicochemical, environmental fate transport, exposure, usage, vivo toxicity, vitro bioassay data. information data sources current versions, please review CCD Release Notes. provides graphical user interface allows interactive user experience easy navigate. , users can explore data available CCD without programming background. CCD can queried one chemical time using batch search.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Introduction.html","id":"searching-one-chemical-at-a-time-single-substance-search","dir":"Articles","previous_headings":"Introduction to the CCD","what":"Searching one chemical at a time (single-substance search)","title":"ctxR: Utilities for Interacting with the CTX APIs in R","text":"single-substance search, user enters full partial chemical identifier (name, CASRN, InChiKey, DSSTox ID) search box CCD homepage. Autocomplete can provide list possible matches. Figure 1 shows example: CCD landing page chemical Bisphenol . page generated Bisphenol links represent chemicals. chemical CCD page similar , varying levels accessible based information available. different domains data available chemical shown tabs left side page: example, “Physchem Prop.” (physico-chemical properties), “Env. Fate/Transport” (environmental fate transport data), “Hazard Data” (vivo hazard toxicity data), among others.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Introduction.html","id":"batch-search","dir":"Articles","previous_headings":"Introduction to the CCD","what":"Batch search","title":"ctxR: Utilities for Interacting with the CTX APIs in R","text":"batch search, user enters list search inputs, separated new lines, search box. user selects type(s) inputs selecting one checkboxes – include chemical identifiers, monoisotopic masses, molecular formulas. , user selects “Display Chemicals” display list substances matching batch-search inputs, “Choose Export Options” choose options exporting batch-search results spreadsheet. exported spreadsheet may include data domains available individual substance’s CCD page. user can download selected information various formats, Excel (.xlsx), comma-separated values (.csv), different types chemical table files (.e.g, MOL). web interface batch search allows input 10,000 identifiers time. user wants retrieve information 10,000 chemicals, identifiers need separated multiple batches searched separately.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Introduction.html","id":"challenges-of-web-based-dashboard-search","dir":"Articles","previous_headings":"Introduction to the CCD","what":"Challenges of web-based dashboard search","title":"ctxR: Utilities for Interacting with the CTX APIs in R","text":"Practicing researchers may follow workflow looks something like : Start dataset includes chemical identifiers interest. may include chemical names, Chemical Abstract Service Registry Numbers (CASRNs), Distributed Searchable Structure-Toxicity Database (DSSTox) identifiers, InChIKeys. Export chemical identifiers spreadsheet. Often, done importing data environment R Python, order data wrangling (e.g., select unique substance identfiers; clean improperly-formatted CASRNs; etc.). , identifiers saved spreadsheet (Excel, .csv, .txt file), one chemical identifier per row. Copy paste chemical identifiers spreadsheet CCD Batch Search box. 10,000 total chemical identifiers, divide batches 10,000 less, search batch separately. Choose desired export options CCD Batch Search page. Download exported spreadsheet CCD data. default, downloaded spreadsheet given file name includes timestamp download. Repeat steps 3-5 batch 10,000 identifiers produced step 2. Import downloaded spreadsheet(s) CCD data analysis tool using (e.g. R Python). Merge table(s) downloaded CCD data original dataset interest. Proceed research-related data analysis using chemical data downloaded CCD (e.g., statistical modeling, visualization, etc.) workflow steps requires manual interaction search download process, risk human error inevitably creeps . real-world possibilities (authors can neither confirm deny personally committed errors): Researchers copy/paste wrong identifiers CCD batch search, especially 10,000 identifiers need divided separate batches. researcher opens resaves CSV file using Microsoft Excel, information appears date-like format automatically converted date (unless researcher recently-updated version Excel selected option Settings stop Excel auto-detecting dates). behavior long identified problem genomics, gene names can appear date-like Excel (Abeysooriya et al. 2021). also affects cheminformatics, chemical identifiers can appear date-like Excel. example, valid CASRN “1990-07-4” automatically converted “07/04/1990” (Excel set use MM/DD/YYYY date formats). CCD batch search recognize “07/04/1990” valid chemical identifier unable return chemical data. Researchers accidentally rename downloaded CCD data file overwrite previous download, e.g. searching multiple batches identifiers. Researchers mistakenly import wrong CCD download file back analysis environment e.g. searching multiple batches identifiers. Moreover, manual stages kind workflow also non-transparent easily reproducible. Utilizing APIs data exploration retrieval can alleviate concerns.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Introduction.html","id":"introduction-to-the-ctx-apis","dir":"Articles","previous_headings":"","what":"Introduction to the CTX APIs","title":"ctxR: Utilities for Interacting with the CTX APIs in R","text":"Recently, US EPA’s Center Computational Toxicology Exposure (CCTE) developed set Application Programming Interfaces (APIs) allows programmatic access CCD, bypassing manual steps web-based batch search workflow. APIs effectively automate process accessing downloading data populates CCD. Computational Toxicology Exposure (CTX) APIs publicly available cost user. However, order use CTX APIs, users must individual API key. API key uniquely identifies user CCD servers verifies permission access database. Getting API key free, requires contacting API support team ccte_api@epa.gov. APIs organized sets “endpoints” data domains: Chemical, Hazard, Bioactivity. endpoint provides access specific set information data, e.g. physical-chemical properties chemical user specifies. view Chemical API web interface pictured . left side domain’s web interface page, several different tabs listed depending information requests available within domain. Figure 4, Chemical Details Resource endpoint provides basic chemical information; Chemical Property Resource endpoint provides comprehensive physico-chemical property information; Chemical Fate Resource endpoint provides chemical fate transport information; .","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Introduction.html","id":"authentication","dir":"Articles","previous_headings":"Introduction to the CTX APIs","what":"Authentication","title":"ctxR: Utilities for Interacting with the CTX APIs in R","text":"Authentication, found upper left tab web interface page, required use APIs. authenticate API web interface, user must input unique API key.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Introduction.html","id":"request-construction","dir":"Articles","previous_headings":"Introduction to the CTX APIs","what":"Request Construction","title":"ctxR: Utilities for Interacting with the CTX APIs in R","text":"APIs effectively automate process accessing downloading data populates CCD. APIs via requests using Hypertext Transfer Protocol (HTTP) enables communication clients (e.g. computer) servers (e.g. CCD). CTX API web interface, colored boxes next endpoint indicate type associated HTTP method. GET used request data specific web resource (e.g. specific URL); POST used send data server create update web resource. CTX APIs, POST requests used perform multiple (batch) searches single API call; GET requests used non-batch searches. need understand details POST GET requests order use API. Let’s consider constructing API request Get data dtxsid Chemical Details Resource. web interface two subheadings: Path Parameters contain user-specified parameters required order tell API URL (web address) access. case, required parameter string DTXSID identifying chemical searched. Query-String Parameters contain user-specific parameters (usually optional) tell API specific type(s) information download specified URL. case, optional parameter projection parameter, string can take one five values (chemicaldetailall, chemicaldetailstandard, chemicalidentifier, chemicalstructure, ntatoolkit). Depending value string, API can return different sets information chemical. projection parameter left blank, default set chemical information returned. default return format displayed includes variety fields data types represented. Pictured example returned Details Bisphenol chemicaldetailstandard value projection selected.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Introduction.html","id":"introduction-to-ctxr","dir":"Articles","previous_headings":"","what":"Introduction to ctxR","title":"ctxR: Utilities for Interacting with the CTX APIs in R","text":"Formatting http request necessarily intuitive worth time someone already familiar process, endpoints may provide resource many require significant investment time energy learn use. However, solution form R package ctxR. ctxR developed streamline process accessing information available CTX APIs without requiring prior knowledge use APIs.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Introduction.html","id":"package-settings","dir":"Articles","previous_headings":"Introduction to ctxR","what":"Package Settings","title":"ctxR: Utilities for Interacting with the CTX APIs in R","text":"Users can run library(ctxR) install CRAN install development version ctxR like :","code":"if (!library(devtools, logical.return = TRUE)){   install.packages(devtools)   library(devtools)}  devtools::install_github(\"USEPA/ctxR\")"},{"path":"https://usepa.github.io/ctxR/dev/articles/Introduction.html","id":"api-key-storage","dir":"Articles","previous_headings":"Introduction to ctxR","what":"API Key Storage","title":"ctxR: Utilities for Interacting with the CTX APIs in R","text":"previously described, user must API key use order access CTX APIs. FREE API key can obtained emailing CTX API Admins. example code, API key stored variable my_key. general use package, user may use function register_ctx_api_key() store API key current session permanently access across sessions. API key stored, default display setting turned protection. change , use following functions demonstrated. Finally, access key, use ctx_key() function.","code":"my_key <- 'YOUR_CTX_API_key' # This stores the key in the current session register_ctx_api_key(key = '<YOUR API KEY>')  # This stores the key across multiple sessions and only needs to be run once. If the key changes, rerun this with the new key. register_ctx_api_key(key = '<YOUR API KEY>', write = TRUE) # To show the API key ctxR_show_api_key() getOption('ctxR')$display_api_key  # To hide the API key ctxR_hide_api_key() getOption('ctxR')$display_api_key ctx_key()"},{"path":"https://usepa.github.io/ctxR/dev/articles/Introduction.html","id":"quick-start-examples","dir":"Articles","previous_headings":"","what":"Quick Start Examples","title":"ctxR: Utilities for Interacting with the CTX APIs in R","text":"quick start examples, demonstrate ease* retrieving information across endpoints Bisphenol using ctxR. *contrast approach using CCD API web interface. Tables output example filtered display first rows data. additional examples comprehensive documentation endpoint, consider reviewing ctxR vignettes data domain interest.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Introduction.html","id":"chemical-api","dir":"Articles","previous_headings":"Quick Start Examples","what":"Chemical API","title":"ctxR: Utilities for Interacting with the CTX APIs in R","text":"section, several ctxR functions used access different types information CTX Chemical API.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Introduction.html","id":"chemical-details-resource","dir":"Articles","previous_headings":"Quick Start Examples > Chemical API","what":"Chemical Details Resource","title":"ctxR: Utilities for Interacting with the CTX APIs in R","text":"function get_chemical_details() takes either DTXSID DTXCID chemical user-specific API key. Relevant chemical details Bisphenol , DTXSID “DTXSID7020182”, obtained data.table.","code":"bpa_details <- get_chemical_details(DTXSID = 'DTXSID7020182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Introduction.html","id":"chemical-property-resource","dir":"Articles","previous_headings":"Quick Start Examples > Chemical API","what":"Chemical Property Resource","title":"ctxR: Utilities for Interacting with the CTX APIs in R","text":"function get_chem_info() returns phys-chem properties selected chemical, can filtered ‘experimental’ ‘predicted’ desired. phys-chem properties returned Bisphenol . Request can filtered return experimental results .","code":"bpa_info <- get_chem_info(DTXSID = \"DTXSID7020182\") bpa_info_experimental <- get_chem_info(DTXSID = \"DTXSID7020182\", type = 'experimental')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Introduction.html","id":"hazard-api","dir":"Articles","previous_headings":"Quick Start Examples","what":"Hazard API","title":"ctxR: Utilities for Interacting with the CTX APIs in R","text":"section, several ctxR functions used access different types information CTX Hazard API.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Introduction.html","id":"hazard-resource","dir":"Articles","previous_headings":"Quick Start Examples > Hazard API","what":"Hazard Resource","title":"ctxR: Utilities for Interacting with the CTX APIs in R","text":"function get_hazard_by_dtxsid() retrieves hazard data (human ecological toxicity data) given chemical based input DTXSID. get_human_hazard_by_dtxsid() get_ecotox_hazard_by_dtxsid() can filter returned hazard results given chemical human ecological toxicity data, respectively. hazard data returned Bisphenol : Request can refined return results human hazard, EcoTox results.","code":"bpa_hazard <- get_hazard_by_dtxsid(DTXSID = 'DTXSID7020182') bpa_human_hazard <- get_human_hazard_by_dtxsid(DTXSID = 'DTXSID7020182') bpa_eco_hazard <- get_ecotox_hazard_by_dtxsid(DTXSID = 'DTXSID7020182')"},{"path":"https://usepa.github.io/ctxR/dev/articles/Introduction.html","id":"bioactivity-api","dir":"Articles","previous_headings":"Quick Start Examples","what":"Bioactivity API","title":"ctxR: Utilities for Interacting with the CTX APIs in R","text":"section, several ctxR functions used access different types information CTX Bioactivity API.","code":""},{"path":"https://usepa.github.io/ctxR/dev/articles/Introduction.html","id":"bioactivity-resource","dir":"Articles","previous_headings":"Quick Start Examples > Bioactivity API","what":"Bioactivity Resource","title":"ctxR: Utilities for Interacting with the CTX APIs in R","text":"function get_bioactivity_details() retrieves bioactivity data given chemical based input DTXSID. function get_bioactivity_details() can also used retrieve bioactivity data given endpoint, based input AEID (assay endpoint identifier).","code":"bpa_bioactivity <- get_bioactivity_details(DTXSID = 'DTXSID7020182') assay_id_search <- get_bioactivity_details(AEID = 42)"},{"path":"https://usepa.github.io/ctxR/dev/articles/Introduction.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"ctxR: Utilities for Interacting with the CTX APIs in R","text":"ctxR package provides streamlined approach accessing data CCD users little prior experience using APIs. additional examples comprehensive documentation endpoint, consider reviewing ctxR vignettes data domain interest.","code":""},{"path":"https://usepa.github.io/ctxR/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paul Kruse. Author, maintainer. Caroline Ring. Author. Madison Feshuk. Contributor. Carter Thunes. Contributor. Jason Brown. Contributor.","code":""},{"path":"https://usepa.github.io/ctxR/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kruse P, Ring C (2024). ctxR: Utilities Interacting 'CTX' APIs. R package version 1.0.0.9000, https://usepa.github.io/ctxR/, https://github.com/USEPA/ctxR.","code":"@Manual{,   title = {ctxR: Utilities for Interacting with the 'CTX' APIs},   author = {Paul Kruse and Caroline Ring},   year = {2024},   note = {R package version 1.0.0.9000, https://usepa.github.io/ctxR/},   url = {https://github.com/USEPA/ctxR}, }"},{"path":"https://usepa.github.io/ctxR/dev/index.html","id":"ctxr-utilities-for-interacting-with-the-ctx-apis","dir":"","previous_headings":"","what":"Utilities for Interacting with the CTX APIs","title":"Utilities for Interacting with the CTX APIs","text":"Package website: release | dev","code":""},{"path":"https://usepa.github.io/ctxR/dev/index.html","id":"welcome-to-the-github-repository-for-the-ctxr-package","dir":"","previous_headings":"","what":"Welcome to the GitHub repository for the ctxR package","title":"Utilities for Interacting with the CTX APIs","text":"ctxR developed streamline process accessing information available Computational Toxicology Exposure (CTX) APIs without requiring prior knowledge use APIs. Chemical, hazard, bioactivity, exposure data available CTX APIs. data also available CompTox Chemical Dashboard (CCD) within Computational Toxicology Exposure Online Resources. interested contributing want report bug, please submit issue start discussion. See CONTRIBUTING information. install current development version, run following command: Disclaimer: Users don’t need API key install ctxR, need supply API key use ctxR access data. FREE API key can obtained emailing CTX API Admins.","code":"devtools::install_github(\"USEPA/ctxR\")"},{"path":"https://usepa.github.io/ctxR/dev/reference/bioactivity_api_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Bioactivity API Server url — bioactivity_api_server","title":"Bioactivity API Server url — bioactivity_api_server","text":"section url used Bioactivity API Endpoints","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/bioactivity_api_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bioactivity API Server url — bioactivity_api_server","text":"","code":"bioactivity_api_server"},{"path":"https://usepa.github.io/ctxR/dev/reference/bioactivity_api_server.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bioactivity API Server url — bioactivity_api_server","text":"object class character length 1.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/check_existence_by_dtxsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Check existence by DTXSID — check_existence_by_dtxsid","title":"Check existence by DTXSID — check_existence_by_dtxsid","text":"Check existence DTXSID","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/check_existence_by_dtxsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check existence by DTXSID — check_existence_by_dtxsid","text":"","code":"check_existence_by_dtxsid(   DTXSID = NULL,   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/check_existence_by_dtxsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check existence by DTXSID — check_existence_by_dtxsid","text":"DTXSID chemical identifier DTXSID API_key user-specific API key Server root address API endpoint verbose logical indicating whether \"progress report\" given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/check_existence_by_dtxsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check existence by DTXSID — check_existence_by_dtxsid","text":"data.table information whether input DTXSID valid, find information chemical DTXSID valid.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/check_existence_by_dtxsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check existence by DTXSID — check_existence_by_dtxsid","text":"","code":"if (FALSE) { # DTXSID for bpa bpa <- check_existence_by_dtxsid('DTXSID7020182') # False DTXSID false_res <- check_existence_by_Dtxsid('DTXSID7020182f') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/check_existence_by_dtxsid_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Check existence by DTXSID batch — check_existence_by_dtxsid_batch","title":"Check existence by DTXSID batch — check_existence_by_dtxsid_batch","text":"Check existence DTXSID batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/check_existence_by_dtxsid_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check existence by DTXSID batch — check_existence_by_dtxsid_batch","text":"","code":"check_existence_by_dtxsid_batch(   DTXSID = NULL,   API_key = NULL,   rate_limit = 0L,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/check_existence_by_dtxsid_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check existence by DTXSID batch — check_existence_by_dtxsid_batch","text":"DTXSID chemical identifier DTXSIDs API_key user-specific API key rate_limit Number seconds wait request. Server root address API endpoint verbose logical indicating whether \"progress report\" given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/check_existence_by_dtxsid_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check existence by DTXSID batch — check_existence_by_dtxsid_batch","text":"data.table information detailing valid invalid DTXSIDs.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/check_existence_by_dtxsid_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check existence by DTXSID batch — check_existence_by_dtxsid_batch","text":"","code":"if (FALSE) { dtxsids <- c('DTXSID7020182F', 'DTXSID7020182', 'DTXSID0020232F') existence <- check_existence_by_dtxsid_batch(DTXSID = dtxsids) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_api_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Chemical API Server url — chemical_api_server","title":"Chemical API Server url — chemical_api_server","text":"section url used Chemical API Endpoints","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_api_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chemical API Server url — chemical_api_server","text":"","code":"chemical_api_server"},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_api_server.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Chemical API Server url — chemical_api_server","text":"object class character length 1.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_contains.html","id":null,"dir":"Reference","previous_headings":"","what":"Chemical contains — chemical_contains","title":"Chemical contains — chemical_contains","text":"Chemical contains","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_contains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chemical contains — chemical_contains","text":"","code":"chemical_contains(   word = NULL,   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE,   top = NULL )"},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_contains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chemical contains — chemical_contains","text":"word character string chemical name portion chemical name API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given. top number results return multiple results available","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_contains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chemical contains — chemical_contains","text":"data.frame chemicals related values matching query parameters","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_contains.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Chemical contains — chemical_contains","text":"Paul Kruse, Kristin Issacs","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_contains.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chemical contains — chemical_contains","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemicals that contain substring substring_chemicals <- chemical_contains(word = 'TXSID702018') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_contains_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Chemical contains batch search — chemical_contains_batch","title":"Chemical contains batch search — chemical_contains_batch","text":"Chemical contains batch search","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_contains_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chemical contains batch search — chemical_contains_batch","text":"","code":"chemical_contains_batch(   word_list = NULL,   API_key = NULL,   rate_limit = 0L,   verbose = FALSE,   top = NULL )"},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_contains_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chemical contains batch search — chemical_contains_batch","text":"word_list list character strings chemical names portion chemical names API_key User-specific API key rate_limit Number seconds wait request verbose logical indicating “progress report” given. top number results return multiple results available","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_contains_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chemical contains batch search — chemical_contains_batch","text":"named list data.frames chemicals related values matching query parameters. data.frames 'valid' entry contain chemical information successful requests data.frames 'invalid' entry contain data.frames chemical name suggestions based input search values.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_contains_batch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Chemical contains batch search — chemical_contains_batch","text":"Paul Kruse, Kristin Issacs","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_contains_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chemical contains batch search — chemical_contains_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemicals that contain substrings substring_chemicals <- chemical_contains_batch(word_list = c('TXDIS702018',                                                              'DTXSID70201')) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_equal.html","id":null,"dir":"Reference","previous_headings":"","what":"Chemical equal — chemical_equal","title":"Chemical equal — chemical_equal","text":"Chemical equal","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_equal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chemical equal — chemical_equal","text":"","code":"chemical_equal(   word = NULL,   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_equal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chemical equal — chemical_equal","text":"word character string chemical name portion chemical name API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_equal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chemical equal — chemical_equal","text":"data.frame chemicals related values matching query parameters","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_equal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Chemical equal — chemical_equal","text":"Paul Kruse, Kristin Issacs","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_equal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chemical equal — chemical_equal","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemicals with matching DTXSID bpa_dtxsid <- chemical_equal(word = 'DTXSID7020182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_equal_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Chemical equal batch search — chemical_equal_batch","title":"Chemical equal batch search — chemical_equal_batch","text":"Chemical equal batch search","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_equal_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chemical equal batch search — chemical_equal_batch","text":"","code":"chemical_equal_batch(   word_list = NULL,   API_key = NULL,   rate_limit = 0L,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_equal_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chemical equal batch search — chemical_equal_batch","text":"word_list list character strings chemical names portion chemical names, DTXSIDs, CASRNs, InChIKeys. API_key User-specific API key rate_limit Number seconds wait request verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_equal_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chemical equal batch search — chemical_equal_batch","text":"named list data.tables chemicals related values matching query parameters. list contains two entries, 'valid' 'invalid'; 'valid', contains data.table results searched chemical found databases; 'invalid' contains data.table 'suggestions' searched valued return chemical.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_equal_batch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Chemical equal batch search — chemical_equal_batch","text":"Paul Kruse, Kristin Issacs","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_equal_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chemical equal batch search — chemical_equal_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemicals that match input strings bpa <- chemical_equal_batch(word_list = c('DTXSID7020182', 'DTXCID30182')) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_starts_with.html","id":null,"dir":"Reference","previous_headings":"","what":"Chemical starts with — chemical_starts_with","title":"Chemical starts with — chemical_starts_with","text":"Chemical starts ","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_starts_with.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chemical starts with — chemical_starts_with","text":"","code":"chemical_starts_with(   word = NULL,   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE,   top = NULL )"},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_starts_with.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chemical starts with — chemical_starts_with","text":"word character string chemical name portion chemical name API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given. top number results return multiple results available","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_starts_with.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chemical starts with — chemical_starts_with","text":"data.frame chemicals related values matching query parameters","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_starts_with.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Chemical starts with — chemical_starts_with","text":"Paul Kruse, Kristin Issacs","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_starts_with.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chemical starts with — chemical_starts_with","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemicals that start with a fragment DTXSID dtxsid_fragment <- chemical_starts_with(word = 'DTXSID702018') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_starts_with_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Chemical starts with batch search — chemical_starts_with_batch","title":"Chemical starts with batch search — chemical_starts_with_batch","text":"Chemical starts batch search","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_starts_with_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chemical starts with batch search — chemical_starts_with_batch","text":"","code":"chemical_starts_with_batch(   word_list = NULL,   API_key = NULL,   rate_limit = 0L,   verbose = FALSE,   top = NULL )"},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_starts_with_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chemical starts with batch search — chemical_starts_with_batch","text":"word_list list character strings chemical names portion chemical names API_key User-specific API key rate_limit Number seconds wait request verbose logical indicating “progress report” given. top number results return multiple results available","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_starts_with_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chemical starts with batch search — chemical_starts_with_batch","text":"named list data.frames chemicals related values matching query parameters. data.frames 'valid' entry contain chemical information successful requests data.frames 'invalid' entry contain data.frames chemical name suggestions based input search values.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_starts_with_batch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Chemical starts with batch search — chemical_starts_with_batch","text":"Paul Kruse, Kristin Issacs","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/chemical_starts_with_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chemical starts with batch search — chemical_starts_with_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemicals that start with given substrings bpa_substrings <- chemical_starts_with_batch(word_list = c('DTXSID702018',                                                            'DTXCID3018')) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/create_data.table_chemical_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Create chemical details data.table helper function — create_data.table_chemical_details","title":"Create chemical details data.table helper function — create_data.table_chemical_details","text":"Create chemical details data.table helper function","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/create_data.table_chemical_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create chemical details data.table helper function — create_data.table_chemical_details","text":"","code":"create_data.table_chemical_details(index = -1)"},{"path":"https://usepa.github.io/ctxR/dev/reference/create_data.table_chemical_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create chemical details data.table helper function — create_data.table_chemical_details","text":"index Determine format used.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/create_data.table_chemical_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create chemical details data.table helper function — create_data.table_chemical_details","text":"empty data.table columns matching expected format get_chemical_details API call.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/create_hazard_data.table.html","id":null,"dir":"Reference","previous_headings":"","what":"Hazard data.table helper function — create_hazard_data.table","title":"Hazard data.table helper function — create_hazard_data.table","text":"Hazard data.table helper function","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/create_hazard_data.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hazard data.table helper function — create_hazard_data.table","text":"","code":"create_hazard_data.table()"},{"path":"https://usepa.github.io/ctxR/dev/reference/create_hazard_data.table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hazard data.table helper function — create_hazard_data.table","text":"data.table used various functions wrap hazard API endpoints.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/create_hazard_data.table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hazard data.table helper function — create_hazard_data.table","text":"","code":"if (FALSE) { hazard_dt <- create_hazard_data.table() }"},{"path":"https://usepa.github.io/ctxR/dev/reference/ctxR_options.html","id":null,"dir":"Reference","previous_headings":"","what":"ctxR Options — ctxR_options","title":"ctxR Options — ctxR_options","text":"ctxR stores options named list R's global options, .e. getOption('ctxR'). currently stores two options, one CCTE credentialing one suppress private API information URLs printed screen web queries placed. , see register_ctx_api_key().","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/ctxR_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ctxR Options — ctxR_options","text":"","code":"set_ctxR_option(...)  has_ctxR_options()  has_ctxR_option(option)"},{"path":"https://usepa.github.io/ctxR/dev/reference/ctxR_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ctxR Options — ctxR_options","text":"... named listing options set option specific option query, e.g. display_api_key","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/ctxR_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ctxR Options — ctxR_options","text":"set_ctxR_option() return value side effect setting options used functions. has_ctxR_option() returns Boolean. has_ctxR_options() returns Boolean.","code":""},{"path":[]},{"path":"https://usepa.github.io/ctxR/dev/reference/ctxR_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ctxR Options — ctxR_options","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Set ctxR options set_ctxR_option('display_api_key' = FALSE) } if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Check if there are options registered to 'ctxR' has_ctxR_options() } if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Check if a specific option is registered for 'ctxR' has_ctxR_option('display_api_key') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/exposure_api_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Exposure API Server url — exposure_api_server","title":"Exposure API Server url — exposure_api_server","text":"section url used Exposure API Endpoints","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/exposure_api_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exposure API Server url — exposure_api_server","text":"","code":"exposure_api_server"},{"path":"https://usepa.github.io/ctxR/dev/reference/exposure_api_server.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Exposure API Server url — exposure_api_server","text":"object class character length 1.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_all_assays.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve all assays — get_all_assays","title":"Retrieve all assays — get_all_assays","text":"Retrieve assays","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_all_assays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve all assays — get_all_assays","text":"","code":"get_all_assays(   API_key = NULL,   Server = bioactivity_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_all_assays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve all assays — get_all_assays","text":"API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_all_assays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve all assays — get_all_assays","text":"data.frame containing assays associated information","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_all_assays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve all assays — get_all_assays","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Retrieve all assays assays <- get_all_assays() }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_all_list_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all list types — get_all_list_types","title":"Get all list types — get_all_list_types","text":"Get list types","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_all_list_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all list types — get_all_list_types","text":"","code":"get_all_list_types(   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_all_list_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all list types — get_all_list_types","text":"API_key user-specific API key. Server root address API endpoint. verbose logical indicating \"progress report\" given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_all_list_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all list types — get_all_list_types","text":"character list types lists.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_all_list_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all list types — get_all_list_types","text":"","code":"if (FALSE) { get_all_list_types() }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_all_public_chemical_lists.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all public chemical lists — get_all_public_chemical_lists","title":"Get all public chemical lists — get_all_public_chemical_lists","text":"Get public chemical lists","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_all_public_chemical_lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all public chemical lists — get_all_public_chemical_lists","text":"","code":"get_all_public_chemical_lists(   Projection = \"\",   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_all_public_chemical_lists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all public chemical lists — get_all_public_chemical_lists","text":"Projection Optional parameter controlling return type. takes values chemicallistall' 'chemicallistname' former default value. API_key user-specific api key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_all_public_chemical_lists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all public chemical lists — get_all_public_chemical_lists","text":"data.frame containing information public chemical lists available CTX chemical api.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_all_public_chemical_lists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all public chemical lists — get_all_public_chemical_lists","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull all chemical lists all_lists <- get_all_public_chemical_lists() }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_annotation_by_aeid.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve annotations for AEID — get_annotation_by_aeid","title":"Retrieve annotations for AEID — get_annotation_by_aeid","text":"Retrieve annotations AEID","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_annotation_by_aeid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve annotations for AEID — get_annotation_by_aeid","text":"","code":"get_annotation_by_aeid(   AEID = NULL,   API_key = NULL,   Server = bioactivity_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_annotation_by_aeid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve annotations for AEID — get_annotation_by_aeid","text":"AEID assay endpoint identifier AEID API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_annotation_by_aeid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve annotations for AEID — get_annotation_by_aeid","text":"data.frame containing annotated assays corresponding input AEID parameter","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_annotation_by_aeid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve annotations for AEID — get_annotation_by_aeid","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Retrieve annotation for an assay annotation <- get_annotation_by_aeid(AEID = 159) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_annotation_by_aeid_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve annotations for AEID batch — get_annotation_by_aeid_batch","title":"Retrieve annotations for AEID batch — get_annotation_by_aeid_batch","text":"Retrieve annotations AEID batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_annotation_by_aeid_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve annotations for AEID batch — get_annotation_by_aeid_batch","text":"","code":"get_annotation_by_aeid_batch(   AEID = NULL,   API_key = NULL,   Server = NULL,   rate_limit = 0L,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_annotation_by_aeid_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve annotations for AEID batch — get_annotation_by_aeid_batch","text":"AEID list AEID identifiers API_key user-specific API key Server root address API endpoint rate_limit Number seconds wait request verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_annotation_by_aeid_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve annotations for AEID batch — get_annotation_by_aeid_batch","text":"named list data.frames containing annotation information assays AEID matching input parameter.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_annotation_by_aeid_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve annotations for AEID batch — get_annotation_by_aeid_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Get annotations for multiple aeids aeid_annotations <- get_annotation_by_aeid_batch(AEID = c(159, 160)) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve bioactivity data from DTXSID, AEID, SPID, or m4id — get_bioactivity_details","title":"Retrieve bioactivity data from DTXSID, AEID, SPID, or m4id — get_bioactivity_details","text":"Retrieve bioactivity data DTXSID, AEID, SPID, m4id","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve bioactivity data from DTXSID, AEID, SPID, or m4id — get_bioactivity_details","text":"","code":"get_bioactivity_details(   DTXSID = NULL,   AEID = NULL,   SPID = NULL,   m4id = NULL,   API_key = NULL,   Server = bioactivity_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve bioactivity data from DTXSID, AEID, SPID, or m4id — get_bioactivity_details","text":"DTXSID chemical identifier DTXSID AEID assay endpoint identifier AEID SPID ChemSpider chemical input m4id chemical identifier m4id API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve bioactivity data from DTXSID, AEID, SPID, or m4id — get_bioactivity_details","text":"data.frame containing bioactivity information chemical assay endpoint identifier matching input parameter.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_details.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve bioactivity data from DTXSID, AEID, SPID, or m4id — get_bioactivity_details","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull BPA bioactivity details bpa <- get_bioactivity_details(DTXSID = 'DTXSID7020182') # Pull assay bioactivity details assay <- get_bioactivity_details(AEID = 159) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_details_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve bioactivity data from DTXSID or AEID batch — get_bioactivity_details_batch","title":"Retrieve bioactivity data from DTXSID or AEID batch — get_bioactivity_details_batch","text":"Retrieve bioactivity data DTXSID AEID batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_details_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve bioactivity data from DTXSID or AEID batch — get_bioactivity_details_batch","text":"","code":"get_bioactivity_details_batch(   DTXSID = NULL,   AEID = NULL,   SPID = NULL,   m4id = NULL,   API_key = NULL,   Server = NULL,   rate_limit = 0L,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_details_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve bioactivity data from DTXSID or AEID batch — get_bioactivity_details_batch","text":"DTXSID list chemical identifier DTXSIDs. AEID list assay endpoint identifiers AEIDs. SPID list ChemSpider chemical inputs m4id list chemical identifier m4ids API_key user-specific API key. Server root address API endpoint rate_limit Number seconds wait request verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_details_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve bioactivity data from DTXSID or AEID batch — get_bioactivity_details_batch","text":"named list data.frames containing bioactivity information chemicals DTXSID assays AEID matching input parameter.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_details_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve bioactivity data from DTXSID or AEID batch — get_bioactivity_details_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull bioactivity details for multiple chemicals dtxsid <- c('DTXSID7020182', 'DTXSID2021315') batch_bioactivity <- get_bioactivity_details_batch(DTXSID = dtxsid) # Pull bioactivity details for multiple assays batch_bioactivity <- get_bioactivity_details_batch(AEID = c(159, 160)) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_endpoint_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Bioactivity API Endpoint status — get_bioactivity_endpoint_status","title":"Bioactivity API Endpoint status — get_bioactivity_endpoint_status","text":"Bioactivity API Endpoint status","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_endpoint_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bioactivity API Endpoint status — get_bioactivity_endpoint_status","text":"","code":"get_bioactivity_endpoint_status()"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_endpoint_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bioactivity API Endpoint status — get_bioactivity_endpoint_status","text":"Status Bioactivity API Endpoints","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_endpoint_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bioactivity API Endpoint status — get_bioactivity_endpoint_status","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") status <- get_bioactivity_endpoint_status() print(status) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve bioactivity summary for AEID — get_bioactivity_summary","title":"Retrieve bioactivity summary for AEID — get_bioactivity_summary","text":"Retrieve bioactivity summary AEID","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve bioactivity summary for AEID — get_bioactivity_summary","text":"","code":"get_bioactivity_summary(   AEID = NULL,   API_key = NULL,   Server = bioactivity_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve bioactivity summary for AEID — get_bioactivity_summary","text":"AEID assay endpoint indentifier AEID API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve bioactivity summary for AEID — get_bioactivity_summary","text":"data.frame containing summary information corresponding input AEID","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve bioactivity summary for AEID — get_bioactivity_summary","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull an assay bioactivity summary aeid_1386 <- get_bioactivity_summary(AEID = 1386) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_summary_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve bioactivity summary data from AEID batch — get_bioactivity_summary_batch","title":"Retrieve bioactivity summary data from AEID batch — get_bioactivity_summary_batch","text":"Retrieve bioactivity summary data AEID batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_summary_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve bioactivity summary data from AEID batch — get_bioactivity_summary_batch","text":"","code":"get_bioactivity_summary_batch(   AEID = NULL,   API_key = NULL,   Server = NULL,   rate_limit = 0L,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_summary_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve bioactivity summary data from AEID batch — get_bioactivity_summary_batch","text":"AEID list AEID identifiers API_key user-specific API key. Server root address API endpoint rate_limit Number seconds wait request verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_summary_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve bioactivity summary data from AEID batch — get_bioactivity_summary_batch","text":"named list data.frames containing bioactivity summary information assays AEID matching input parameter.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_bioactivity_summary_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve bioactivity summary data from AEID batch — get_bioactivity_summary_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Get bioactivity summary for multiple aeids aeids <- get_bioactivity_summary_batch(AEID = c(159, 160)) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_cancer_hazard.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cancer hazard — get_cancer_hazard","title":"Get cancer hazard — get_cancer_hazard","text":"Get cancer hazard","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_cancer_hazard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cancer hazard — get_cancer_hazard","text":"","code":"get_cancer_hazard(   DTXSID = NULL,   API_key = NULL,   Server = hazard_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_cancer_hazard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cancer hazard — get_cancer_hazard","text":"DTXSID chemical identifier DTXSID API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_cancer_hazard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cancer hazard — get_cancer_hazard","text":"data.frame cancer hazard data related input DTXSID.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_cancer_hazard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cancer hazard — get_cancer_hazard","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull cancer hazard data for BPA bpa_cancer <- get_cancer_hazard(DTXSID = 'DTXSID7020182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_cancer_hazard_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cancer hazard batch — get_cancer_hazard_batch","title":"Get cancer hazard batch — get_cancer_hazard_batch","text":"Get cancer hazard batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_cancer_hazard_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cancer hazard batch — get_cancer_hazard_batch","text":"","code":"get_cancer_hazard_batch(   DTXSID = NULL,   API_key = NULL,   rate_limit = 0L,   Server = hazard_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_cancer_hazard_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cancer hazard batch — get_cancer_hazard_batch","text":"DTXSID chemical identifier DTXSIDs API_key user-specific API key. rate_limit Number seconds wait requests Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_cancer_hazard_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cancer hazard batch — get_cancer_hazard_batch","text":"data.table containing cancer hazard related data input DTXSID.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_cancer_hazard_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cancer hazard batch — get_cancer_hazard_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull cancer hazard data for multiples chemicals dtxsid <- c('DTXSID7020182', 'DTXSID2021315') dtxsid_cancer_hazard <- get_cancer_hazard_batch(DTXSID = dtxsid) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chem_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve chemical information — get_chem_info","title":"Retrieve chemical information — get_chem_info","text":"Retrieve chemical information","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chem_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve chemical information — get_chem_info","text":"","code":"get_chem_info(   DTXSID = NULL,   type = \"\",   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chem_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve chemical information — get_chem_info","text":"DTXSID chemical identifier DTXSID type specifies whether grab predicted experimental results. specified, grab details. allowable input values \"predicted\" \"experimental\". API_key user-specific API Key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chem_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve chemical information — get_chem_info","text":"data.frame containing chemical information chemical DTXSID matching input parameter.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chem_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve chemical information — get_chem_info","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemical information for BPA bpa <- get_chem_info(DTXSID = 'DTXSID7020182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chem_info_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve chemical information in batch search — get_chem_info_batch","title":"Retrieve chemical information in batch search — get_chem_info_batch","text":"Retrieve chemical information batch search","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chem_info_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve chemical information in batch search — get_chem_info_batch","text":"","code":"get_chem_info_batch(   DTXSID = NULL,   type = \"\",   API_key = NULL,   rate_limit = 0L,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chem_info_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve chemical information in batch search — get_chem_info_batch","text":"DTXSID vector chemical identifier DTXSIDs type vector type used get_chem_info(). specifies whether grab predicted experimental results. specified, grab details. allowable input values \"\", predicted\", \"experimental\". API_key user-specific API key. rate_limit Number seconds wait request Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chem_info_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve chemical information in batch search — get_chem_info_batch","text":"data.table containing chemical information chemicals DTXSID matching input parameter.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chem_info_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve chemical information in batch search — get_chem_info_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemical info for multiple chemicals chem_info <- get_chem_info_batch(DTXSID = c('DTXSID7020182',                                             'DTXSID2021315')) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_by_property_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Get chemicals by property and its value range — get_chemical_by_property_range","title":"Get chemicals by property and its value range — get_chemical_by_property_range","text":"Get chemicals property value range","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_by_property_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chemicals by property and its value range — get_chemical_by_property_range","text":"","code":"get_chemical_by_property_range(   start = NULL,   end = NULL,   property = NULL,   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_by_property_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chemicals by property and its value range — get_chemical_by_property_range","text":"start numeric value, beginning range end numeric value, end range property string, property question API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_by_property_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chemicals by property and its value range — get_chemical_by_property_range","text":"data.frame containing chemical information chemicals matching search criteria.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_by_property_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get chemicals by property and its value range — get_chemical_by_property_range","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemicals with a given property in a set range density <- get_chemical_by_property_range(start = 1.311, end = 1.313,                                           property = 'Density') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_by_property_range_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve chemicals by property and value range in batch search — get_chemical_by_property_range_batch","title":"Retrieve chemicals by property and value range in batch search — get_chemical_by_property_range_batch","text":"Retrieve chemicals property value range batch search","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_by_property_range_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve chemicals by property and value range in batch search — get_chemical_by_property_range_batch","text":"","code":"get_chemical_by_property_range_batch(   start_list = NULL,   end_list = NULL,   property_list = NULL,   API_key = NULL,   rate_limit = 0L,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_by_property_range_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve chemicals by property and value range in batch search — get_chemical_by_property_range_batch","text":"start_list Numeric values, beginning range end_list Numeric values, end range property_list Strings, properties queried API_key user-specific API key rate_limit Number seconds wait request verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_by_property_range_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve chemicals by property and value range in batch search — get_chemical_by_property_range_batch","text":"named list data.frames containing chemical information chemicals matching search criteria.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_by_property_range_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve chemicals by property and value range in batch search — get_chemical_by_property_range_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemicals by property ranges prop_ranges <- get_chemical_by_property_range_batch(start_list = c(1.311,                                                                    211.99),                                                     end_list = c(1.313,                                                                      212.01),                                                     property_list = c('Density',                                                                       'Boiling Point')) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve chemical details from DTXSID of DTXCID — get_chemical_details","title":"Retrieve chemical details from DTXSID of DTXCID — get_chemical_details","text":"Retrieve chemical details DTXSID DTXCID","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve chemical details from DTXSID of DTXCID — get_chemical_details","text":"","code":"get_chemical_details(   DTXSID = NULL,   DTXCID = NULL,   Projection = \"chemicaldetailstandard\",   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve chemical details from DTXSID of DTXCID — get_chemical_details","text":"DTXSID chemical identifier DTXSID DTXCID chemical identifier DTXCID Projection format chemical detail data returned. Allowed values 'chemicaldetailall', 'chemicaldetailstandard', 'chemicalidentifier', 'chemicalstructure', 'ntatoolkit', 'ccdchemicaldetails'. left empty mismatch, default format 'chemicaldetailstandard'. API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve chemical details from DTXSID of DTXCID — get_chemical_details","text":"data.table containing chemical information chemical DTXSID matching input parameter.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_details.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve chemical details from DTXSID of DTXCID — get_chemical_details","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemical details for BPA bpa <- get_chemical_details(DTXSID = 'DTXSID7020182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_details_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve chemical details from DTXSID of DTXCID in batch search — get_chemical_details_batch","title":"Retrieve chemical details from DTXSID of DTXCID in batch search — get_chemical_details_batch","text":"Retrieve chemical details DTXSID DTXCID batch search","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_details_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve chemical details from DTXSID of DTXCID in batch search — get_chemical_details_batch","text":"","code":"get_chemical_details_batch(   DTXSID = NULL,   DTXCID = NULL,   Projection = \"chemicaldetailstandard\",   API_key = NULL,   rate_limit = 0L,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_details_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve chemical details from DTXSID of DTXCID in batch search — get_chemical_details_batch","text":"DTXSID chemical identifier DTXSID DTXCID chemical identifier DTXCID Projection format chemical detail data returned. Allowed values 'chemicaldetailall', 'chemicaldetailstandard', chemicalidentifier', 'chemicalstructure', 'ntatoolkit', ccdchemicaldetails'. left empty mismatch, default format 'chemicaldetailstandard'. API_key user-specific API key rate_limit Number seconds wait request verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_details_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve chemical details from DTXSID of DTXCID in batch search — get_chemical_details_batch","text":"data.table (DTXSID) named list data.tables (DTXCID) containing chemical information chemicals DTXSID DTXCID matching input parameter.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_details_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve chemical details from DTXSID of DTXCID in batch search — get_chemical_details_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemical details for multiple chemicals by dtxsid dtxsids <- c('DTXSID7020182', 'DTXSID2021315') dtxsid_details <- get_chemical_details_batch(DTXSID = dtxsid) # Pull chemical details for multiple chemicals by dtxcid dtxcids <- c('DTXCID30182', 'DTXCID001315') dtxcid_details <- get_chemical_details_batch(DTXCID = dtxcids) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_endpoint_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Chemical API Endpoint status — get_chemical_endpoint_status","title":"Chemical API Endpoint status — get_chemical_endpoint_status","text":"Chemical API Endpoint status","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_endpoint_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chemical API Endpoint status — get_chemical_endpoint_status","text":"","code":"get_chemical_endpoint_status()"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_endpoint_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Chemical API Endpoint status — get_chemical_endpoint_status","text":"Status Chemical API Endpoints","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_endpoint_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chemical API Endpoint status — get_chemical_endpoint_status","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") status <- get_chemical_endpoint_status() print(status) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Get image file by DTXSID or DTXCID — get_chemical_image","title":"Get image file by DTXSID or DTXCID — get_chemical_image","text":"Get image file DTXSID DTXCID","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get image file by DTXSID or DTXCID — get_chemical_image","text":"","code":"get_chemical_image(   DTXSID = NULL,   DTXCID = NULL,   gsid = NULL,   SMILES = NULL,   format = \"\",   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get image file by DTXSID or DTXCID — get_chemical_image","text":"DTXSID Chemical identifier DTXSID DTXCID Chemical identifier DTXCID gsid DSSTox Generic Substance Identifier SMILES Chemical identifier SMILES format image type, either \"png\" \"svg\". left blank, default \"png\". API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get image file by DTXSID or DTXCID — get_chemical_image","text":"Large array three dimensions representing image. displaying , one may use png::writePNG() countcolors::plotArrayAsImage() among many functions.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get image file by DTXSID or DTXCID — get_chemical_image","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemical image for BPA by dtxsid bpa_image_matrix <- get_chemical_image(DTXSID = 'DTXSID7020182') if (requireNamespace(\"countcolors\", quietly = TRUE)){   countcolors::plotArrayAsImage(bpa_image_matrix) } # Pull chemical image for BPA by dtxcid bpa_image_matrix <- get_chemical_image(DTXCID = 'DTXCID30182') if (requireNamespace(\"countcolors\", quietly = TRUE)){   countcolors::plotArrayAsImage(bpa_image_matrix) } }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_image_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get image file by DTXSID or DTXCID batch — get_chemical_image_batch","title":"Get image file by DTXSID or DTXCID batch — get_chemical_image_batch","text":"Get image file DTXSID DTXCID batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_image_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get image file by DTXSID or DTXCID batch — get_chemical_image_batch","text":"","code":"get_chemical_image_batch(   DTXSID = NULL,   DTXCID = NULL,   SMILES = NULL,   format = \"\",   API_key = NULL,   rate_limit = 0L,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_image_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get image file by DTXSID or DTXCID batch — get_chemical_image_batch","text":"DTXSID list chemical identifier DTXSIDs. DTXCID list chemical identifier DTXCIDs. SMILES list chemical identifier SMILES. format image type, either \"png\" \"svg\". left blank, default \"png\". API_key user-specific API key. rate_limit Number seconds wait request verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_image_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get image file by DTXSID or DTXCID batch — get_chemical_image_batch","text":"named list Large arrays three dimensions representing image. displaying image, one may use png::writePNG() countcolors::plotArrayAsImage() among many functions.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_image_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get image file by DTXSID or DTXCID batch — get_chemical_image_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull images for multiple chemicals dtxsid <- c('DTXSID7020182', 'DTXSID2021315') images <- get_chemical_image_batch(DTXSID = dtxsid) if (requireNamespace(\"countcolors\", quietly = TRUE)){   countcolors::plotArrayAsImage(images[[1]])   countcolors::plotArrayAsImage(images[[2]]) } }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_lists_by_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get chemical lists by type — get_chemical_lists_by_type","title":"Get chemical lists by type — get_chemical_lists_by_type","text":"Get chemical lists type","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_lists_by_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chemical lists by type — get_chemical_lists_by_type","text":"","code":"get_chemical_lists_by_type(   type = NULL,   Projection = \"\",   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_lists_by_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chemical lists by type — get_chemical_lists_by_type","text":"type type list. case sensitive parameter returns lists values \"federal\", \"international\", \"state\", \"\". Projection Optional parameter controlling return type. takes values 'chemicallistall' 'chemicallistname' former default value. API_key user-specified API key. Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_lists_by_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chemical lists by type — get_chemical_lists_by_type","text":"data.frame containing information lists meet search criteria.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_lists_by_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get chemical lists by type — get_chemical_lists_by_type","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemical lists by type federal <- get_chemical_lists_by_type(type = 'Federal') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_lists_by_type_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get chemical lists by type batch search — get_chemical_lists_by_type_batch","title":"Get chemical lists by type batch search — get_chemical_lists_by_type_batch","text":"Get chemical lists type batch search","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_lists_by_type_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chemical lists by type batch search — get_chemical_lists_by_type_batch","text":"","code":"get_chemical_lists_by_type_batch(   type_list = NULL,   Projection = \"\",   API_key = NULL,   rate_limit = 0L,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_lists_by_type_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chemical lists by type batch search — get_chemical_lists_by_type_batch","text":"type_list list list types. case sensitive parameter returns lists values \"federal\", \"international\", \"state\", \"\". Projection Optional parameter controlling return type. takes values 'chemicallistall' 'chemicallistname' former default value. API_key user-specified API key. rate_limit Number seconds wait request verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_lists_by_type_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chemical lists by type batch search — get_chemical_lists_by_type_batch","text":"named list data.frames containing information lists meet search criteria.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_lists_by_type_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get chemical lists by type batch search — get_chemical_lists_by_type_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemical lists by type federal_state <- get_chemical_lists_by_type_batch(type_list = c('federal',                                                                 'state')) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_mol.html","id":null,"dir":"Reference","previous_headings":"","what":"Get mol file by DTXSID or DTXCID — get_chemical_mol","title":"Get mol file by DTXSID or DTXCID — get_chemical_mol","text":"Get mol file DTXSID DTXCID","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_mol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get mol file by DTXSID or DTXCID — get_chemical_mol","text":"","code":"get_chemical_mol(   DTXSID = NULL,   DTXCID = NULL,   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_mol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get mol file by DTXSID or DTXCID — get_chemical_mol","text":"DTXSID Chemical identifier DTXSID DTXCID Chemical identifier DTXCID API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_mol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get mol file by DTXSID or DTXCID — get_chemical_mol","text":"character string giving mol file representation","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_mol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get mol file by DTXSID or DTXCID — get_chemical_mol","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull mol file for BPA by dtxsid bpa_mol <- get_chemical_mol(DTXSID = 'DTXSID7020182') # Pull mol file for BPA by dtxcid bpa_mol <- get_chemical_mol(DTXCID = 'DTXCID30182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_mol_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get mol file by DTXSID or DTXCID batch — get_chemical_mol_batch","title":"Get mol file by DTXSID or DTXCID batch — get_chemical_mol_batch","text":"Get mol file DTXSID DTXCID batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_mol_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get mol file by DTXSID or DTXCID batch — get_chemical_mol_batch","text":"","code":"get_chemical_mol_batch(   DTXSID = NULL,   DTXCID = NULL,   API_key = NULL,   rate_limit = 0L,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_mol_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get mol file by DTXSID or DTXCID batch — get_chemical_mol_batch","text":"DTXSID list chemical identifier DTXSIDs. DTXCID list chemical identifier DTXCIDs. API_key user-specific API key. rate_limit Number seconds wait request verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_mol_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get mol file by DTXSID or DTXCID batch — get_chemical_mol_batch","text":"named list character strings giving mol file representations given input chemicals.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_mol_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get mol file by DTXSID or DTXCID batch — get_chemical_mol_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull mol files for multiple chemicals by DTXSID dtxsid <- c('DTXSID7020182', 'DTXSID2021315') mol_files <- get_chemical_mol_batch(DTXSID = dtxsid) # Pull mol files for multiple chemicals by DTXCID dtxcid <- c('DTXCID30182', 'DTXCID001315') mol_files <- get_chemical_mol_batch(DTXCID = dtxcid) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_mrv.html","id":null,"dir":"Reference","previous_headings":"","what":"Get mrv file by DTXSID or DTXCID — get_chemical_mrv","title":"Get mrv file by DTXSID or DTXCID — get_chemical_mrv","text":"Get mrv file DTXSID DTXCID","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_mrv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get mrv file by DTXSID or DTXCID — get_chemical_mrv","text":"","code":"get_chemical_mrv(   DTXSID = NULL,   DTXCID = NULL,   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_mrv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get mrv file by DTXSID or DTXCID — get_chemical_mrv","text":"DTXSID chemical identifier DTXSID DTXCID chemical identifier DTXCID API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_mrv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get mrv file by DTXSID or DTXCID — get_chemical_mrv","text":"XML file format representing mrv file.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_mrv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get mrv file by DTXSID or DTXCID — get_chemical_mrv","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull mrv file for BPA by dtxsid bpa_mrv <- get_chemical_mrv(DTXSID = 'DTXSID7020182') # Pull mrv file for BPA by dtxcid bpa_mrv <- getchemical_mrv(DTXCID = 'DTXCID30182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_mrv_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Ger mrv file by DTXSID or DTXCID batch — get_chemical_mrv_batch","title":"Ger mrv file by DTXSID or DTXCID batch — get_chemical_mrv_batch","text":"Ger mrv file DTXSID DTXCID batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_mrv_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ger mrv file by DTXSID or DTXCID batch — get_chemical_mrv_batch","text":"","code":"get_chemical_mrv_batch(   DTXSID = NULL,   DTXCID = NULL,   API_key = NULL,   rate_limit = 0L,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_mrv_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ger mrv file by DTXSID or DTXCID batch — get_chemical_mrv_batch","text":"DTXSID list chemical identifier DTXSIDs. DTXCID list chemical identifier DTXCIDs. API_key user-specific API key. rate_limit Number seconds wait request verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_mrv_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ger mrv file by DTXSID or DTXCID batch — get_chemical_mrv_batch","text":"named list XML file format representing mrv file chemicals.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_mrv_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ger mrv file by DTXSID or DTXCID batch — get_chemical_mrv_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull mrv files for multiple chemicals by DTXSID dtxsid <- c('DTXSID7020182', 'DTXSID2021315') mrv_files <- get_chemical_mrv_batch(DTXSID = dtxsid) # Pull mrv files for multiple chemicals by DTXCID dtxcid <- c('DTXCID30182', 'DTXCID001315') mrv_files <- get_chemical_mrv_batch(DTXCID = dtxcid) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_synonym.html","id":null,"dir":"Reference","previous_headings":"","what":"Get chemical synonym — get_chemical_synonym","title":"Get chemical synonym — get_chemical_synonym","text":"Get chemical synonym","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_synonym.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chemical synonym — get_chemical_synonym","text":"","code":"get_chemical_synonym(   DTXSID = NULL,   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_synonym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chemical synonym — get_chemical_synonym","text":"DTXSID chemical identifier DTXSID API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_synonym.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chemical synonym — get_chemical_synonym","text":"named list synonym information input DTXSID","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_synonym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get chemical synonym — get_chemical_synonym","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull synonyms for BPA bpa_synonym <- get_chemical_synonym(DTXSID = 'DTXSID7020182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_synonym_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get chemical synonym batch — get_chemical_synonym_batch","title":"Get chemical synonym batch — get_chemical_synonym_batch","text":"Get chemical synonym batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_synonym_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chemical synonym batch — get_chemical_synonym_batch","text":"","code":"get_chemical_synonym_batch(   DTXSID = NULL,   API_key = NULL,   rate_limit = 0L,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_synonym_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chemical synonym batch — get_chemical_synonym_batch","text":"DTXSID list chemical identifier DTXSIDs API_key user-specific API key. rate_limit number seconds wait requests. verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_synonym_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chemical synonym batch — get_chemical_synonym_batch","text":"named list lists containing synonym information input DTXSID.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemical_synonym_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get chemical synonym batch — get_chemical_synonym_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull synonyms for multiple chemicals dtxsid <- c('DTXSID7020182', 'DTXSID2021315') batch_synonyms <- get_chemical_synonym_batch(DTXSID = dtxsid) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get chemicals in a given chemical list — get_chemicals_in_list","title":"Get chemicals in a given chemical list — get_chemicals_in_list","text":"Get chemicals given chemical list","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chemicals in a given chemical list — get_chemicals_in_list","text":"","code":"get_chemicals_in_list(   list_name = NULL,   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chemicals in a given chemical list — get_chemicals_in_list","text":"list_name name list chemicals API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chemicals in a given chemical list — get_chemicals_in_list","text":"data.frame chemical list","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get chemicals in a given chemical list — get_chemicals_in_list","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Retrieve chemicals contained in chemical list 'CCL4' ccl4_chemicals <- get_chemicals_in_list(list_name = 'CCL4') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get chemicals in a given chemical list batch — get_chemicals_in_list_batch","title":"Get chemicals in a given chemical list batch — get_chemicals_in_list_batch","text":"Get chemicals given chemical list batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chemicals in a given chemical list batch — get_chemicals_in_list_batch","text":"","code":"get_chemicals_in_list_batch(   list_names = NULL,   API_key = NULL,   rate_limit = 0L,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chemicals in a given chemical list batch — get_chemicals_in_list_batch","text":"list_names list names chemical lists. API_key user-specific API key. rate_limit Number seconds wait request verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chemicals in a given chemical list batch — get_chemicals_in_list_batch","text":"named list data.frames containing chemicals corresponding chemical lists.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get chemicals in a given chemical list batch — get_chemicals_in_list_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemicals in lists for multiple lists chemicals_in_lists <- get_chemicals_in_list_batch(list_names = c('CCL4', 'NATADB')) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_contain.html","id":null,"dir":"Reference","previous_headings":"","what":"Get chemicals in a list specified by contained characters — get_chemicals_in_list_contain","title":"Get chemicals in a list specified by contained characters — get_chemicals_in_list_contain","text":"Get chemicals list specified contained characters","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_contain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chemicals in a list specified by contained characters — get_chemicals_in_list_contain","text":"","code":"get_chemicals_in_list_contain(   list_name = NULL,   word = NULL,   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_contain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chemicals in a list specified by contained characters — get_chemicals_in_list_contain","text":"list_name name list search word contained characters match chemicals given list API_key user-specific api key Server root address API endpoint verbose logical indicating \"progress report\" given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_contain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chemicals in a list specified by contained characters — get_chemicals_in_list_contain","text":"list DTXSIDs matching list search word criteria","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_contain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get chemicals in a list specified by contained characters — get_chemicals_in_list_contain","text":"","code":"if (FALSE) { bis_biosolids_2021 <- get_chemicals_in_list_contain(list_name = 'BIOSOLIDS2021',                                                     word = 'Bis') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_contain_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get chemicals in a list specified by characters contained batch search — get_chemicals_in_list_contain_batch","title":"Get chemicals in a list specified by characters contained batch search — get_chemicals_in_list_contain_batch","text":"Get chemicals list specified characters contained batch search","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_contain_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chemicals in a list specified by characters contained batch search — get_chemicals_in_list_contain_batch","text":"","code":"get_chemicals_in_list_contain_batch(   list_names = NULL,   words = NULL,   API_key = NULL,   rate_limit = 0L,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_contain_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chemicals in a list specified by characters contained batch search — get_chemicals_in_list_contain_batch","text":"list_names names lists search. words search words, one list. API_key user-specific API key. rate_limit Number seconds wait request. verbose logical indicating \"progress report\" given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_contain_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chemicals in a list specified by characters contained batch search — get_chemicals_in_list_contain_batch","text":"named list lists, names corresponding search terms lists corresponding DTXSIDs associated search terms","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_contain_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get chemicals in a list specified by characters contained batch search — get_chemicals_in_list_contain_batch","text":"","code":"if (FALSE) { # Search `CCL4` for chemicals containing with 'Bis' and `BIOSOLIDS2021` for # chemicals containing with 'Zyle'. bis_and_zyle <- get_chemicals_in_list_contain_batch(list_names = c('CCL4',                                                               'BIOSOLIDS2021'),                                                  words = c('Bis', 'Zyle')) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_exact.html","id":null,"dir":"Reference","previous_headings":"","what":"Get chemicals in a list specified by exact characters — get_chemicals_in_list_exact","title":"Get chemicals in a list specified by exact characters — get_chemicals_in_list_exact","text":"Get chemicals list specified exact characters","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_exact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chemicals in a list specified by exact characters — get_chemicals_in_list_exact","text":"","code":"get_chemicals_in_list_exact(   list_name = NULL,   word = NULL,   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_exact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chemicals in a list specified by exact characters — get_chemicals_in_list_exact","text":"list_name name list search word exact characters match chemicals given list API_key user-specific api key Server root address API endpoint verbose logical indicating \"progress report\" given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_exact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chemicals in a list specified by exact characters — get_chemicals_in_list_exact","text":"list DTXSIDs matching list search word criteria","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_exact.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get chemicals in a list specified by exact characters — get_chemicals_in_list_exact","text":"","code":"if (FALSE) { bis_biosolids_2021 <- get_chemicals_in_list_exact(list_name = 'BIOSOLIDS2021',                                                   word = 'Bisphenol A') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_exact_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get chemicals in a list specified by exact characters batch search — get_chemicals_in_list_exact_batch","title":"Get chemicals in a list specified by exact characters batch search — get_chemicals_in_list_exact_batch","text":"Get chemicals list specified exact characters batch search","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_exact_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chemicals in a list specified by exact characters batch search — get_chemicals_in_list_exact_batch","text":"","code":"get_chemicals_in_list_exact_batch(   list_names = NULL,   words = NULL,   API_key = NULL,   rate_limit = 0L,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_exact_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chemicals in a list specified by exact characters batch search — get_chemicals_in_list_exact_batch","text":"list_names names lists search. words search words, one list. API_key user-specific API key. rate_limit Number seconds wait request. verbose logical indicating \"progress report\" given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_exact_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chemicals in a list specified by exact characters batch search — get_chemicals_in_list_exact_batch","text":"named list lists, names corresponding search terms lists corresponding DTXSIDs associated search terms","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_exact_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get chemicals in a list specified by exact characters batch search — get_chemicals_in_list_exact_batch","text":"","code":"if (FALSE) { # Search `CCL4` for chemicals exactly matching with 'Bisphenol A' and # `BIOSOLIDS2021` for chemicals exactly matching with 'Bisphenol A'. bisphenol_a <- get_chemicals_in_list_exact_batch(list_names = c('CCL4',                                                               'BIOSOLIDS2021'),                                                  words = rep('Bisphenol A', 2)) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_start.html","id":null,"dir":"Reference","previous_headings":"","what":"Get chemicals in a list specified by starting characters — get_chemicals_in_list_start","title":"Get chemicals in a list specified by starting characters — get_chemicals_in_list_start","text":"Get chemicals list specified starting characters","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chemicals in a list specified by starting characters — get_chemicals_in_list_start","text":"","code":"get_chemicals_in_list_start(   list_name = NULL,   word = NULL,   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_start.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chemicals in a list specified by starting characters — get_chemicals_in_list_start","text":"list_name name list search word starting characters match chemicals given list API_key user-specific api key Server root address API endpoint verbose logical indicating \"progress report\" given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_start.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chemicals in a list specified by starting characters — get_chemicals_in_list_start","text":"list DTXSIDs matching list search word criteria","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_start.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get chemicals in a list specified by starting characters — get_chemicals_in_list_start","text":"","code":"if (FALSE) { bis_biosolids_2021 <- get_chemicals_in_list_start(list_name = 'BIOSOLIDS2021',                                                   word = 'Bi') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_start_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get chemicals in a list specified by starting characters batch search — get_chemicals_in_list_start_batch","title":"Get chemicals in a list specified by starting characters batch search — get_chemicals_in_list_start_batch","text":"Get chemicals list specified starting characters batch search","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_start_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chemicals in a list specified by starting characters batch search — get_chemicals_in_list_start_batch","text":"","code":"get_chemicals_in_list_start_batch(   list_names = NULL,   words = NULL,   API_key = NULL,   rate_limit = 0L,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_start_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chemicals in a list specified by starting characters batch search — get_chemicals_in_list_start_batch","text":"list_names names lists search. words search words, one list. API_key user-specific API key. rate_limit Number seconds wait request. verbose logical indicating \"progress report\" given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_start_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chemicals in a list specified by starting characters batch search — get_chemicals_in_list_start_batch","text":"named list lists, names corresponding search terms lists corresponding DTXSIDs associated search terms","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_chemicals_in_list_start_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get chemicals in a list specified by starting characters batch search — get_chemicals_in_list_start_batch","text":"","code":"if (FALSE) { # Search `CCL4` for chemicals starting with 'Bis' and `BIOSOLIDS2021` for # chemicals starting with 'Tri'. bis_and_tri <- get_chemicals_in_list_start_batch(list_names = c('CCL4',                                                               'BIOSOLIDS2021'),                                                  words = c('Bis', 'Tri')) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_demographic_exposure_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Get demographic exposure prediction data — get_demographic_exposure_prediction","title":"Get demographic exposure prediction data — get_demographic_exposure_prediction","text":"Get demographic exposure prediction data","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_demographic_exposure_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get demographic exposure prediction data — get_demographic_exposure_prediction","text":"","code":"get_demographic_exposure_prediction(   DTXSID = NULL,   API_key = NULL,   Server = exposure_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_demographic_exposure_prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get demographic exposure prediction data — get_demographic_exposure_prediction","text":"DTXSID chemical identifier DTXSID API_key user-specific API key Server root address API endpoint verbose logical indicating \"progress report\" given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_demographic_exposure_prediction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get demographic exposure prediction data — get_demographic_exposure_prediction","text":"data.table demographic exposure prediction data.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_demographic_exposure_prediction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get demographic exposure prediction data — get_demographic_exposure_prediction","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull general exposure prediction data for BPA bpa <- get_demographic_exposure_prediction(DTXSID = 'DTXSID7020182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_demographic_exposure_prediction_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve demographic exposure predictions for chemicals via batch — get_demographic_exposure_prediction_batch","title":"Retrieve demographic exposure predictions for chemicals via batch — get_demographic_exposure_prediction_batch","text":"Retrieve demographic exposure predictions chemicals via batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_demographic_exposure_prediction_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve demographic exposure predictions for chemicals via batch — get_demographic_exposure_prediction_batch","text":"","code":"get_demographic_exposure_prediction_batch(   DTXSID = NULL,   API_key = NULL,   rate_limit = 0L,   Server = exposure_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_demographic_exposure_prediction_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve demographic exposure predictions for chemicals via batch — get_demographic_exposure_prediction_batch","text":"DTXSID Chemical identifier DTXSID API_key user-specific API key rate_limit Number seconds wait request Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_demographic_exposure_prediction_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve demographic exposure predictions for chemicals via batch — get_demographic_exposure_prediction_batch","text":"named list data.frames, containing demographic exposure prediction data input DTXSID.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_demographic_exposure_prediction_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve demographic exposure predictions for chemicals via batch — get_demographic_exposure_prediction_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull demographic exposure prediction data for multiple chemicals dtxsid <- c('DTXSID7020182', 'DTXSID2021315') exp_demo <- get_demographic_exposure_prediction_batch(DTXSID = dtxsid) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_ecotox_hazard_by_dtxsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ecotox hazard data by DTXSID — get_ecotox_hazard_by_dtxsid","title":"Get ecotox hazard data by DTXSID — get_ecotox_hazard_by_dtxsid","text":"Get ecotox hazard data DTXSID","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_ecotox_hazard_by_dtxsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ecotox hazard data by DTXSID — get_ecotox_hazard_by_dtxsid","text":"","code":"get_ecotox_hazard_by_dtxsid(   DTXSID = NULL,   API_key = NULL,   Server = hazard_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_ecotox_hazard_by_dtxsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ecotox hazard data by DTXSID — get_ecotox_hazard_by_dtxsid","text":"DTXSID chemical identifier DTXSID API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_ecotox_hazard_by_dtxsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ecotox hazard data by DTXSID — get_ecotox_hazard_by_dtxsid","text":"data.frame containing chemical (ecotox) hazard data","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_ecotox_hazard_by_dtxsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ecotox hazard data by DTXSID — get_ecotox_hazard_by_dtxsid","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull ecotox hazard data for BPA bpa_ecotox <- get_ecotox_hazard_by_dtxsid(DTXSID = 'DTXSID7020182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_ecotox_hazard_by_dtxsid_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ecotox hazard data by DTXSID batch — get_ecotox_hazard_by_dtxsid_batch","title":"Get ecotox hazard data by DTXSID batch — get_ecotox_hazard_by_dtxsid_batch","text":"Get ecotox hazard data DTXSID batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_ecotox_hazard_by_dtxsid_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ecotox hazard data by DTXSID batch — get_ecotox_hazard_by_dtxsid_batch","text":"","code":"get_ecotox_hazard_by_dtxsid_batch(   DTXSID = NULL,   API_key = NULL,   rate_limit = 0L,   Server = hazard_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_ecotox_hazard_by_dtxsid_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ecotox hazard data by DTXSID batch — get_ecotox_hazard_by_dtxsid_batch","text":"DTXSID list chemical identifier DTXSIDs. API_key user-specific API key. rate_limit Number seconds wait request Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_ecotox_hazard_by_dtxsid_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ecotox hazard data by DTXSID batch — get_ecotox_hazard_by_dtxsid_batch","text":"data.table containing chemical ecotox hazard data.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_ecotox_hazard_by_dtxsid_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ecotox hazard data by DTXSID batch — get_ecotox_hazard_by_dtxsid_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull ecotox hazard data for multiples chemicals dtxsid <- c('DTXSID7020182', 'DTXSID2021315') dtxsid_ecotox_hazard <- get_ecotox_hazard_by_dtxsid_batch(DTXSID = dtxsid) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_endpoint_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Exposure API Endpoint status — get_exposure_endpoint_status","title":"Exposure API Endpoint status — get_exposure_endpoint_status","text":"Exposure API Endpoint status","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_endpoint_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exposure API Endpoint status — get_exposure_endpoint_status","text":"","code":"get_exposure_endpoint_status()"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_endpoint_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exposure API Endpoint status — get_exposure_endpoint_status","text":"Status Exposure API Endpoints","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_endpoint_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exposure API Endpoint status — get_exposure_endpoint_status","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") status <- get_exposure_endpoint_status() print(status) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve exposure related functional use data — get_exposure_functional_use","title":"Retrieve exposure related functional use data — get_exposure_functional_use","text":"Retrieve exposure related functional use data","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve exposure related functional use data — get_exposure_functional_use","text":"","code":"get_exposure_functional_use(   DTXSID = NULL,   API_key = NULL,   Server = exposure_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve exposure related functional use data — get_exposure_functional_use","text":"DTXSID Chemical identifier DTXSID API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve exposure related functional use data — get_exposure_functional_use","text":"data.frame functional use data.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve exposure related functional use data — get_exposure_functional_use","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull functional use data for BPA bpa <- get_exposure_functional_use(DTXSID = 'DTXSID7020182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve exposure related functional use data batch — get_exposure_functional_use_batch","title":"Retrieve exposure related functional use data batch — get_exposure_functional_use_batch","text":"Retrieve exposure related functional use data batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve exposure related functional use data batch — get_exposure_functional_use_batch","text":"","code":"get_exposure_functional_use_batch(   DTXSID = NULL,   API_key = NULL,   rate_limit = 0L,   Server = exposure_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve exposure related functional use data batch — get_exposure_functional_use_batch","text":"DTXSID Chemical identifier DTXSID API_key user-specific API key rate_limit Number seconds wait request Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve exposure related functional use data batch — get_exposure_functional_use_batch","text":"named list data.frames, containing exposure functional use data input DTXSID.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve exposure related functional use data batch — get_exposure_functional_use_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull exposure functional use data for multiple chemicals dtxsid <- c('DTXSID7020182', 'DTXSID2021315') dtxsid_func_use <- get_exposure_functional_use_batch(DTXSID = dtxsid) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use_category.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve functional use categories — get_exposure_functional_use_category","title":"Retrieve functional use categories — get_exposure_functional_use_category","text":"Retrieve functional use categories","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use_category.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve functional use categories — get_exposure_functional_use_category","text":"","code":"get_exposure_functional_use_category(   API_key = NULL,   Server = exposure_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use_category.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve functional use categories — get_exposure_functional_use_category","text":"API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use_category.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve functional use categories — get_exposure_functional_use_category","text":"data.frame functional use categories.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use_category.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve functional use categories — get_exposure_functional_use_category","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull functional use category data for BPA functional_use_categories <- get_exposure_functional_use_category() }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use_probability.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve probability of exposure for functional use category — get_exposure_functional_use_probability","title":"Retrieve probability of exposure for functional use category — get_exposure_functional_use_probability","text":"Retrieve probability exposure functional use category","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use_probability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve probability of exposure for functional use category — get_exposure_functional_use_probability","text":"","code":"get_exposure_functional_use_probability(   DTXSID = NULL,   API_key = NULL,   Server = exposure_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use_probability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve probability of exposure for functional use category — get_exposure_functional_use_probability","text":"DTXSID chemical identifier DTXSID API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use_probability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve probability of exposure for functional use category — get_exposure_functional_use_probability","text":"data.frame probabilities corresponding various routes exposure related functional use.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use_probability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve probability of exposure for functional use category — get_exposure_functional_use_probability","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull functional use probability data for BPA bpa <- get_exposure_functional_use_probability(DTXSID = 'DTXSID7020182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use_probability_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve exposure functional use probability data batch — get_exposure_functional_use_probability_batch","title":"Retrieve exposure functional use probability data batch — get_exposure_functional_use_probability_batch","text":"Retrieve exposure functional use probability data batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use_probability_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve exposure functional use probability data batch — get_exposure_functional_use_probability_batch","text":"","code":"get_exposure_functional_use_probability_batch(   DTXSID = NULL,   API_key = NULL,   rate_limit = 0L,   Server = exposure_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use_probability_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve exposure functional use probability data batch — get_exposure_functional_use_probability_batch","text":"DTXSID Chemical identifier DTXSID API_key user-specific API key rate_limit Number seconds wait request Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use_probability_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve exposure functional use probability data batch — get_exposure_functional_use_probability_batch","text":"data.table, row containing exposure functional use probability data input DTXSID. NA values filled categories probability 0","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_functional_use_probability_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve exposure functional use probability data batch — get_exposure_functional_use_probability_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull exposure functional use probability data for multiple chemicals dtxsid <- c('DTXSID7020182', 'DTXSID2021315') dtxsid_func_use_prob <- get_exposure_functional_use_batch(DTXSID = dtxsid) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_list_presence_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve list presence tags — get_exposure_list_presence_tags","title":"Retrieve list presence tags — get_exposure_list_presence_tags","text":"Retrieve list presence tags","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_list_presence_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve list presence tags — get_exposure_list_presence_tags","text":"","code":"get_exposure_list_presence_tags(   API_key = NULL,   Server = exposure_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_list_presence_tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve list presence tags — get_exposure_list_presence_tags","text":"API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_list_presence_tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve list presence tags — get_exposure_list_presence_tags","text":"data.frame list presence tags associated data.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_list_presence_tags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve list presence tags — get_exposure_list_presence_tags","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull list presence tags tags <- get_exposure_list_presence_tags() }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_list_presence_tags_by_dtxsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve document data and list presence tags for a chemical — get_exposure_list_presence_tags_by_dtxsid","title":"Retrieve document data and list presence tags for a chemical — get_exposure_list_presence_tags_by_dtxsid","text":"Retrieve document data list presence tags chemical","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_list_presence_tags_by_dtxsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve document data and list presence tags for a chemical — get_exposure_list_presence_tags_by_dtxsid","text":"","code":"get_exposure_list_presence_tags_by_dtxsid(   DTXSID = NULL,   API_key = NULL,   Server = exposure_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_list_presence_tags_by_dtxsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve document data and list presence tags for a chemical — get_exposure_list_presence_tags_by_dtxsid","text":"DTXSID chemical identifier DTXSID API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_list_presence_tags_by_dtxsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve document data and list presence tags for a chemical — get_exposure_list_presence_tags_by_dtxsid","text":"data.frame document information list presence tags","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_list_presence_tags_by_dtxsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve document data and list presence tags for a chemical — get_exposure_list_presence_tags_by_dtxsid","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull list presence tags for BPA bpa <- get_exposure_list_presence_tags(DTXSID = 'DTXSID7020182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_list_presence_tags_by_dtxsid_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve document data and list presence tags for chemicals batch — get_exposure_list_presence_tags_by_dtxsid_batch","title":"Retrieve document data and list presence tags for chemicals batch — get_exposure_list_presence_tags_by_dtxsid_batch","text":"Retrieve document data list presence tags chemicals batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_list_presence_tags_by_dtxsid_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve document data and list presence tags for chemicals batch — get_exposure_list_presence_tags_by_dtxsid_batch","text":"","code":"get_exposure_list_presence_tags_by_dtxsid_batch(   DTXSID = NULL,   API_key = NULL,   rate_limit = 0L,   Server = exposure_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_list_presence_tags_by_dtxsid_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve document data and list presence tags for chemicals batch — get_exposure_list_presence_tags_by_dtxsid_batch","text":"DTXSID Chemical identifier DTXSID API_key user-specific API key rate_limit Number seconds wait request Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_list_presence_tags_by_dtxsid_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve document data and list presence tags for chemicals batch — get_exposure_list_presence_tags_by_dtxsid_batch","text":"named list data.frames, containing exposure list presence tags use data input DTXSID.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_list_presence_tags_by_dtxsid_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve document data and list presence tags for chemicals batch — get_exposure_list_presence_tags_by_dtxsid_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull exposure functional use data for multiple chemicals dtxsid <- c('DTXSID7020182', 'DTXSID2021315') exp_list_tags <- get_exposure_list_presence_tags_by_dtxsid_batch(DTXSID = dtxsid) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_product_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve product data for exposure purposes — get_exposure_product_data","title":"Retrieve product data for exposure purposes — get_exposure_product_data","text":"Retrieve product data exposure purposes","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_product_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve product data for exposure purposes — get_exposure_product_data","text":"","code":"get_exposure_product_data(   DTXSID = NULL,   API_key = NULL,   Server = exposure_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_product_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve product data for exposure purposes — get_exposure_product_data","text":"DTXSID chemical identifier DTXSID API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_product_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve product data for exposure purposes — get_exposure_product_data","text":"data.frame product information relating exposure given chemical","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_product_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve product data for exposure purposes — get_exposure_product_data","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull exposure product data for BPA bpa <- get_exposure_product_data(DTXSID = 'DTXSID7020182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_product_data_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve product data for exposure purposes batch — get_exposure_product_data_batch","title":"Retrieve product data for exposure purposes batch — get_exposure_product_data_batch","text":"Retrieve product data exposure purposes batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_product_data_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve product data for exposure purposes batch — get_exposure_product_data_batch","text":"","code":"get_exposure_product_data_batch(   DTXSID = NULL,   API_key = NULL,   rate_limit = 0L,   Server = exposure_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_product_data_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve product data for exposure purposes batch — get_exposure_product_data_batch","text":"DTXSID Chemical identifier DTXSID API_key user-specific API key rate_limit Number seconds wait request Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_product_data_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve product data for exposure purposes batch — get_exposure_product_data_batch","text":"named list data.frames, containing exposure product data input DTXSID.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_product_data_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve product data for exposure purposes batch — get_exposure_product_data_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull exposure functional use data for multiple chemicals dtxsid <- c('DTXSID7020182', 'DTXSID2021315') dtxsid_product_data <- get_exposure_product_data_batch(DTXSID = dtxsid) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_product_data_puc.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve product use categories related to exposure — get_exposure_product_data_puc","title":"Retrieve product use categories related to exposure — get_exposure_product_data_puc","text":"Retrieve product use categories related exposure","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_product_data_puc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve product use categories related to exposure — get_exposure_product_data_puc","text":"","code":"get_exposure_product_data_puc(   API_key = NULL,   Server = exposure_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_product_data_puc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve product use categories related to exposure — get_exposure_product_data_puc","text":"API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_product_data_puc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve product use categories related to exposure — get_exposure_product_data_puc","text":"data.frame consisting product use categories","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_exposure_product_data_puc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve product use categories related to exposure — get_exposure_product_data_puc","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull product data use categories for BPA puc_categories <- get_exposure_product_data_puc() }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_fate_by_dtxsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get fate by DTXSID — get_fate_by_dtxsid","title":"Get fate by DTXSID — get_fate_by_dtxsid","text":"Get fate DTXSID","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_fate_by_dtxsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get fate by DTXSID — get_fate_by_dtxsid","text":"","code":"get_fate_by_dtxsid(   DTXSID = NULL,   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_fate_by_dtxsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get fate by DTXSID — get_fate_by_dtxsid","text":"DTXSID chemical identifier DTXSID API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_fate_by_dtxsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get fate by DTXSID — get_fate_by_dtxsid","text":"data.frame containing chemical information chemical DTXSID matching input parameter.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_fate_by_dtxsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get fate by DTXSID — get_fate_by_dtxsid","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemical fate data for BPA bpa <- get_fate_by_dtxsid(DTXSID = 'DTXSID7020182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_fate_by_dtxsid_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve chemical fate data in batch search — get_fate_by_dtxsid_batch","title":"Retrieve chemical fate data in batch search — get_fate_by_dtxsid_batch","text":"Retrieve chemical fate data batch search","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_fate_by_dtxsid_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve chemical fate data in batch search — get_fate_by_dtxsid_batch","text":"","code":"get_fate_by_dtxsid_batch(   DTXSID = NULL,   API_key = NULL,   rate_limit = 0L,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_fate_by_dtxsid_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve chemical fate data in batch search — get_fate_by_dtxsid_batch","text":"DTXSID vector chemicals identifier DTXSIDs API_key user-specific API key rate_limit Number seconds wait request Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_fate_by_dtxsid_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve chemical fate data in batch search — get_fate_by_dtxsid_batch","text":"data.table containing chemical fate information chemicals DTXSID matching input parameter.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_fate_by_dtxsid_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve chemical fate data in batch search — get_fate_by_dtxsid_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemical fate by dtxsids chemical_fates <- get_fate_by_dtxsid_batch(DTXSID = c('DTXSID7020182',                                                       'DTXSID2021315')) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_general_exposure_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Get general exposure prediction data — get_general_exposure_prediction","title":"Get general exposure prediction data — get_general_exposure_prediction","text":"Get general exposure prediction data","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_general_exposure_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get general exposure prediction data — get_general_exposure_prediction","text":"","code":"get_general_exposure_prediction(   DTXSID = NULL,   API_key = NULL,   Server = exposure_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_general_exposure_prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get general exposure prediction data — get_general_exposure_prediction","text":"DTXSID chemical identifier DTXSID API_key user-specific API key Server root address API endpoint verbose logical indicating \"progress report\" given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_general_exposure_prediction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get general exposure prediction data — get_general_exposure_prediction","text":"data.table general exposure prediction data NULL data missing.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_general_exposure_prediction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get general exposure prediction data — get_general_exposure_prediction","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull general exposure prediction data for BPA bpa <- get_general_exposure_prediction(DTXSID = 'DTXSID7020182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_general_exposure_prediction_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve general exposure predictions for chemicals via batch — get_general_exposure_prediction_batch","title":"Retrieve general exposure predictions for chemicals via batch — get_general_exposure_prediction_batch","text":"Retrieve general exposure predictions chemicals via batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_general_exposure_prediction_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve general exposure predictions for chemicals via batch — get_general_exposure_prediction_batch","text":"","code":"get_general_exposure_prediction_batch(   DTXSID = NULL,   API_key = NULL,   rate_limit = 0L,   Server = exposure_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_general_exposure_prediction_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve general exposure predictions for chemicals via batch — get_general_exposure_prediction_batch","text":"DTXSID Chemical identifier DTXSID API_key user-specific API key rate_limit Number seconds wait request Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_general_exposure_prediction_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve general exposure predictions for chemicals via batch — get_general_exposure_prediction_batch","text":"named list data.frames, containing general exposure prediction data input DTXSID.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_general_exposure_prediction_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve general exposure predictions for chemicals via batch — get_general_exposure_prediction_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull general exposure prediction data for multiple chemicals dtxsid <- c('DTXSID7020182', 'DTXSID2021315') exp_pred <- get_general_exposure_prediction_batch(DTXSID = dtxsid) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_genetox_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genetox details — get_genetox_details","title":"Get genetox details — get_genetox_details","text":"Get genetox details","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_genetox_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genetox details — get_genetox_details","text":"","code":"get_genetox_details(   DTXSID = NULL,   API_key = NULL,   Server = hazard_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_genetox_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get genetox details — get_genetox_details","text":"DTXSID chemical identifier DTXSID API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_genetox_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get genetox details — get_genetox_details","text":"data.frame genetox detail data related input DTXSID.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_genetox_details.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get genetox details — get_genetox_details","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull genetox details for BPA bpa_genetox_details <- get_genetox_details(DTXSID = 'DTXSID7020182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_genetox_details_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genetox details batch — get_genetox_details_batch","title":"Get genetox details batch — get_genetox_details_batch","text":"Get genetox details batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_genetox_details_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genetox details batch — get_genetox_details_batch","text":"","code":"get_genetox_details_batch(   DTXSID = NULL,   API_key = NULL,   rate_limit = 0L,   Server = hazard_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_genetox_details_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get genetox details batch — get_genetox_details_batch","text":"DTXSID chemical identifier DTXSIDs API_key user-specific API key. rate_limit Number seconds wait requests Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_genetox_details_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get genetox details batch — get_genetox_details_batch","text":"data.table genetox detail data input DTXSID.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_genetox_details_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get genetox details batch — get_genetox_details_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull genetox details data for multiples chemicals dtxsid <- c('DTXSID7020182', 'DTXSID2021315') dtxsid_genetox_details_hazard <- get_genetox_details_batch(DTXSID = dtxsid) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_genetox_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genetox summary — get_genetox_summary","title":"Get genetox summary — get_genetox_summary","text":"Get genetox summary","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_genetox_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genetox summary — get_genetox_summary","text":"","code":"get_genetox_summary(   DTXSID = NULL,   API_key = NULL,   Server = hazard_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_genetox_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get genetox summary — get_genetox_summary","text":"DTXSID chemical identifier DTXSID API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_genetox_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get genetox summary — get_genetox_summary","text":"data.frame genetox summary data related input DTXSID.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_genetox_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get genetox summary — get_genetox_summary","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull genetox summary for BPA bpa_genetox_summary <- get_genetox_summary(DTXSID = 'DTXSID7020182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_genetox_summary_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genetox summary batch — get_genetox_summary_batch","title":"Get genetox summary batch — get_genetox_summary_batch","text":"Get genetox summary batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_genetox_summary_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genetox summary batch — get_genetox_summary_batch","text":"","code":"get_genetox_summary_batch(   DTXSID = NULL,   API_key = NULL,   rate_limit = 0L,   Server = hazard_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_genetox_summary_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get genetox summary batch — get_genetox_summary_batch","text":"DTXSID chemical identifier DTXSIDs API_key user-specific API key. rate_limit Number seconds wait requests Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_genetox_summary_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get genetox summary batch — get_genetox_summary_batch","text":"data.table genetox summary data input DTXSID.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_genetox_summary_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get genetox summary batch — get_genetox_summary_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull genetox summary data for multiples chemicals dtxsid <- c('DTXSID7020182', 'DTXSID2021315') dtxsid_genetox_summary_hazard <- get_genetox_summary_batch(DTXSID = dtxsid) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_hazard_by_dtxsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get hazard data by DTXSID — get_hazard_by_dtxsid","title":"Get hazard data by DTXSID — get_hazard_by_dtxsid","text":"Get hazard data DTXSID","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_hazard_by_dtxsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get hazard data by DTXSID — get_hazard_by_dtxsid","text":"","code":"get_hazard_by_dtxsid(   DTXSID = NULL,   API_key = NULL,   Server = hazard_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_hazard_by_dtxsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get hazard data by DTXSID — get_hazard_by_dtxsid","text":"DTXSID chemical identifier DTXSID API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_hazard_by_dtxsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get hazard data by DTXSID — get_hazard_by_dtxsid","text":"data.frame containing chemical (human eco) hazard data","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_hazard_by_dtxsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get hazard data by DTXSID — get_hazard_by_dtxsid","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull hazard data for BPA bpa <- get_hazard_by_dtxsid(DTXSID = 'DTXSID7020182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_hazard_by_dtxsid_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get hazard data by DTXSID batch — get_hazard_by_dtxsid_batch","title":"Get hazard data by DTXSID batch — get_hazard_by_dtxsid_batch","text":"Get hazard data DTXSID batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_hazard_by_dtxsid_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get hazard data by DTXSID batch — get_hazard_by_dtxsid_batch","text":"","code":"get_hazard_by_dtxsid_batch(   DTXSID = NULL,   API_key = NULL,   rate_limit = 0L,   Server = hazard_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_hazard_by_dtxsid_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get hazard data by DTXSID batch — get_hazard_by_dtxsid_batch","text":"DTXSID list chemical identifier DTXSIDs API_key user-specific API key rate_limit Number seconds wait request Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_hazard_by_dtxsid_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get hazard data by DTXSID batch — get_hazard_by_dtxsid_batch","text":"data.table containing chemical (human eco) hazard data input chemical.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_hazard_by_dtxsid_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get hazard data by DTXSID batch — get_hazard_by_dtxsid_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull hazard data for multiple chemicals dtxsid <- c('DTXSID7020182', 'DTXSID2021315') batch_hazard <- get_hazard_by_dtxsid_batch(DTXSID = dtxsid) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_hazard_endpoint_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Hazard API Endpoint status — get_hazard_endpoint_status","title":"Hazard API Endpoint status — get_hazard_endpoint_status","text":"Hazard API Endpoint status","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_hazard_endpoint_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hazard API Endpoint status — get_hazard_endpoint_status","text":"","code":"get_hazard_endpoint_status()"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_hazard_endpoint_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hazard API Endpoint status — get_hazard_endpoint_status","text":"Status Hazard API Endpoints","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_hazard_endpoint_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hazard API Endpoint status — get_hazard_endpoint_status","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") status <- get_hazard_endpoint_status() print(status) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_httk_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get httk data — get_httk_data","title":"Get httk data — get_httk_data","text":"Get httk data","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_httk_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get httk data — get_httk_data","text":"","code":"get_httk_data(   DTXSID = NULL,   API_key = NULL,   Server = exposure_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_httk_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get httk data — get_httk_data","text":"DTXSID chemical identifier DTXSID API_key user-specific API key Server root address API endpoint verbose logical indicating \"progress report\" given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_httk_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get httk data — get_httk_data","text":"data.table httk data given input chemical.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_httk_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get httk data — get_httk_data","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull httk data for BPA bpa_httk <- get_httk_data(DTXSID = 'DTXSID7020182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_httk_data_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve httk data via batch search — get_httk_data_batch","title":"Retrieve httk data via batch search — get_httk_data_batch","text":"Retrieve httk data via batch search","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_httk_data_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve httk data via batch search — get_httk_data_batch","text":"","code":"get_httk_data_batch(   DTXSID = NULL,   API_key = NULL,   rate_limit = 0L,   Server = exposure_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_httk_data_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve httk data via batch search — get_httk_data_batch","text":"DTXSID chemical identifier DTXSID API_key user-specific API key rate_limit Number seconds wait request Server root address API endpoint verbose logical indicating \"progress report\" given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_httk_data_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve httk data via batch search — get_httk_data_batch","text":"named list httk data corresponding input chemicals","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_httk_data_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve httk data via batch search — get_httk_data_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Retrieve information for BPA and Caffeine dtxsids <- c('DTXSID7020182', 'DTXSID0020232') httk_data <- get_httk_data_batch(DTXSID = dtxsids) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_human_hazard_by_dtxsid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get human hazard data by DTXSID — get_human_hazard_by_dtxsid","title":"Get human hazard data by DTXSID — get_human_hazard_by_dtxsid","text":"Get human hazard data DTXSID","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_human_hazard_by_dtxsid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get human hazard data by DTXSID — get_human_hazard_by_dtxsid","text":"","code":"get_human_hazard_by_dtxsid(   DTXSID = NULL,   API_key = NULL,   Server = hazard_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_human_hazard_by_dtxsid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get human hazard data by DTXSID — get_human_hazard_by_dtxsid","text":"DTXSID chemical identifier DTXSID API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_human_hazard_by_dtxsid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get human hazard data by DTXSID — get_human_hazard_by_dtxsid","text":"data.frame containing chemical human hazard data","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_human_hazard_by_dtxsid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get human hazard data by DTXSID — get_human_hazard_by_dtxsid","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull human hazard data for BPA bpa_human <- get_human_hazard_by_dtxsid(DTXSID = 'DTXSID7020182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_human_hazard_by_dtxsid_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get human hazard data by DTXSID batch — get_human_hazard_by_dtxsid_batch","title":"Get human hazard data by DTXSID batch — get_human_hazard_by_dtxsid_batch","text":"Get human hazard data DTXSID batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_human_hazard_by_dtxsid_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get human hazard data by DTXSID batch — get_human_hazard_by_dtxsid_batch","text":"","code":"get_human_hazard_by_dtxsid_batch(   DTXSID = NULL,   API_key = NULL,   rate_limit = 0L,   Server = hazard_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_human_hazard_by_dtxsid_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get human hazard data by DTXSID batch — get_human_hazard_by_dtxsid_batch","text":"DTXSID list chemical identifier DTXSIDs. API_key user-specific API key. rate_limit Number seconds wait request Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_human_hazard_by_dtxsid_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get human hazard data by DTXSID batch — get_human_hazard_by_dtxsid_batch","text":"data.table containing chemical human hazard data.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_human_hazard_by_dtxsid_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get human hazard data by DTXSID batch — get_human_hazard_by_dtxsid_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull human hazard data for multiples chemicals dtxsid <- c('DTXSID7020182', 'DTXSID2021315') dtxsid_human_hazard <- get_human_hazard_by_dtxsid_batch(DTXSID = dtxsid) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_inchi.html","id":null,"dir":"Reference","previous_headings":"","what":"Get InChI — get_inchi","title":"Get InChI — get_inchi","text":"Get InChI","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_inchi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get InChI — get_inchi","text":"","code":"get_inchi(   name = NULL,   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_inchi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get InChI — get_inchi","text":"name Chemical name API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_inchi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get InChI — get_inchi","text":"string giving associated inchi string.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_inchi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get InChI — get_inchi","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") bpa_inchi <- get_inchi(name = \"Bisphenol A\") }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_inchikey.html","id":null,"dir":"Reference","previous_headings":"","what":"Get InChIKey — get_inchikey","title":"Get InChIKey — get_inchikey","text":"Get InChIKey","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_inchikey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get InChIKey — get_inchikey","text":"","code":"get_inchikey(   name = NULL,   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_inchikey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get InChIKey — get_inchikey","text":"name Chemical name API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_inchikey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get InChIKey — get_inchikey","text":"string giving associated InChIKey.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_inchikey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get InChIKey — get_inchikey","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") bpa_inchikey <- get_inchikey(name = \"Bisphenol A\") }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_lists_containing_chemical.html","id":null,"dir":"Reference","previous_headings":"","what":"Get chemical lists containing given chemical — get_lists_containing_chemical","title":"Get chemical lists containing given chemical — get_lists_containing_chemical","text":"Get chemical lists containing given chemical","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_lists_containing_chemical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chemical lists containing given chemical — get_lists_containing_chemical","text":"","code":"get_lists_containing_chemical(   DTXSID = NULL,   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_lists_containing_chemical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chemical lists containing given chemical — get_lists_containing_chemical","text":"DTXSID chemical identifier DTXSID API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_lists_containing_chemical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chemical lists containing given chemical — get_lists_containing_chemical","text":"list names chemical lists contain given chemical","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_lists_containing_chemical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get chemical lists containing given chemical — get_lists_containing_chemical","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemical lists containing BPA bpa_lists <- get_lists_containing_chemical(DTXSID = 'DTXSID7020182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_lists_containing_chemical_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get chemical lists containing given chemical batch — get_lists_containing_chemical_batch","title":"Get chemical lists containing given chemical batch — get_lists_containing_chemical_batch","text":"Get chemical lists containing given chemical batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_lists_containing_chemical_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chemical lists containing given chemical batch — get_lists_containing_chemical_batch","text":"","code":"get_lists_containing_chemical_batch(   chemical_list = NULL,   API_key = NULL,   rate_limit = 0L,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_lists_containing_chemical_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chemical lists containing given chemical batch — get_lists_containing_chemical_batch","text":"chemical_list list chemical identifier DTXSIDs. API_key user-specific API key. rate_limit Number seconds wait request verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_lists_containing_chemical_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chemical lists containing given chemical batch — get_lists_containing_chemical_batch","text":"named list chemical lists contain given chemicals.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_lists_containing_chemical_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get chemical lists containing given chemical batch — get_lists_containing_chemical_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull lists containing chemicals for multiple chemicals lists <- get_lists_containing_chemical_batch(chemical_list = c('DTXSID7020182',                                                                'DTXSID2021315')) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_dtxcid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get msready by DTXCID — get_msready_by_dtxcid","title":"Get msready by DTXCID — get_msready_by_dtxcid","text":"Get msready DTXCID","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_dtxcid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get msready by DTXCID — get_msready_by_dtxcid","text":"","code":"get_msready_by_dtxcid(   DTXCID = NULL,   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_dtxcid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get msready by DTXCID — get_msready_by_dtxcid","text":"DTXCID chemical identifier DTXCID API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_dtxcid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get msready by DTXCID — get_msready_by_dtxcid","text":"character list DTXSIDs DTXCIDs matching search criteria","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_dtxcid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get msready by DTXCID — get_msready_by_dtxcid","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemicals with matching DTXCID dtxcid_msready <- get_msready_by_dtxcid(DTXSID = 'DTXCID30182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_dtxcid_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get msready by DTXCID batch search — get_msready_by_dtxcid_batch","title":"Get msready by DTXCID batch search — get_msready_by_dtxcid_batch","text":"Get msready DTXCID batch search","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_dtxcid_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get msready by DTXCID batch search — get_msready_by_dtxcid_batch","text":"","code":"get_msready_by_dtxcid_batch(   DTXCID = NULL,   API_key = NULL,   rate_limit = 0L,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_dtxcid_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get msready by DTXCID batch search — get_msready_by_dtxcid_batch","text":"DTXCID list chemical identifier DTXCIDs API_key user-specific API key rate_limit Number seconds wait request verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_dtxcid_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get msready by DTXCID batch search — get_msready_by_dtxcid_batch","text":"named list character lists DTXSIDs DTXCIDs matching search criteria","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_dtxcid_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get msready by DTXCID batch search — get_msready_by_dtxcid_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull msready chemicals matching specific DTXCID dtxcid_msready <- get_msready_by_dtxcid_batch(DTXCID = c('DTXCID30182',                                                          'DTXCID001315')) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Get msready by formula — get_msready_by_formula","title":"Get msready by formula — get_msready_by_formula","text":"Get msready formula","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get msready by formula — get_msready_by_formula","text":"","code":"get_msready_by_formula(   formula = NULL,   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get msready by formula — get_msready_by_formula","text":"formula string denoting input chemical formula API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get msready by formula — get_msready_by_formula","text":"character list DTXSIDs chemical formulas matching search criteria","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get msready by formula — get_msready_by_formula","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemicals that match input formula mass_formula <- get_msready_by_formula(formula = 'C16H24N2O5S') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_formula_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get msready by formula batch search — get_msready_by_formula_batch","title":"Get msready by formula batch search — get_msready_by_formula_batch","text":"Get msready formula batch search","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_formula_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get msready by formula batch search — get_msready_by_formula_batch","text":"","code":"get_msready_by_formula_batch(   formula_list = NULL,   API_key = NULL,   rate_limit = 0L,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_formula_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get msready by formula batch search — get_msready_by_formula_batch","text":"formula_list list strings denoting input chemicals formulas API_key user-specific API key rate_limit Number seconds wait request verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_formula_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get msready by formula batch search — get_msready_by_formula_batch","text":"named list character lists DTXSIDs chemical formulas matching search criteria","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_formula_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get msready by formula batch search — get_msready_by_formula_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull msready data for several chemical formulas msready_data <- get_msready_by_formula_batch(formula_list = c('C16H24N2O5S',                                                               'C15H16O2')) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_mass.html","id":null,"dir":"Reference","previous_headings":"","what":"Get msready by mass — get_msready_by_mass","title":"Get msready by mass — get_msready_by_mass","text":"Get msready mass","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_mass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get msready by mass — get_msready_by_mass","text":"","code":"get_msready_by_mass(   start = NULL,   end = NULL,   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_mass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get msready by mass — get_msready_by_mass","text":"start starting value mass range end ending value mass range API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_mass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get msready by mass — get_msready_by_mass","text":"list DTXSIDs msready mass falling within given range.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_mass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get msready by mass — get_msready_by_mass","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemicals with msready mass in given range mass_range <- get_msready_by_mass(start = 200.9, end = 200.95) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_mass_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get ms ready by mass batch search — get_msready_by_mass_batch","title":"Get ms ready by mass batch search — get_msready_by_mass_batch","text":"Get ms ready mass batch search","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_mass_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get ms ready by mass batch search — get_msready_by_mass_batch","text":"","code":"get_msready_by_mass_batch(   start_list = NULL,   end_list = NULL,   API_key = NULL,   rate_limit = 0L,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_mass_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get ms ready by mass batch search — get_msready_by_mass_batch","text":"start_list numeric list starting values mass range end_list numeric list ending values mass range API_key user-specific API key rate_limit Number seconds wait request verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_mass_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get ms ready by mass batch search — get_msready_by_mass_batch","text":"named list character lists DTXSIDs msready masses falling within given ranges.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_mass_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get ms ready by mass batch search — get_msready_by_mass_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull msready chemicals by mass ranges msready_data <- get_msready_by_mass_batch(start_list = c(200.9, 200.95),                                           end_list = c(200.95, 201.00)) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_mass_with_error_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get msready by mass and error offset — get_msready_by_mass_with_error_batch","title":"Get msready by mass and error offset — get_msready_by_mass_with_error_batch","text":"Get msready mass error offset","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_mass_with_error_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get msready by mass and error offset — get_msready_by_mass_with_error_batch","text":"","code":"get_msready_by_mass_with_error_batch(   masses = NULL,   error = NULL,   API_key = NULL,   rate_limit = 0,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_mass_with_error_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get msready by mass and error offset — get_msready_by_mass_with_error_batch","text":"masses numeric list masses. error mass offset value. API_key user-specific API key. rate_limit Number seconds wait request verbose logical indicating \"progress report\" given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_mass_with_error_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get msready by mass and error offset — get_msready_by_mass_with_error_batch","text":"list (lists) DTXSIDs, list returned input mass value.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_msready_by_mass_with_error_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get msready by mass and error offset — get_msready_by_mass_with_error_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") #Pull chemicals by msready mass and error offset msready_data <- get_msready_by_mass_with_error_batch(masses = c(226, 228),                                                      error = 4) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_public_chemical_list_by_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get chemical list by name — get_public_chemical_list_by_name","title":"Get chemical list by name — get_public_chemical_list_by_name","text":"Get chemical list name","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_public_chemical_list_by_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chemical list by name — get_public_chemical_list_by_name","text":"","code":"get_public_chemical_list_by_name(   list_name = NULL,   Projection = \"\",   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_public_chemical_list_by_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chemical list by name — get_public_chemical_list_by_name","text":"list_name name list chemicals Projection Optional parameter controlling return type. takes values chemicallistall' 'chemicallistname' former default value. API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_public_chemical_list_by_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chemical list by name — get_public_chemical_list_by_name","text":"data.frame containing information chemical list. Note, chemical list . access chemicals list, use get_chemicals_in_list.","code":""},{"path":[]},{"path":"https://usepa.github.io/ctxR/dev/reference/get_public_chemical_list_by_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get chemical list by name — get_public_chemical_list_by_name","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemical list by list name ccl4 <- get_public_chemical_list_by_name(list_name = 'CCL4') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_public_chemical_list_by_name_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get chemical list by name batch — get_public_chemical_list_by_name_batch","title":"Get chemical list by name batch — get_public_chemical_list_by_name_batch","text":"Get chemical list name batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_public_chemical_list_by_name_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get chemical list by name batch — get_public_chemical_list_by_name_batch","text":"","code":"get_public_chemical_list_by_name_batch(   name_list = NULL,   Projection = \"\",   API_key = NULL,   rate_limit = 0L,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_public_chemical_list_by_name_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get chemical list by name batch — get_public_chemical_list_by_name_batch","text":"name_list list chemical list names. Projection Optional parameter controlling return type. takes values 'chemicallistall' 'chemicallistname' former default value. API_key user-specific API key. rate_limit Number seconds wait request verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_public_chemical_list_by_name_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get chemical list by name batch — get_public_chemical_list_by_name_batch","text":"named list data.frames containing information chemical lists. Note, chemical lists . access chemicals given list, use get_chemicals_in_list.","code":""},{"path":[]},{"path":"https://usepa.github.io/ctxR/dev/reference/get_public_chemical_list_by_name_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get chemical list by name batch — get_public_chemical_list_by_name_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull chemical list information by list names list_info <- get_public_chemical_list_by_name_batch(name_list = c('CCL4',                                                                   'NATADB')) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_skin_eye_hazard.html","id":null,"dir":"Reference","previous_headings":"","what":"Get skin and eye hazard — get_skin_eye_hazard","title":"Get skin and eye hazard — get_skin_eye_hazard","text":"Get skin eye hazard","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_skin_eye_hazard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get skin and eye hazard — get_skin_eye_hazard","text":"","code":"get_skin_eye_hazard(   DTXSID = NULL,   API_key = NULL,   Server = hazard_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_skin_eye_hazard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get skin and eye hazard — get_skin_eye_hazard","text":"DTXSID chemical identifier DTXSID API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_skin_eye_hazard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get skin and eye hazard — get_skin_eye_hazard","text":"data.frame containing skin eye hazard data.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_skin_eye_hazard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get skin and eye hazard — get_skin_eye_hazard","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull skin and eye hazard data for BPA bpa_skin_eye <- get_skin_eye_hazard_batch(DTXSID = 'DTXSID7020182') }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_skin_eye_hazard_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Get skin and eye hazard batch — get_skin_eye_hazard_batch","title":"Get skin and eye hazard batch — get_skin_eye_hazard_batch","text":"Get skin eye hazard batch","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_skin_eye_hazard_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get skin and eye hazard batch — get_skin_eye_hazard_batch","text":"","code":"get_skin_eye_hazard_batch(   DTXSID = NULL,   API_key = NULL,   rate_limit = 0L,   Server = hazard_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_skin_eye_hazard_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get skin and eye hazard batch — get_skin_eye_hazard_batch","text":"DTXSID chemical identifier DTXSIDs API_key user-specific API key. rate_limit Number seconds wait request Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_skin_eye_hazard_batch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get skin and eye hazard batch — get_skin_eye_hazard_batch","text":"named list data.frames containing skin eye hazard data input DTXSID.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_skin_eye_hazard_batch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get skin and eye hazard batch — get_skin_eye_hazard_batch","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Pull skin eye hazard data for multiples chemicals dtxsid <- c('DTXSID7020182', 'DTXSID2021315') dtxsid_skin_eye_hazard <- get_skin_eye_hazard_batch(DTXSID = dtxsid) }"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_smiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Smiles — get_smiles","title":"Get Smiles — get_smiles","text":"Get Smiles","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_smiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Smiles — get_smiles","text":"","code":"get_smiles(   name = NULL,   API_key = NULL,   Server = chemical_api_server,   verbose = FALSE )"},{"path":"https://usepa.github.io/ctxR/dev/reference/get_smiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Smiles — get_smiles","text":"name Chemical name API_key user-specific API key Server root address API endpoint verbose logical indicating “progress report” given.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_smiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Smiles — get_smiles","text":"string giving SMILES string input chemical.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/get_smiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Smiles — get_smiles","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") bpa_smiles <- get_smiles(name = \"Bisphenol A\") }"},{"path":"https://usepa.github.io/ctxR/dev/reference/hazard_api_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Hazard API Server url — hazard_api_server","title":"Hazard API Server url — hazard_api_server","text":"section url used Hazard API Endpoints","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/hazard_api_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hazard API Server url — hazard_api_server","text":"","code":"hazard_api_server"},{"path":"https://usepa.github.io/ctxR/dev/reference/hazard_api_server.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hazard API Server url — hazard_api_server","text":"object class character length 1.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/prepare_word.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare url helper function — prepare_word","title":"Prepare url helper function — prepare_word","text":"Prepare url helper function","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/prepare_word.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare url helper function — prepare_word","text":"","code":"prepare_word(word)"},{"path":"https://usepa.github.io/ctxR/dev/reference/prepare_word.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare url helper function — prepare_word","text":"word character string","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/prepare_word.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare url helper function — prepare_word","text":"character string ready use http request","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/register_ctx_api_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Register CTX API Key for ctxR — register_ctx_api_key","title":"Register CTX API Key for ctxR — register_ctx_api_key","text":"page contains documentation tools related enabling CTX API services R.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/register_ctx_api_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register CTX API Key for ctxR — register_ctx_api_key","text":"","code":"showing_key()  ctxR_show_api_key()  ctxR_hide_api_key()  register_ctx_api_key(key, write = FALSE)  # S3 method for class 'ctx_credentials' print(...)  ctx_key()  has_ctx_key()"},{"path":"https://usepa.github.io/ctxR/dev/reference/register_ctx_api_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register CTX API Key for ctxR — register_ctx_api_key","text":"key API key write TRUE, stores secrets provided .Renviron file ... dumped formal argument generic print method","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/register_ctx_api_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register CTX API Key for ctxR — register_ctx_api_key","text":"showing_key returns Boolean. ctxR_show_api_key() return value side effect changing display settings API key. ctxR_hide_api_key() return value side effect changing display settings API key. register_ctx_api_key() return value side effect storing API key. print.ctx_credentials() return value S3 method printing ctx_credentials class. ctx_key() returns string, either stored API key NA_character_. has_ctx_key() returns Boolean.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/register_ctx_api_key.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register CTX API Key for ctxR — register_ctx_api_key","text":"obtain API key enable services, go https://www.epa.gov/comptox-tools/computational-toxicology--exposure-apis. documentation shows obtain API key allow access CTX APIs. tell ctxR API key, use register_ctx_api_key(), e.g. register_ctx_api_key(key = 'grbwigbwoginrowgbwibgdibdvinrginiwgo') (fake key). set API key current session, restart R, need . can set permanently setting write = TRUEm see examples. set permanently stored local file, accessed ctxR persistently across sessions. Users aware API key, string garbled characters/numbers/symbols, PRIVATE key - uniquely identifies authenticates CTX's services. anyone gets API key, can use masquerade CTX. mitigate users inadvertently sharing keys, default ctxR never displays user's key messages displayed console. Users aware ctxR mechanism safeguard private key registered R. say, register API key, R function access . consequence, ctxR know another function, potentially compromised package, accesses key uploads third party. reason, using ctxR recommend heightened sense security self-awareness: use trusted packages, save API keys script files, etc.","code":""},{"path":"https://usepa.github.io/ctxR/dev/reference/register_ctx_api_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register CTX API Key for ctxR — register_ctx_api_key","text":"","code":"if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Check if API key is showing showing_key() } if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Toggle API key to display ctxR_show_api_key() } if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Toggle API key to be hidden ctxR_hide_api_key() } if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Register key for this session register_ctx_api_key(key = 'YOUR API KEY') # Register key over sessions register_ctx_api_key(key = 'YOUR API KEY', write = TRUE) } if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Print function for ctx_credentials class print.ctx_credentials() } if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Display ctx API key ctx_key() } if (FALSE) { # has_ctx_key() & is.na(ctx_key() == \"FAKE_KEY\") # Check whether API key is registered has_ctx_key() }"},{"path":[]},{"path":"https://usepa.github.io/ctxR/dev/news/index.html","id":"minor-improvements-and-fixes-development-version","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"ctxR (development version)","text":"Adjusted chemical_contains(), chemical_equal(), chemical_starts_with() handle http 400 errors returned information requests. Adjusted chemical_contains_batch(), chemical_equals_batch(), chemical_starts_with_batch() return named lists valid invalid search results, invalid results containing information 400 errors (@kisaacs1, #11).","code":""},{"path":"https://usepa.github.io/ctxR/dev/news/index.html","id":"new-features-development-version","dir":"Changelog","previous_headings":"","what":"New features","title":"ctxR (development version)","text":"Added check_existence_by_dtxsid(), check_existence_by_dtxsid_batch() functions. Updated Chemical.Rmd vignette include examples use functions (#27). Added get_httk_data(), get_httk_data_batch(), get_general_exposure_prediction(), get_general_exposure_prediction_batch(), get_demographic_exposure_prediction(), get_demographic_exposure_prediction_batch() functions. Updated Exposure.Rmd vignette include examples use functions (#6).","code":""},{"path":"https://usepa.github.io/ctxR/dev/news/index.html","id":"ctxr-100","dir":"Changelog","previous_headings":"","what":"ctxR 1.0.0","title":"ctxR 1.0.0","text":"CRAN release: 2024-07-04 Initial release. Renamed package ccdR package better alignment US EPA CTX APIs.","code":""}]
